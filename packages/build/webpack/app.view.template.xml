<% const { files, options } = htmlWebpackPlugin; %>
<view xmlns="http://labkey.org/data/xml/view" isAppView="true"
    <% if (options.viewTemplate !== undefined) { %>
      template="<%= options.viewTemplate %>"
    <% } %>
      frame="none"
      title="<%= htmlWebpackPlugin.options.title %>"
>
    <% if (htmlWebpackPlugin.options.permission) { %>
    <permissions>
        <permission name="<%= htmlWebpackPlugin.options.permission %>"/>
    </permissions>
    <% } %>
    <% if (htmlWebpackPlugin.options.permissionClasses) { %>
    <permissionClasses>
        <% htmlWebpackPlugin.options.permissionClasses.forEach((permissionClass) => { %>
        <permissionClass name="<%= permissionClass %>"/>
        <% }); %>
    </permissionClasses>
    <% } %>
    <dependencies>
        <dependency path="clientapi"/>
        <dependency path="vis/vis"/>
        <dependency path="vis/genericChart/genericChartHelper.js"/>
    <% if (options.mode !== 'dev') { %>
        <%
            const publicPath = files.publicPath;
            const resourcesPath = 'gen/';
            [...files.css, ...files.js].forEach((filePath) => {
                // It would be preferred to map these by entryPoint rather than hard code the file paths.
                // This could theoretically be done by poking the "compilation" object from webpack but I could not
                // find a strategy that works.
                if (filePath.indexOf('vendors') > -1 || filePath.indexOf(options.name) > -1) {
        %>
        <dependency path="<%= filePath.replace(publicPath, resourcesPath) %>"/>
        <%  }}); %>
    <% } %>
    </dependencies>
</view>
