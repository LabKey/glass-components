// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SingleParentEntityPanel> empty state editing 1`] = `
<SingleParentEntityPanel
  childNounSingular="Sample"
  editing={true}
  index={0}
  parentDataType={
    Object {
      "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
      "deleteHelpLinkTopic": "dataClass",
      "dependencyText": "derived sample dependencies",
      "descriptionPlural": "parent types",
      "descriptionSingular": "parent type",
      "inputColumnName": "Inputs/Data/First",
      "inputTypeColumnName": "Inputs/Data/First/DataClass",
      "inputTypeValueField": "rowId",
      "insertColumnNamePrefix": "DataInputs/",
      "instanceSchemaName": "exp.data",
      "nounAsParentSingular": "Parent",
      "nounPlural": "data",
      "nounSingular": "data",
      "typeListingSchemaQuery": Immutable.Record {
        "schemaName": "exp",
        "queryName": "DataClasses",
        "viewName": undefined,
      },
      "typeNounSingular": "Data Type",
      "uniqueFieldKey": "Name",
    }
  }
  parentTypeOptions={
    Immutable.List [
      Object {
        "label": "Second Source",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
        "query": "Second Source",
        "rowId": 322,
        "schema": "exp.data",
        "value": "second source",
      },
      Object {
        "label": "Source 1",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
        "query": "Source 1",
        "rowId": 321,
        "schema": "exp.data",
        "value": "source 1",
      },
      Object {
        "label": "Vendor 3",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
        "query": "Vendor 3",
        "rowId": 323,
        "schema": "exp.data",
        "value": "vendor 3",
      },
    ]
  }
>
  <div
    className="bottom-spacing"
    key="parent-selections-0"
  >
    <div
      className="form-group row"
    >
      <SelectInput
        containerClass=""
        formsy={false}
        inputClass="col-sm-6"
        label="Data Type 1"
        labelClass="col-sm-3 col-xs-12 entity-insert--parent-label"
        name="entityType0"
        onChange={[Function]}
        options={
          Array [
            Object {
              "label": "Second Source",
              "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
              "query": "Second Source",
              "rowId": 322,
              "schema": "exp.data",
              "value": "second source",
            },
            Object {
              "label": "Source 1",
              "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
              "query": "Source 1",
              "rowId": 321,
              "schema": "exp.data",
              "value": "source 1",
            },
            Object {
              "label": "Vendor 3",
              "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
              "query": "Vendor 3",
              "rowId": 323,
              "schema": "exp.data",
              "value": "vendor 3",
            },
          ]
        }
        placeholder="Select a Data Type ..."
        required={true}
      >
        <SelectInputImpl
          allowCreate={false}
          allowDisable={false}
          autoValue={true}
          autoload={true}
          clearCacheOnChange={true}
          containerClass=""
          delimiter=","
          formsy={false}
          initiallyDisabled={false}
          inputClass="col-sm-6"
          label="Data Type 1"
          labelClass="col-sm-3 col-xs-12 entity-insert--parent-label"
          labelKey="label"
          name="entityType0"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Second Source",
                "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
                "query": "Second Source",
                "rowId": 322,
                "schema": "exp.data",
                "value": "second source",
              },
              Object {
                "label": "Source 1",
                "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
                "query": "Source 1",
                "rowId": 321,
                "schema": "exp.data",
                "value": "source 1",
              },
              Object {
                "label": "Vendor 3",
                "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
                "query": "Vendor 3",
                "rowId": 323,
                "schema": "exp.data",
                "value": "vendor 3",
              },
            ]
          }
          placeholder="Select a Data Type ..."
          required={true}
          saveOnBlur={false}
          showLabel={true}
          valueKey="value"
        >
          <div
            className=""
          >
            <FieldLabel
              fieldName="entityType0"
              id="selectinput-0"
              isDisabled={false}
              labelOverlayProps={
                Object {
                  "addLabelAsterisk": undefined,
                  "description": "Select  a Data Type 1",
                  "inputId": "entityType0",
                  "isFormsy": false,
                  "label": "Data Type 1",
                  "labelClass": "col-sm-3 col-xs-12 entity-insert--parent-label",
                  "required": true,
                }
              }
              showLabel={true}
              showToggle={false}
              toggleProps={
                Object {
                  "onClick": [Function],
                }
              }
              withLabelOverlay={true}
            >
              <LabelOverlay
                addLabelAsterisk={false}
                canMouseOverTooltip={false}
                description="Select  a Data Type 1"
                inputId="entityType0"
                isFormsy={false}
                label="Data Type 1"
                labelClass="col-sm-3 col-xs-12 entity-insert--parent-label"
                required={true}
              >
                <label
                  className="col-sm-3 col-xs-12 entity-insert--parent-label text__truncate-and-wrap"
                  htmlFor="entityType0"
                  title="Data Type 1"
                >
                  <span>
                    Data Type 1
                  </span>
                  Â 
                  <OverlayTrigger
                    defaultOverlayShown={false}
                    overlay={
                      <Popover
                        bsClass="popover"
                        id="labkey-app-1"
                        placement="right"
                        title="Data Type 1"
                      >
                        <React.Fragment>
                          <p>
                            <strong>
                              Description: 
                            </strong>
                            Select  a Data Type 1
                          </p>
                          <p>
                            <small>
                              <i>
                                This field is required.
                              </i>
                            </small>
                          </p>
                        </React.Fragment>
                      </Popover>
                    }
                    trigger={
                      Array [
                        "hover",
                        "focus",
                      ]
                    }
                  >
                    <i
                      className="fa fa-question-circle"
                      onBlur={[Function]}
                      onClick={null}
                      onFocus={[Function]}
                      onMouseOut={[Function]}
                      onMouseOver={[Function]}
                    />
                  </OverlayTrigger>
                  <span
                    className="required-symbol"
                  >
                     *
                  </span>
                </label>
              </LabelOverlay>
            </FieldLabel>
            <div
              className="col-sm-6"
            >
              <Select
                addLabelText="Add \\"{label}\\"?"
                arrowRenderer={[Function]}
                autoload={true}
                autosize={true}
                backspaceRemoves={true}
                backspaceToRemoveMessage="Press backspace to remove {label}"
                clearAllText="Clear all"
                clearRenderer={[Function]}
                clearValueText="Clear value"
                clearable={true}
                closeOnSelect={true}
                deleteRemoves={true}
                delimiter=","
                disabled={false}
                escapeClearsValue={true}
                filterOptions={[Function]}
                ignoreAccents={true}
                ignoreCase={true}
                inputProps={
                  Object {
                    "id": "selectinput-0",
                  }
                }
                isLoading={false}
                joinValues={false}
                labelKey="label"
                matchPos="any"
                matchProp="any"
                menuBuffer={0}
                menuRenderer={[Function]}
                multi={false}
                name="entityType0"
                noResultsText="No results found"
                onBlur={[Function]}
                onBlurResetsInput={true}
                onChange={[Function]}
                onCloseResetsInput={true}
                onFocus={[Function]}
                onSelectResetsInput={true}
                openOnClick={true}
                optionComponent={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Second Source",
                      "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
                      "query": "Second Source",
                      "rowId": 322,
                      "schema": "exp.data",
                      "value": "second source",
                    },
                    Object {
                      "label": "Source 1",
                      "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
                      "query": "Source 1",
                      "rowId": 321,
                      "schema": "exp.data",
                      "value": "source 1",
                    },
                    Object {
                      "label": "Vendor 3",
                      "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
                      "query": "Vendor 3",
                      "rowId": 323,
                      "schema": "exp.data",
                      "value": "vendor 3",
                    },
                  ]
                }
                pageSize={5}
                placeholder="Select a Data Type ..."
                required={true}
                scrollMenuIntoView={true}
                searchable={true}
                simpleValue={false}
                tabSelectsValue={true}
                valueComponent={[Function]}
                valueKey="value"
              >
                <div
                  className="Select Select--single is-clearable is-searchable"
                >
                  <div
                    className="Select-control"
                    onKeyDown={[Function]}
                    onMouseDown={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                  >
                    <span
                      className="Select-multi-value-wrapper"
                      id="react-select-2--value"
                    >
                      <div
                        className="Select-placeholder"
                      >
                        Select a Data Type ...
                      </div>
                      <AutosizeInput
                        aria-activedescendant="react-select-2--value"
                        aria-expanded="false"
                        aria-haspopup="false"
                        aria-owns=""
                        className="Select-input"
                        id="selectinput-0"
                        injectStyles={true}
                        minWidth="5"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        required={true}
                        role="combobox"
                        value=""
                      >
                        <div
                          className="Select-input"
                          style={
                            Object {
                              "display": "inline-block",
                            }
                          }
                        >
                          <input
                            aria-activedescendant="react-select-2--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            id="selectinput-0"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={true}
                            role="combobox"
                            style={
                              Object {
                                "boxSizing": "content-box",
                                "width": "5px",
                              }
                            }
                            value=""
                          />
                          <div
                            style={
                              Object {
                                "height": 0,
                                "left": 0,
                                "overflow": "scroll",
                                "position": "absolute",
                                "top": 0,
                                "visibility": "hidden",
                                "whiteSpace": "pre",
                              }
                            }
                          />
                        </div>
                      </AutosizeInput>
                    </span>
                    <span
                      className="Select-arrow-zone"
                      onMouseDown={[Function]}
                    >
                      <span
                        className="Select-arrow"
                        onMouseDown={[Function]}
                      />
                    </span>
                  </div>
                </div>
              </Select>
            </div>
          </div>
        </SelectInputImpl>
      </SelectInput>
    </div>
  </div>
</SingleParentEntityPanel>
`;

exports[`<SingleParentEntityPanel> empty state not editing 1`] = `
<SingleParentEntityPanel
  childNounSingular="Sample"
  editing={false}
  index={0}
  parentDataType={
    Object {
      "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
      "deleteHelpLinkTopic": "dataClass",
      "dependencyText": "derived sample dependencies",
      "descriptionPlural": "parent types",
      "descriptionSingular": "parent type",
      "inputColumnName": "Inputs/Data/First",
      "inputTypeColumnName": "Inputs/Data/First/DataClass",
      "inputTypeValueField": "rowId",
      "insertColumnNamePrefix": "DataInputs/",
      "instanceSchemaName": "exp.data",
      "nounAsParentSingular": "Parent",
      "nounPlural": "data",
      "nounSingular": "data",
      "typeListingSchemaQuery": Immutable.Record {
        "schemaName": "exp",
        "queryName": "DataClasses",
        "viewName": undefined,
      },
      "typeNounSingular": "Data Type",
      "uniqueFieldKey": "Name",
    }
  }
  parentTypeOptions={
    Immutable.List [
      Object {
        "label": "Second Source",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
        "query": "Second Source",
        "rowId": 322,
        "schema": "exp.data",
        "value": "second source",
      },
      Object {
        "label": "Source 1",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
        "query": "Source 1",
        "rowId": 321,
        "schema": "exp.data",
        "value": "source 1",
      },
      Object {
        "label": "Vendor 3",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
        "query": "Vendor 3",
        "rowId": 323,
        "schema": "exp.data",
        "value": "vendor 3",
      },
    ]
  }
>
  <div
    className="top-spacing"
    key="grid-0"
  >
    <table
      className="table table-responsive table-condensed detail-component--table__fixed"
    >
      <tbody>
        <tr
          key="type-name"
        >
          <td>
            Data Type
          </td>
          <td>
            No 
            data type
             has been set for this 
            sample
            .
          </td>
        </tr>
        <tr
          key="parent-id"
        >
          <td>
            Data ID
          </td>
          <td>
            No 
            data
             ID has been set for this 
            sample
            .
          </td>
        </tr>
      </tbody>
    </table>
  </div>
</SingleParentEntityPanel>
`;

exports[`<SingleParentEntityPanel> with data not editing 1`] = `
<SingleParentEntityPanel
  childNounSingular="Sample"
  editing={false}
  index={0}
  onRemoveParentType={[Function]}
  parentDataType={
    Object {
      "appUrlPrefixParts": Array [
        "sources",
      ],
      "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
      "deleteHelpLinkTopic": "dataClass",
      "dependencyText": "derived sample dependencies",
      "descriptionPlural": "parent types",
      "descriptionSingular": "parent type",
      "inputColumnName": "Inputs/Data/First",
      "inputTypeColumnName": "Inputs/Data/First/DataClass",
      "inputTypeValueField": "rowId",
      "insertColumnNamePrefix": "DataInputs/",
      "instanceSchemaName": "exp.data",
      "nounAsParentSingular": "Parent",
      "nounPlural": "data",
      "nounSingular": "data",
      "typeListingSchemaQuery": Immutable.Record {
        "schemaName": "exp",
        "queryName": "DataClasses",
        "viewName": undefined,
      },
      "typeNounSingular": "Data Type",
      "uniqueFieldKey": "Name",
    }
  }
  parentLSIDs={
    Array [
      "url:lsid:blah",
    ]
  }
  parentTypeOptions={
    Immutable.List [
      Object {
        "label": "Second Source",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Second+Source",
        "query": "Second Source",
        "rowId": 322,
        "schema": "exp.data",
        "value": "second source",
      },
      Object {
        "label": "Source 1",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Source+1",
        "query": "Source 1",
        "rowId": 321,
        "schema": "exp.data",
        "value": "source 1",
      },
      Object {
        "label": "Vendor 3",
        "lsid": "urn:lsid:labkey.com:DataClass.Folder-252:Vendor+3",
        "query": "Vendor 3",
        "rowId": 323,
        "schema": "exp.data",
        "value": "vendor 3",
      },
    ]
  }
  parentTypeQueryName="Second Source"
>
  <div
    className="top-spacing"
    key="grid-0"
  >
    <table
      className="table table-responsive table-condensed detail-component--table__fixed"
    >
      <tbody>
        <tr
          key="type-name"
        >
          <td>
            Data Type
          </td>
          <td>
            <a
              href="#/sources/second%20source"
            >
              Second Source
            </a>
          </td>
        </tr>
      </tbody>
    </table>
    <QueryGridPanel
      asPanel={false}
      model={
        Immutable.Record {
          "id": "parent-data-second source|exp$pdata/second source",
          "schema": "exp.data",
          "query": "Second Source",
          "queryParameters": undefined,
          "allowSelection": false,
          "baseFilters": Immutable.List [
            Filter {
              "columnName": "LSID",
              "filterType": Object {
                "getDisplaySymbol": [Function],
                "getDisplayText": [Function],
                "getLongDisplayText": [Function],
                "getMultiValueFilter": [Function],
                "getMultiValueMaxOccurs": [Function],
                "getMultiValueMinOccurs": [Function],
                "getMultiValueSeparator": [Function],
                "getOpposite": [Function],
                "getSingleValueFilter": [Function],
                "getURLParameterValue": [Function],
                "getURLSuffix": [Function],
                "isDataValueRequired": [Function],
                "isMultiValued": [Function],
                "isTableWise": [Function],
                "splitValue": [Function],
                "validate": [Function],
              },
              "value": Array [
                "url:lsid:blah",
              ],
            },
          ],
          "bindURL": false,
          "containerPath": undefined,
          "containerFilter": undefined,
          "data": Immutable.Map {},
          "dataIds": Immutable.List [],
          "displayColumns": undefined,
          "editable": false,
          "editing": false,
          "filterArray": Immutable.List [],
          "includeDetailsColumn": false,
          "includeUpdateColumn": false,
          "isError": false,
          "isLoaded": false,
          "isLoading": true,
          "isPaged": false,
          "keyValue": undefined,
          "loader": GridLoader {},
          "maxRows": 20,
          "message": undefined,
          "messages": undefined,
          "offset": 0,
          "omittedColumns": Immutable.List [],
          "pageNumber": 1,
          "queryInfo": undefined,
          "requiredColumns": Immutable.List [],
          "selectedIds": Immutable.List [],
          "selectedLoaded": false,
          "selectedState": 2,
          "selectedQuantity": 0,
          "showSearchBox": true,
          "showViewSelector": true,
          "hideEmptyViewSelector": undefined,
          "showChartSelector": true,
          "showExport": true,
          "hideEmptyChartSelector": undefined,
          "sortable": true,
          "sorts": undefined,
          "title": undefined,
          "totalRows": 0,
          "urlParams": Immutable.List [
            "p",
            "reportId",
          ],
          "urlParamValues": Immutable.Map {},
          "urlPrefix": undefined,
          "view": undefined,
        }
      }
      showGridBar={false}
      showSampleComparisonReports={false}
    >
      <div
        className=""
      >
        <div
          className=""
        >
          <div
            className="row"
          >
            <div
              className="col-md-12"
            >
              <QueryGrid
                model={
                  Immutable.Record {
                    "id": "parent-data-second source|exp$pdata/second source",
                    "schema": "exp.data",
                    "query": "Second Source",
                    "queryParameters": undefined,
                    "allowSelection": false,
                    "baseFilters": Immutable.List [
                      Filter {
                        "columnName": "LSID",
                        "filterType": Object {
                          "getDisplaySymbol": [Function],
                          "getDisplayText": [Function],
                          "getLongDisplayText": [Function],
                          "getMultiValueFilter": [Function],
                          "getMultiValueMaxOccurs": [Function],
                          "getMultiValueMinOccurs": [Function],
                          "getMultiValueSeparator": [Function],
                          "getOpposite": [Function],
                          "getSingleValueFilter": [Function],
                          "getURLParameterValue": [Function],
                          "getURLSuffix": [Function],
                          "isDataValueRequired": [Function],
                          "isMultiValued": [Function],
                          "isTableWise": [Function],
                          "splitValue": [Function],
                          "validate": [Function],
                        },
                        "value": Array [
                          "url:lsid:blah",
                        ],
                      },
                    ],
                    "bindURL": false,
                    "containerPath": undefined,
                    "containerFilter": undefined,
                    "data": Immutable.Map {},
                    "dataIds": Immutable.List [],
                    "displayColumns": undefined,
                    "editable": false,
                    "editing": false,
                    "filterArray": Immutable.List [],
                    "includeDetailsColumn": false,
                    "includeUpdateColumn": false,
                    "isError": false,
                    "isLoaded": false,
                    "isLoading": true,
                    "isPaged": false,
                    "keyValue": undefined,
                    "loader": GridLoader {},
                    "maxRows": 20,
                    "message": undefined,
                    "messages": undefined,
                    "offset": 0,
                    "omittedColumns": Immutable.List [],
                    "pageNumber": 1,
                    "queryInfo": undefined,
                    "requiredColumns": Immutable.List [],
                    "selectedIds": Immutable.List [],
                    "selectedLoaded": false,
                    "selectedState": 2,
                    "selectedQuantity": 0,
                    "showSearchBox": true,
                    "showViewSelector": true,
                    "hideEmptyViewSelector": undefined,
                    "showChartSelector": true,
                    "showExport": true,
                    "hideEmptyChartSelector": undefined,
                    "sortable": true,
                    "sorts": undefined,
                    "title": undefined,
                    "totalRows": 0,
                    "urlParams": Immutable.List [
                      "p",
                      "reportId",
                    ],
                    "urlParamValues": Immutable.Map {},
                    "urlPrefix": undefined,
                    "view": undefined,
                  }
                }
              >
                <Grid
                  bordered={true}
                  calcWidths={true}
                  cellular={false}
                  columns={Immutable.List []}
                  condensed={true}
                  data={Immutable.List []}
                  emptyText="No data available."
                  gridId="parent-data-second source|exp$pdata/second source"
                  headerCell={[Function]}
                  isLoading={true}
                  loadingText={
                    <LoadingSpinner
                      msg="Loading..."
                      wrapperClassName=""
                    />
                  }
                  messages={Immutable.List []}
                  responsive={true}
                  showHeader={true}
                  striped={true}
                  transpose={false}
                >
                  <div
                    className="table-responsive"
                    data-gridid="parent-data-second source|exp$pdata/second source"
                  >
                    <GridMessages
                      messages={Immutable.List []}
                    >
                      <div
                        className="grid-messages"
                      >
                        <Component />
                      </div>
                    </GridMessages>
                    <table
                      className="table table-striped table-bordered table-condensed"
                    >
                      <GridHeader
                        calcWidths={true}
                        columns={Immutable.List []}
                        headerCell={[Function]}
                        showHeader={true}
                        transpose={false}
                      >
                        <thead>
                          <tr>
                            <Component />
                          </tr>
                        </thead>
                      </GridHeader>
                      <GridBody
                        columns={Immutable.List []}
                        data={Immutable.List []}
                        emptyText="No data available."
                        isLoading={true}
                        loadingText={
                          <LoadingSpinner
                            msg="Loading..."
                            wrapperClassName=""
                          />
                        }
                        transpose={false}
                      >
                        <tbody>
                          <tr
                            className="grid-loading"
                            key="grid-default-row"
                          >
                            <td
                              colSpan={0}
                            >
                              <LoadingSpinner
                                msg="Loading..."
                                wrapperClassName=""
                              >
                                <span
                                  className=""
                                >
                                  <i
                                    aria-hidden="true"
                                    className="fa fa-spinner fa-pulse"
                                  />
                                   
                                  Loading...
                                </span>
                              </LoadingSpinner>
                            </td>
                          </tr>
                        </tbody>
                      </GridBody>
                    </table>
                  </div>
                </Grid>
              </QueryGrid>
            </div>
          </div>
        </div>
      </div>
    </QueryGridPanel>
  </div>
</SingleParentEntityPanel>
`;
