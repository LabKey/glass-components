// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConditionalFormattingAndValidation Multiple validators or formats 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "disableMvEnabled": false,
      "hideAddFieldsButton": false,
      "hideConditionalFormatting": false,
      "hideFilePropertyType": false,
      "hideImportData": false,
      "hideImportExport": false,
      "hideRequired": false,
      "hideStudyPropertyTypes": false,
      "hideTextOptions": false,
      "hideValidators": false,
      "isDragDisabled": false,
      "phiLevelDisabled": false,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [
        Immutable.Record {
          "formatFilter": "format.column~startswith=0&format.column~doesnotstartwith=1",
          "bold": true,
          "italic": false,
          "strikethrough": false,
          "textColor": "FF6347",
          "backgroundColor": "000080",
        },
        Immutable.Record {
          "formatFilter": "format.column~isnonblank=&format.column~gt=5",
          "bold": false,
          "italic": true,
          "strikethrough": true,
          "textColor": "9f0500",
          "backgroundColor": "fda1ff",
        },
      ],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <SectionHeading
              cls="domain-field-section-hdr"
              title="Conditional Formatting and Validation Options"
            >
              <div
                className="domain-field-section-heading domain-field-section-hdr"
              >
                Conditional Formatting and Validation Options
              </div>
            </SectionHeading>
          </div>
        </Col>
      </div>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <div
              className="domain-validation-group"
            >
              <div
                className="domain-field-label domain-no-wrap"
              >
                <DomainFieldLabel
                  helpTipBody={<ConditionalFormatHelpText />}
                  label="Create Conditional Format Criteria"
                >
                  Create Conditional Format 
                  <span
                    className="domain-no-wrap"
                  >
                    Criteria
                    <Component
                      id="tooltip"
                      title="Create Conditional Format Criteria"
                    >
                      <span
                        className="label-help-target"
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                        <Overlay
                          animation={[Function]}
                          placement="right"
                          rootClose={false}
                          show={false}
                          target={
                            <span
                              class="label-help-target"
                            >
                              <span
                                class="label-help-icon fa fa-question-circle"
                              />
                            </span>
                          }
                        >
                          <Overlay
                            placement="right"
                            rootClose={false}
                            show={false}
                            target={
                              <span
                                class="label-help-target"
                              >
                                <span
                                  class="label-help-icon fa fa-question-circle"
                                />
                              </span>
                            }
                            transition={[Function]}
                          />
                        </Overlay>
                      </span>
                    </Component>
                  </span>
                </DomainFieldLabel>
              </div>
              <div>
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="domain-validation-button"
                  disabled={false}
                  id="domainpropertiesrow-conditionalFormat-1-1"
                  name="domainpropertiesrow-conditionalFormat"
                  onClick={[Function]}
                >
                  <button
                    className="domain-validation-button btn btn-default"
                    disabled={false}
                    id="domainpropertiesrow-conditionalFormat-1-1"
                    name="domainpropertiesrow-conditionalFormat"
                    onClick={[Function]}
                    type="button"
                  >
                    Edit Formats
                  </button>
                </Button>
                <a
                  className="domain-validator-link"
                  onClick={[Function]}
                >
                  2 Active formats
                </a>
              </div>
            </div>
            <div
              className="domain-validation-group"
            >
              <div
                className="domain-field-label domain-no-wrap"
              >
                <DomainFieldLabel
                  helpTipBody={<RegexValidatorHelpText />}
                  label="Create Regular Expression Validator"
                >
                  Create Regular Expression 
                  <span
                    className="domain-no-wrap"
                  >
                    Validator
                    <Component
                      id="tooltip"
                      title="Create Regular Expression Validator"
                    >
                      <span
                        className="label-help-target"
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                        <Overlay
                          animation={[Function]}
                          placement="right"
                          rootClose={false}
                          show={false}
                        >
                          <Overlay
                            placement="right"
                            rootClose={false}
                            show={false}
                            transition={[Function]}
                          />
                        </Overlay>
                      </span>
                    </Component>
                  </span>
                </DomainFieldLabel>
              </div>
              <div>
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="domain-validation-button"
                  disabled={false}
                  id="domainpropertiesrow-regexValidator-1-1"
                  name="domainpropertiesrow-regexValidator"
                  onClick={[Function]}
                >
                  <button
                    className="domain-validation-button btn btn-default"
                    disabled={false}
                    id="domainpropertiesrow-regexValidator-1-1"
                    name="domainpropertiesrow-regexValidator"
                    onClick={[Function]}
                    type="button"
                  >
                    Add Regex
                  </button>
                </Button>
                <span
                  className="domain-text-label"
                >
                  None Set
                </span>
              </div>
            </div>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ConditionalFormattingAndValidation>
`;

exports[`ConditionalFormattingAndValidation No validators 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "hideValidators": true,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <SectionHeading
              cls="domain-field-section-hdr"
              title="Conditional Formatting Options"
            >
              <div
                className="domain-field-section-heading domain-field-section-hdr"
              >
                Conditional Formatting Options
              </div>
            </SectionHeading>
          </div>
        </Col>
      </div>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <div
              className="domain-validation-group"
            >
              <div
                className="domain-field-label domain-no-wrap"
              >
                <DomainFieldLabel
                  helpTipBody={<ConditionalFormatHelpText />}
                  label="Create Conditional Format Criteria"
                >
                  Create Conditional Format 
                  <span
                    className="domain-no-wrap"
                  >
                    Criteria
                    <Component
                      id="tooltip"
                      title="Create Conditional Format Criteria"
                    >
                      <span
                        className="label-help-target"
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                        <Overlay
                          animation={[Function]}
                          placement="right"
                          rootClose={false}
                          show={false}
                        >
                          <Overlay
                            placement="right"
                            rootClose={false}
                            show={false}
                            transition={[Function]}
                          />
                        </Overlay>
                      </span>
                    </Component>
                  </span>
                </DomainFieldLabel>
              </div>
              <div>
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="domain-validation-button"
                  disabled={false}
                  id="domainpropertiesrow-conditionalFormat-1-1"
                  name="domainpropertiesrow-conditionalFormat"
                  onClick={[Function]}
                >
                  <button
                    className="domain-validation-button btn btn-default"
                    disabled={false}
                    id="domainpropertiesrow-conditionalFormat-1-1"
                    name="domainpropertiesrow-conditionalFormat"
                    onClick={[Function]}
                    type="button"
                  >
                    Add Format
                  </button>
                </Button>
                <span
                  className="domain-text-label"
                >
                  None Set
                </span>
              </div>
            </div>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ConditionalFormattingAndValidation>
`;

exports[`ConditionalFormattingAndValidation No validators or formats 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "disableMvEnabled": false,
      "hideAddFieldsButton": false,
      "hideConditionalFormatting": false,
      "hideFilePropertyType": false,
      "hideImportData": false,
      "hideImportExport": false,
      "hideRequired": false,
      "hideStudyPropertyTypes": false,
      "hideTextOptions": false,
      "hideValidators": false,
      "isDragDisabled": false,
      "phiLevelDisabled": false,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <SectionHeading
              cls="domain-field-section-hdr"
              title="Conditional Formatting and Validation Options"
            >
              <div
                className="domain-field-section-heading domain-field-section-hdr"
              >
                Conditional Formatting and Validation Options
              </div>
            </SectionHeading>
          </div>
        </Col>
      </div>
    </Row>
    <Row
      bsClass="row"
      componentClass="div"
    >
      <div
        className="row"
      >
        <Col
          bsClass="col"
          componentClass="div"
          xs={12}
        >
          <div
            className="col-xs-12"
          >
            <div
              className="domain-validation-group"
            >
              <div
                className="domain-field-label domain-no-wrap"
              >
                <DomainFieldLabel
                  helpTipBody={<ConditionalFormatHelpText />}
                  label="Create Conditional Format Criteria"
                >
                  Create Conditional Format 
                  <span
                    className="domain-no-wrap"
                  >
                    Criteria
                    <Component
                      id="tooltip"
                      title="Create Conditional Format Criteria"
                    >
                      <span
                        className="label-help-target"
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                        <Overlay
                          animation={[Function]}
                          placement="right"
                          rootClose={false}
                          show={false}
                          target={
                            <span
                              class="label-help-target"
                            >
                              <span
                                class="label-help-icon fa fa-question-circle"
                              />
                            </span>
                          }
                        >
                          <Overlay
                            placement="right"
                            rootClose={false}
                            show={false}
                            target={
                              <span
                                class="label-help-target"
                              >
                                <span
                                  class="label-help-icon fa fa-question-circle"
                                />
                              </span>
                            }
                            transition={[Function]}
                          />
                        </Overlay>
                      </span>
                    </Component>
                  </span>
                </DomainFieldLabel>
              </div>
              <div>
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="domain-validation-button"
                  disabled={false}
                  id="domainpropertiesrow-conditionalFormat-1-1"
                  name="domainpropertiesrow-conditionalFormat"
                  onClick={[Function]}
                >
                  <button
                    className="domain-validation-button btn btn-default"
                    disabled={false}
                    id="domainpropertiesrow-conditionalFormat-1-1"
                    name="domainpropertiesrow-conditionalFormat"
                    onClick={[Function]}
                    type="button"
                  >
                    Add Format
                  </button>
                </Button>
                <span
                  className="domain-text-label"
                >
                  None Set
                </span>
              </div>
            </div>
            <div
              className="domain-validation-group"
            >
              <div
                className="domain-field-label domain-no-wrap"
              >
                <DomainFieldLabel
                  helpTipBody={<RegexValidatorHelpText />}
                  label="Create Regular Expression Validator"
                >
                  Create Regular Expression 
                  <span
                    className="domain-no-wrap"
                  >
                    Validator
                    <Component
                      id="tooltip"
                      title="Create Regular Expression Validator"
                    >
                      <span
                        className="label-help-target"
                        onMouseOut={[Function]}
                        onMouseOver={[Function]}
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                        <Overlay
                          animation={[Function]}
                          placement="right"
                          rootClose={false}
                          show={false}
                        >
                          <Overlay
                            placement="right"
                            rootClose={false}
                            show={false}
                            transition={[Function]}
                          />
                        </Overlay>
                      </span>
                    </Component>
                  </span>
                </DomainFieldLabel>
              </div>
              <div>
                <Button
                  active={false}
                  block={false}
                  bsClass="btn"
                  bsStyle="default"
                  className="domain-validation-button"
                  disabled={false}
                  id="domainpropertiesrow-regexValidator-1-1"
                  name="domainpropertiesrow-regexValidator"
                  onClick={[Function]}
                >
                  <button
                    className="domain-validation-button btn btn-default"
                    disabled={false}
                    id="domainpropertiesrow-regexValidator-1-1"
                    name="domainpropertiesrow-regexValidator"
                    onClick={[Function]}
                    type="button"
                  >
                    Add Regex
                  </button>
                </Button>
                <span
                  className="domain-text-label"
                >
                  None Set
                </span>
              </div>
            </div>
          </div>
        </Col>
      </div>
    </Row>
  </div>
</ConditionalFormattingAndValidation>
`;
