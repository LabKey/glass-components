// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConditionalFormattingAndValidation Multiple validators or formats 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "disableMvEnabled": false,
      "hideAddFieldsButton": false,
      "hideConditionalFormatting": false,
      "hideFilePropertyType": false,
      "hideImportData": false,
      "hideImportExport": false,
      "hideRequired": false,
      "hideStudyPropertyTypes": false,
      "hideTextOptions": false,
      "hideValidators": false,
      "isDragDisabled": false,
      "phiLevelDisabled": false,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [
        Immutable.Record {
          "formatFilter": "format.column~startswith=0&format.column~doesnotstartwith=1",
          "bold": true,
          "italic": false,
          "strikethrough": false,
          "textColor": "FF6347",
          "backgroundColor": "000080",
        },
        Immutable.Record {
          "formatFilter": "format.column~isnonblank=&format.column~gt=5",
          "bold": false,
          "italic": true,
          "strikethrough": true,
          "textColor": "9f0500",
          "backgroundColor": "fda1ff",
        },
      ],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "uniqueConstraint": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "valueExpression": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <SectionHeading
          cls="domain-field-section-hdr"
          title="Conditional Formatting and Validation Options"
        >
          <div
            className="domain-field-section-heading domain-field-section-hdr"
          >
            Conditional Formatting and Validation Options
          </div>
        </SectionHeading>
      </div>
    </div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <div
          className="domain-validation-group"
        >
          <div
            className="domain-field-label domain-no-wrap"
          >
            <DomainFieldLabel
              helpTipBody={<ConditionalFormatHelpText />}
              label="Create Conditional Format Criteria"
            >
              Create Conditional Format 
              <span
                className="domain-no-wrap"
              >
                Criteria
                <LabelHelpTip
                  title="Create Conditional Format Criteria"
                >
                  <OverlayTrigger
                    id="label-help-tip5"
                    overlay={
                      <Popover
                        id="label-help-tip-popover"
                        title="Create Conditional Format Criteria"
                      >
                        <ConditionalFormatHelpText />
                      </Popover>
                    }
                  >
                    <div
                      className="overlay-trigger"
                      onClick={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="label-help-target"
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                      </span>
                    </div>
                  </OverlayTrigger>
                </LabelHelpTip>
              </span>
            </DomainFieldLabel>
          </div>
          <div>
            <button
              className="domain-validation-button btn btn-default"
              disabled={false}
              id="domainpropertiesrow-conditionalFormat-1-1"
              name="domainpropertiesrow-conditionalFormat"
              onClick={[Function]}
              type="button"
            >
              Edit Formats
            </button>
            <a
              className="domain-validator-link"
              onClick={[Function]}
            >
              2 Active formats
            </a>
          </div>
        </div>
        <div
          className="domain-validation-group"
        >
          <div
            className="domain-field-label domain-no-wrap"
          >
            <DomainFieldLabel
              helpTipBody={<RegexValidatorHelpText />}
              label="Create Regular Expression Validator"
            >
              Create Regular Expression 
              <span
                className="domain-no-wrap"
              >
                Validator
                <LabelHelpTip
                  title="Create Regular Expression Validator"
                >
                  <OverlayTrigger
                    id="label-help-tip7"
                    overlay={
                      <Popover
                        id="label-help-tip-popover"
                        title="Create Regular Expression Validator"
                      >
                        <RegexValidatorHelpText />
                      </Popover>
                    }
                  >
                    <div
                      className="overlay-trigger"
                      onClick={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="label-help-target"
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                      </span>
                    </div>
                  </OverlayTrigger>
                </LabelHelpTip>
              </span>
            </DomainFieldLabel>
          </div>
          <div>
            <button
              className="domain-validation-button btn btn-default"
              disabled={false}
              id="domainpropertiesrow-regexValidator-1-1"
              name="domainpropertiesrow-regexValidator"
              onClick={[Function]}
              type="button"
            >
              Add Regex
            </button>
            <span
              className="domain-text-label"
            >
              None Set
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</ConditionalFormattingAndValidation>
`;

exports[`ConditionalFormattingAndValidation No validators 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "hideValidators": true,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "uniqueConstraint": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "valueExpression": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <SectionHeading
          cls="domain-field-section-hdr"
          title="Conditional Formatting Options"
        >
          <div
            className="domain-field-section-heading domain-field-section-hdr"
          >
            Conditional Formatting Options
          </div>
        </SectionHeading>
      </div>
    </div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <div
          className="domain-validation-group"
        >
          <div
            className="domain-field-label domain-no-wrap"
          >
            <DomainFieldLabel
              helpTipBody={<ConditionalFormatHelpText />}
              label="Create Conditional Format Criteria"
            >
              Create Conditional Format 
              <span
                className="domain-no-wrap"
              >
                Criteria
                <LabelHelpTip
                  title="Create Conditional Format Criteria"
                >
                  <OverlayTrigger
                    id="label-help-tip8"
                    overlay={
                      <Popover
                        id="label-help-tip-popover"
                        title="Create Conditional Format Criteria"
                      >
                        <ConditionalFormatHelpText />
                      </Popover>
                    }
                  >
                    <div
                      className="overlay-trigger"
                      onClick={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="label-help-target"
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                      </span>
                    </div>
                  </OverlayTrigger>
                </LabelHelpTip>
              </span>
            </DomainFieldLabel>
          </div>
          <div>
            <button
              className="domain-validation-button btn btn-default"
              disabled={false}
              id="domainpropertiesrow-conditionalFormat-1-1"
              name="domainpropertiesrow-conditionalFormat"
              onClick={[Function]}
              type="button"
            >
              Add Format
            </button>
            <span
              className="domain-text-label"
            >
              None Set
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</ConditionalFormattingAndValidation>
`;

exports[`ConditionalFormattingAndValidation No validators or formats 1`] = `
<ConditionalFormattingAndValidation
  domainFormDisplayOptions={
    {
      "disableMvEnabled": false,
      "hideAddFieldsButton": false,
      "hideConditionalFormatting": false,
      "hideFilePropertyType": false,
      "hideImportData": false,
      "hideImportExport": false,
      "hideRequired": false,
      "hideStudyPropertyTypes": false,
      "hideTextOptions": false,
      "hideValidators": false,
      "isDragDisabled": false,
      "phiLevelDisabled": false,
    }
  }
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": undefined,
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": undefined,
      "label": undefined,
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": undefined,
      "PHI": undefined,
      "propertyId": undefined,
      "propertyURI": undefined,
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "uniqueConstraint": false,
      "required": false,
      "scale": 4000,
      "URL": undefined,
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": undefined,
        "rangeURI": undefined,
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "valueExpression": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[MockFunction]}
  setDragDisabled={[MockFunction]}
  showingModal={[MockFunction]}
>
  <div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <SectionHeading
          cls="domain-field-section-hdr"
          title="Conditional Formatting and Validation Options"
        >
          <div
            className="domain-field-section-heading domain-field-section-hdr"
          >
            Conditional Formatting and Validation Options
          </div>
        </SectionHeading>
      </div>
    </div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <div
          className="domain-validation-group"
        >
          <div
            className="domain-field-label domain-no-wrap"
          >
            <DomainFieldLabel
              helpTipBody={<ConditionalFormatHelpText />}
              label="Create Conditional Format Criteria"
            >
              Create Conditional Format 
              <span
                className="domain-no-wrap"
              >
                Criteria
                <LabelHelpTip
                  title="Create Conditional Format Criteria"
                >
                  <OverlayTrigger
                    id="label-help-tip0"
                    overlay={
                      <Popover
                        id="label-help-tip-popover"
                        title="Create Conditional Format Criteria"
                      >
                        <ConditionalFormatHelpText />
                      </Popover>
                    }
                  >
                    <div
                      className="overlay-trigger"
                      onClick={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="label-help-target"
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                      </span>
                    </div>
                  </OverlayTrigger>
                </LabelHelpTip>
              </span>
            </DomainFieldLabel>
          </div>
          <div>
            <button
              className="domain-validation-button btn btn-default"
              disabled={false}
              id="domainpropertiesrow-conditionalFormat-1-1"
              name="domainpropertiesrow-conditionalFormat"
              onClick={[Function]}
              type="button"
            >
              Add Format
            </button>
            <span
              className="domain-text-label"
            >
              None Set
            </span>
          </div>
        </div>
        <div
          className="domain-validation-group"
        >
          <div
            className="domain-field-label domain-no-wrap"
          >
            <DomainFieldLabel
              helpTipBody={<RegexValidatorHelpText />}
              label="Create Regular Expression Validator"
            >
              Create Regular Expression 
              <span
                className="domain-no-wrap"
              >
                Validator
                <LabelHelpTip
                  title="Create Regular Expression Validator"
                >
                  <OverlayTrigger
                    id="label-help-tip4"
                    overlay={
                      <Popover
                        id="label-help-tip-popover"
                        title="Create Regular Expression Validator"
                      >
                        <RegexValidatorHelpText />
                      </Popover>
                    }
                  >
                    <div
                      className="overlay-trigger"
                      onClick={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                    >
                      <span
                        className="label-help-target"
                      >
                        <span
                          className="label-help-icon fa fa-question-circle"
                        />
                      </span>
                    </div>
                  </OverlayTrigger>
                </LabelHelpTip>
              </span>
            </DomainFieldLabel>
          </div>
          <div>
            <button
              className="domain-validation-button btn btn-default"
              disabled={false}
              id="domainpropertiesrow-regexValidator-1-1"
              name="domainpropertiesrow-regexValidator"
              onClick={[Function]}
              type="button"
            >
              Add Regex
            </button>
            <span
              className="domain-text-label"
            >
              None Set
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</ConditionalFormattingAndValidation>
`;
