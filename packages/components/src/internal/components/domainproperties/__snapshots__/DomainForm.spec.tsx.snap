// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DomainForm domain form add, expand, and delete field 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "updated",
      "container": undefined,
      "description": "Add field description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": false,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": false,
          "mvEnabled": false,
          "name": undefined,
          "PHI": undefined,
          "propertyId": undefined,
          "propertyURI": undefined,
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": undefined,
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": undefined,
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": undefined,
            "rangeURI": undefined,
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  onChange={[Function]}
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "updated",
          "container": undefined,
          "description": "Add field description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": false,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": false,
              "mvEnabled": false,
              "name": undefined,
              "PHI": undefined,
              "propertyId": undefined,
              "propertyURI": undefined,
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": undefined,
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": undefined,
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": undefined,
                "rangeURI": undefined,
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={[Function]}
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="1 Field Defined"
                id="domainpropertiesrow-updated-hdr"
                isValid={true}
                title="updated"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-updated-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    updated
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="9"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="9"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={true}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": false,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": false,
                                        "mvEnabled": false,
                                        "name": undefined,
                                        "PHI": undefined,
                                        "propertyId": undefined,
                                        "propertyURI": undefined,
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": undefined,
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": undefined,
                                          "rangeURI": undefined,
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default domain-row-expanded"
                                              data-rbd-draggable-context-id="9"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-9-hidden-text-55"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="9"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={true}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Hide additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-down"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="boolean"
                                                              value="boolean"
                                                            >
                                                              Boolean
                                                            </option>
                                                            <option
                                                              key="date"
                                                              value="date"
                                                            >
                                                              Date
                                                            </option>
                                                            <option
                                                              key="dateTime"
                                                              value="dateTime"
                                                            >
                                                              Date Time
                                                            </option>
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                            <option
                                                              key="time"
                                                              value="time"
                                                            >
                                                              Time
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details-expanded"
                                                      id="domainpropertiesrow-details-0-0"
                                                    >
                                                      New Field
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons-expanded"
                                                    >
                                                      <button
                                                        className="domain-row-button btn btn-default"
                                                        disabled={false}
                                                        id="domainpropertiesrow-adv-0-0"
                                                        name="domainpropertiesrow-adv"
                                                        onClick={[Function]}
                                                        type="button"
                                                      >
                                                        Advanced Settings
                                                      </button>
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={true}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={true}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapsing"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": false,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": false,
                                                          "mvEnabled": false,
                                                          "name": undefined,
                                                          "PHI": undefined,
                                                          "propertyId": undefined,
                                                          "propertyURI": undefined,
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": undefined,
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": undefined,
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": undefined,
                                                            "rangeURI": undefined,
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip179"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-0"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-0"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-0"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-0"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-0"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-0"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": false,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": false,
                                                                  "mvEnabled": false,
                                                                  "name": undefined,
                                                                  "PHI": undefined,
                                                                  "propertyId": undefined,
                                                                  "propertyURI": undefined,
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": undefined,
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": undefined,
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": undefined,
                                                                    "rangeURI": undefined,
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip170"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip171"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": false,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": false,
                                                                  "mvEnabled": false,
                                                                  "name": undefined,
                                                                  "PHI": undefined,
                                                                  "propertyId": undefined,
                                                                  "propertyURI": undefined,
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": undefined,
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": undefined,
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": undefined,
                                                                    "rangeURI": undefined,
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip172"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip180"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-0"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form header and search 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "updated",
      "container": undefined,
      "description": "description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "abc_fieldname",
          "PHI": undefined,
          "propertyId": 0,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "abc_fieldname",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "ab_fieldname",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "ab_fieldname",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "abcd_fieldname",
          "PHI": undefined,
          "propertyId": 2,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "abcd_fieldname",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": "http://www.labkey.org/exp/xml#flag",
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "fieldname_abcd",
          "PHI": undefined,
          "propertyId": 3,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": "http://www.labkey.org/exp/xml#flag",
            "display": "Flag",
            "name": "flag",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": "http://www.labkey.org/exp/xml#flag",
            "dataType": Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#flag",
              "display": "Flag",
              "name": "flag",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "fieldname_abcd",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  helpTopic="Your topic"
  onChange={[Function]}
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "updated",
          "container": undefined,
          "description": "description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "abc_fieldname",
              "PHI": undefined,
              "propertyId": 0,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "abc_fieldname",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "ab_fieldname",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "ab_fieldname",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "abcd_fieldname",
              "PHI": undefined,
              "propertyId": 2,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "abcd_fieldname",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#flag",
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "fieldname_abcd",
              "PHI": undefined,
              "propertyId": 3,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "display": "Flag",
                "name": "flag",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "display": "Flag",
                  "name": "flag",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "fieldname_abcd",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="Your topic"
      initCollapsed={false}
      isNew={false}
      onChange={[Function]}
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="4 Fields Defined"
                id="domainpropertiesrow-updated-hdr"
                isValid={true}
                title="updated"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-updated-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    updated
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="Your topic"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=Your topic"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="16"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="16"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "abc_fieldname",
                                        "PHI": undefined,
                                        "propertyId": 0,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "abc_fieldname",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="16"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-16-hidden-text-84"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="16"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="abc_fieldname"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="abc_fieldname"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "abc_fieldname",
                                                          "PHI": undefined,
                                                          "propertyId": 0,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "abc_fieldname",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip266"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "abc_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "abc_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip267"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip268"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "abc_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "abc_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip269"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip270"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "ab_fieldname",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "ab_fieldname",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={1}
                                    isDragDisabled={false}
                                    key="domain-row-key-1"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-1"
                                      index={1}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-1"
                                        index={1}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-1"
                                          index={1}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-1"
                                            dropAnimationFinished={[Function]}
                                            index={1}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="16"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={1}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-1"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-16-hidden-text-84"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="16"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-1"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-1"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-1"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-1"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-1"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-1"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="ab_fieldname"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-1"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="ab_fieldname"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-1"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-1"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-1"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-1"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-1"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-1"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-1"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "ab_fieldname",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "ab_fieldname",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={1}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={1}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip271"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={true}
                                                                        id="domainpropertiesrow-scale-0-1"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={true}
                                                                          id="domainpropertiesrow-scale-0-1"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={1}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "ab_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "ab_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-1"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-1"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-1"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-1"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip272"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-1"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-1"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip273"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-1"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-1"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "ab_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "ab_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip274"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-1"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip275"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-1"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "abcd_fieldname",
                                        "PHI": undefined,
                                        "propertyId": 2,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "abcd_fieldname",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={2}
                                    isDragDisabled={false}
                                    key="domain-row-key-2"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-2"
                                      index={2}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-2"
                                        index={2}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-2"
                                          index={2}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-2"
                                            dropAnimationFinished={[Function]}
                                            index={2}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="16"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={2}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-2"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-16-hidden-text-84"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="16"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-2"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-2"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-2"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-2"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-2"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-2"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="abcd_fieldname"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-2"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="abcd_fieldname"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-2"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-2"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-2"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-2"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-2"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-2"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-2"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "abcd_fieldname",
                                                          "PHI": undefined,
                                                          "propertyId": 2,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "abcd_fieldname",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={2}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={2}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip256"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-2"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-2"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-2"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-2"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-2"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-2"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={2}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "abcd_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "abcd_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-2"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-2"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-2"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-2"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip257"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-2"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-2"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip258"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-2"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-2"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "abcd_fieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "abcd_fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip259"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-2"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip260"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-2"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "fieldname_abcd",
                                        "PHI": undefined,
                                        "propertyId": 3,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "dataType": Immutable.Record {
                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                            "display": "Flag",
                                            "name": "flag",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "fieldname_abcd",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={3}
                                    isDragDisabled={false}
                                    key="domain-row-key-3"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-3"
                                      index={3}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-3"
                                        index={3}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-3"
                                          index={3}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-3"
                                            dropAnimationFinished={[Function]}
                                            index={3}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="16"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={3}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-3"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-16-hidden-text-84"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="16"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-3"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-3"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-3"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-3"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-3"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-3"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="fieldname_abcd"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-3"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="fieldname_abcd"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-3"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="flag"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-3"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="flag"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-3"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-3"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-3"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-3"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-3"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "fieldname_abcd",
                                                          "PHI": undefined,
                                                          "propertyId": 3,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                            "display": "Flag",
                                                            "name": "flag",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                              "display": "Flag",
                                                              "name": "flag",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "fieldname_abcd",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={3}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              domainIndex={0}
                                                              index={3}
                                                              label="Flag Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Flag Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Flag Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip261"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-3"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-3"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-3"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-3"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-3"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-3"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  domainIndex={0}
                                                                  index={3}
                                                                  label="Flag Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "fieldname_abcd",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "display": "Flag",
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname_abcd",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-3"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-3"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-3"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-3"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip262"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-3"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-3"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip263"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-3"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-3"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "fieldname_abcd",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "display": "Flag",
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname_abcd",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip264"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-3"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip265"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-3"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form headerPrefix and panelCls 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  collapsible={false}
  domain={
    Immutable.Record {
      "name": "Foo headerPrefix and panelCls",
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideInferFromFile": true,
    }
  }
  headerPrefix="Foo"
  initCollapsed={true}
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "Foo headerPrefix and panelCls",
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      collapsible={false}
      domain={
        Immutable.Record {
          "name": "Foo headerPrefix and panelCls",
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      headerPrefix="Foo"
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={true}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "Foo headerPrefix and panelCls",
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                collapsible={false}
                id="domainpropertiesrow-Foo-headerPrefix-and-panelCls-hdr"
                isValid={true}
                title="headerPrefix and panelCls"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-Foo-headerPrefix-and-panelCls-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    headerPrefix and panelCls
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className=""
                collapsible={false}
              >
                <div
                  className="panel-body"
                >
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <FileAttachmentForm
                    acceptedFormats=".json"
                    allowDirectories={false}
                    allowMultiple={false}
                    cancelText="Cancel"
                    compact={false}
                    fileSpecificCallback={
                      Immutable.Map {
                        ".json": [Function],
                      }
                    }
                    label="Import fields from file"
                    labelLong="Select file or drag and drop here."
                    onFileRemoval={[Function]}
                    previewGridProps={false}
                    showAcceptedFormats={true}
                    showButtons={false}
                    showLabel={true}
                    showProgressBar={false}
                    submitText="Upload"
                  >
                    <span
                      className="translator--toggle__wizard"
                    >
                      <FormSection
                        iconSpacer={false}
                        label="Import fields from file"
                        showLabel={true}
                      >
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <label
                              className="control-label text-left"
                            >
                              <strong>
                                Import fields from file
                              </strong>
                            </label>
                          </div>
                        </div>
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <div
                              className="wizard-row--container"
                            >
                              <div
                                className=""
                              >
                                <FileAttachmentContainer
                                  acceptedFormats=".json"
                                  allowDirectories={false}
                                  allowMultiple={false}
                                  compact={false}
                                  handleChange={[Function]}
                                  handleRemoval={[Function]}
                                  labelLong="Select file or drag and drop here."
                                >
                                  <div
                                    className="file-upload--container block"
                                  >
                                    <label
                                      className="file-upload--label"
                                      htmlFor="fileUpload"
                                      onDragEnter={[Function]}
                                      onDragLeave={[Function]}
                                      onDragOver={[Function]}
                                      onDrop={[Function]}
                                    >
                                      <i
                                        aria-hidden="true"
                                        className="fa fa-cloud-upload fa-2x cloud-logo"
                                      />
                                      Select file or drag and drop here.
                                    </label>
                                    <input
                                      accept=".json"
                                      className="file-upload--input"
                                      id="fileUpload"
                                      multiple={false}
                                      name="fileUpload"
                                      onChange={[Function]}
                                      type="file"
                                    />
                                  </div>
                                </FileAttachmentContainer>
                              </div>
                            </div>
                          </div>
                        </div>
                      </FormSection>
                    </span>
                    <div
                      className="row"
                    >
                      <div
                        className="col-md-9"
                      >
                        <div
                          className="file-form-formats"
                        >
                          <strong>
                            Supported formats include: 
                          </strong>
                          .json
                        </div>
                      </div>
                      <div
                        className="col-md-3"
                      >
                        <div
                          className="pull-right"
                        />
                      </div>
                    </div>
                  </FileAttachmentForm>
                  <div
                    className="margin-top domain-form-manual-section"
                  >
                    <p>
                      Or
                    </p>
                    <ActionButton
                      buttonClass="domain-form-manual-btn"
                      containerClass="form-group"
                      helperTitle="More Info"
                      onClick={[Function]}
                    >
                      <div
                        className="form-group"
                      >
                        <div
                          className="domain-form-manual-btn"
                        >
                          <span
                            className="container--action-button btn btn-default"
                            onClick={[Function]}
                          >
                            Manually Define Fields
                          </span>
                        </div>
                      </div>
                    </ActionButton>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form initCollapsed 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  collapsible={false}
  domain={
    Immutable.Record {
      "name": "collapsed with two fields",
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "key",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "key",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "string",
          "PHI": undefined,
          "propertyId": 2,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  initCollapsed={true}
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "collapsed with two fields",
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "key",
                "PHI": undefined,
                "propertyId": 1,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "key",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "string",
                "PHI": undefined,
                "propertyId": 2,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      collapsible={false}
      domain={
        Immutable.Record {
          "name": "collapsed with two fields",
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "key",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "key",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "string",
              "PHI": undefined,
              "propertyId": 2,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={true}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "collapsed with two fields",
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "key",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "key",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "string",
                    "PHI": undefined,
                    "propertyId": 2,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                collapsible={false}
                headerDetails="2 Fields Defined"
                id="domainpropertiesrow-collapsed-with-two-fields-hdr"
                isValid={true}
                title="collapsed with two fields"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-collapsed-with-two-fields-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    collapsed with two fields
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="11"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="11"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={null}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "key",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "key",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="11"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-11-hidden-text-63"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="11"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="key"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="key"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "key",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "key",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip191"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip192"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip193"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip194"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip195"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={null}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "string",
                                        "PHI": undefined,
                                        "propertyId": 2,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={1}
                                    isDragDisabled={false}
                                    key="domain-row-key-1"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-1"
                                      index={1}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-1"
                                        index={1}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-1"
                                          index={1}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-1"
                                            dropAnimationFinished={[Function]}
                                            index={1}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="11"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={1}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-1"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-11-hidden-text-63"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="11"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-1"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-1"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-1"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-1"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-1"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-1"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="string"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-1"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="string"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-1"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-1"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-1"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-1"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-1"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-1"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-1"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "string",
                                                          "PHI": undefined,
                                                          "propertyId": 2,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={1}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={1}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip196"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-1"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-1"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={1}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-1"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-1"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-1"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-1"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip197"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-1"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-1"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip198"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-1"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-1"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip199"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-1"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip200"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-1"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form initCollapsed and markComplete 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  collapsible={false}
  domain={
    Immutable.Record {
      "name": "collapsed and markComplete",
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "key",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "key",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "string",
          "PHI": undefined,
          "propertyId": 2,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  initCollapsed={true}
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "collapsed and markComplete",
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "key",
                "PHI": undefined,
                "propertyId": 1,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "key",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "string",
                "PHI": undefined,
                "propertyId": 2,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      collapsible={false}
      domain={
        Immutable.Record {
          "name": "collapsed and markComplete",
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "key",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "key",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "string",
              "PHI": undefined,
              "propertyId": 2,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={true}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "collapsed and markComplete",
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "key",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "key",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "string",
                    "PHI": undefined,
                    "propertyId": 2,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                collapsible={false}
                headerDetails="2 Fields Defined"
                id="domainpropertiesrow-collapsed-and-markComplete-hdr"
                isValid={true}
                title="collapsed and markComplete"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-collapsed-and-markComplete-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    collapsed and markComplete
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="13"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="13"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={null}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "key",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "key",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="13"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-13-hidden-text-71"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="13"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="key"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="key"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "key",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "key",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip211"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip212"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip213"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip214"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip215"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={null}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "string",
                                        "PHI": undefined,
                                        "propertyId": 2,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={1}
                                    isDragDisabled={false}
                                    key="domain-row-key-1"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-1"
                                      index={1}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-1"
                                        index={1}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-1"
                                          index={1}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-1"
                                            dropAnimationFinished={[Function]}
                                            index={1}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="13"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={1}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-1"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-13-hidden-text-71"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="13"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-1"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-1"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-1"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-1"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-1"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-1"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="string"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-1"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="string"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-1"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-1"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-1"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-1"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-1"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-1"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-1"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "string",
                                                          "PHI": undefined,
                                                          "propertyId": 2,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={1}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={1}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip216"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-1"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-1"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={1}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-1"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-1"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-1"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-1"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip217"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-1"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-1"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip218"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-1"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-1"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip219"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-1"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip220"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-1"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form no file or attachment type 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "updated",
      "container": undefined,
      "description": "description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": false,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": true,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": false,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": false,
          "mvEnabled": false,
          "name": undefined,
          "PHI": undefined,
          "propertyId": undefined,
          "propertyURI": undefined,
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": undefined,
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": undefined,
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": undefined,
            "rangeURI": undefined,
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideImportExport": true,
      "hideInferFromFile": true,
    }
  }
  onChange={[Function]}
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "updated",
          "container": undefined,
          "description": "description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": false,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": true,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": false,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": false,
              "mvEnabled": false,
              "name": undefined,
              "PHI": undefined,
              "propertyId": undefined,
              "propertyURI": undefined,
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": undefined,
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": undefined,
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": undefined,
                "rangeURI": undefined,
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideImportExport": true,
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={[Function]}
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="1 Field Defined"
                id="domainpropertiesrow-updated-hdr"
                isValid={true}
                title="updated"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-updated-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    updated
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="17"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="17"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "hideImportExport": true,
                                        "hideInferFromFile": true,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": false,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": false,
                                        "mvEnabled": false,
                                        "name": undefined,
                                        "PHI": undefined,
                                        "propertyId": undefined,
                                        "propertyURI": undefined,
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": undefined,
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": undefined,
                                          "rangeURI": undefined,
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={true}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="17"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-17-hidden-text-92"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="17"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value=""
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="boolean"
                                                              value="boolean"
                                                            >
                                                              Boolean
                                                            </option>
                                                            <option
                                                              key="date"
                                                              value="date"
                                                            >
                                                              Date
                                                            </option>
                                                            <option
                                                              key="dateTime"
                                                              value="dateTime"
                                                            >
                                                              Date Time
                                                            </option>
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                            <option
                                                              key="time"
                                                              value="time"
                                                            >
                                                              Time
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    >
                                                      New Field
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "hideImportExport": true,
                                                          "hideInferFromFile": true,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": false,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": false,
                                                          "mvEnabled": false,
                                                          "name": undefined,
                                                          "PHI": undefined,
                                                          "propertyId": undefined,
                                                          "propertyURI": undefined,
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": undefined,
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": undefined,
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": undefined,
                                                            "rangeURI": undefined,
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip276"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-0"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-0"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-0"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-0"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={true}
                                                                        id="domainpropertiesrow-scale-0-0"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={true}
                                                                          id="domainpropertiesrow-scale-0-0"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "hideImportExport": true,
                                                                  "hideInferFromFile": true,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": false,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": false,
                                                                  "mvEnabled": false,
                                                                  "name": undefined,
                                                                  "PHI": undefined,
                                                                  "propertyId": undefined,
                                                                  "propertyURI": undefined,
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": undefined,
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": undefined,
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": undefined,
                                                                    "rangeURI": undefined,
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip277"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip278"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "hideImportExport": true,
                                                                  "hideInferFromFile": true,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": false,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": false,
                                                                  "mvEnabled": false,
                                                                  "name": undefined,
                                                                  "PHI": undefined,
                                                                  "propertyId": undefined,
                                                                  "propertyURI": undefined,
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": undefined,
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": undefined,
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": undefined,
                                                                    "rangeURI": undefined,
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip279"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip280"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-0"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form updated field, cleared details 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "update field types",
      "container": undefined,
      "description": "description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "newfieldname",
          "PHI": undefined,
          "propertyId": 0,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "fieldname",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "update field types",
            "container": undefined,
            "description": "description",
            "domainURI": "test",
            "domainId": 1,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "newfieldname",
                "PHI": undefined,
                "propertyId": 0,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "fieldname",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "update field types",
          "container": undefined,
          "description": "description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "newfieldname",
              "PHI": undefined,
              "propertyId": 0,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "fieldname",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "update field types",
                "container": undefined,
                "description": "description",
                "domainURI": "test",
                "domainId": 1,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "newfieldname",
                    "PHI": undefined,
                    "propertyId": 0,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "fieldname",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="1 Field Defined"
                id="domainpropertiesrow-update-field-types-hdr"
                isValid={true}
                title="update field types"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-update-field-types-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    update field types
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="7"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="7"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "newfieldname",
                                        "PHI": undefined,
                                        "propertyId": 0,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "fieldname",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="7"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-7-hidden-text-49"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="7"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="newfieldname"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="newfieldname"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "newfieldname",
                                                          "PHI": undefined,
                                                          "propertyId": 0,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "fieldname",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip159"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "newfieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip160"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip161"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "newfieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip162"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip163"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form with all field types 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "all field types",
      "container": undefined,
      "description": "description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "key",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "key",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "string",
          "PHI": undefined,
          "propertyId": 2,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Text",
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": "xsd:string",
            "shortDisplay": "String",
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "string",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "multiline",
          "PHI": undefined,
          "propertyId": 3,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Multi-Line Text",
            "name": "multiLine",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Multi-Line Text",
              "name": "multiLine",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "multiline",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "boolean",
          "PHI": undefined,
          "propertyId": 4,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Boolean",
            "name": "boolean",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
            "alternateRangeURI": "xsd:boolean",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Boolean",
              "name": "boolean",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
              "alternateRangeURI": "xsd:boolean",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "boolean",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "double",
          "PHI": undefined,
          "propertyId": 5,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Decimal (floating point)",
            "name": "double",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
            "alternateRangeURI": "xsd:double",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Decimal (floating point)",
              "name": "double",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
              "alternateRangeURI": "xsd:double",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "double",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "datetime",
          "PHI": undefined,
          "propertyId": 6,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Date Time",
            "name": "dateTime",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
            "alternateRangeURI": "xsd:dateTime",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Date Time",
              "name": "dateTime",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
              "alternateRangeURI": "xsd:dateTime",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "datetime",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": "http://www.labkey.org/exp/xml#flag",
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "flag",
          "PHI": undefined,
          "propertyId": 7,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": "http://www.labkey.org/exp/xml#flag",
            "display": "Flag",
            "name": "flag",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": "http://www.labkey.org/exp/xml#flag",
            "dataType": Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#flag",
              "display": "Flag",
              "name": "flag",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "flag",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "file link",
          "PHI": undefined,
          "propertyId": 8,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "File",
            "name": "fileLink",
            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "File",
              "name": "fileLink",
              "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "file link",
            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "participant id",
          "PHI": undefined,
          "propertyId": 9,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
            "display": "Subject/Participant",
            "name": "ParticipantId",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
            "dataType": Immutable.Record {
              "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
              "display": "Subject/Participant",
              "name": "ParticipantId",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "participant id",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "attachment",
          "PHI": undefined,
          "propertyId": 10,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Attachment",
            "name": "attachment",
            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Attachment",
              "name": "attachment",
              "rangeURI": "http://www.labkey.org/exp/xml#attachment",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "attachment",
            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": "http://www.labkey.org/exp/xml#sample",
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": "Materials",
          "lookupSchema": "exp",
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "sample",
          "PHI": undefined,
          "propertyId": 11,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": "http://www.labkey.org/exp/xml#sample",
            "display": "Sample",
            "name": "sample",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": "http://www.labkey.org/exp/xml#sample",
            "dataType": Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#sample",
              "display": "Sample",
              "name": "sample",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "sample",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "all field types",
            "container": undefined,
            "description": "description",
            "domainURI": "test",
            "domainId": 1,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "key",
                "PHI": undefined,
                "propertyId": 1,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "key",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "string",
                "PHI": undefined,
                "propertyId": 2,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "multiline",
                "PHI": undefined,
                "propertyId": 3,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Multi-Line Text",
                  "name": "multiLine",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Multi-Line Text",
                    "name": "multiLine",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "multiline",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "boolean",
                "PHI": undefined,
                "propertyId": 4,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Boolean",
                  "name": "boolean",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                  "alternateRangeURI": "xsd:boolean",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Boolean",
                    "name": "boolean",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                    "alternateRangeURI": "xsd:boolean",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "boolean",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "double",
                "PHI": undefined,
                "propertyId": 5,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Decimal (floating point)",
                  "name": "double",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                  "alternateRangeURI": "xsd:double",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Decimal (floating point)",
                    "name": "double",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                    "alternateRangeURI": "xsd:double",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "double",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "datetime",
                "PHI": undefined,
                "propertyId": 6,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Date Time",
                  "name": "dateTime",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                  "alternateRangeURI": "xsd:dateTime",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Date Time",
                    "name": "dateTime",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                    "alternateRangeURI": "xsd:dateTime",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "datetime",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "flag",
                "PHI": undefined,
                "propertyId": 7,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "display": "Flag",
                  "name": "flag",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "dataType": Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                    "display": "Flag",
                    "name": "flag",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "flag",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "file link",
                "PHI": undefined,
                "propertyId": 8,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "File",
                  "name": "fileLink",
                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "File",
                    "name": "fileLink",
                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "file link",
                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "participant id",
                "PHI": undefined,
                "propertyId": 9,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                  "display": "Subject/Participant",
                  "name": "ParticipantId",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                  "dataType": Immutable.Record {
                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                    "display": "Subject/Participant",
                    "name": "ParticipantId",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "participant id",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "attachment",
                "PHI": undefined,
                "propertyId": 10,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Attachment",
                  "name": "attachment",
                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Attachment",
                    "name": "attachment",
                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "attachment",
                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": "Materials",
                "lookupSchema": "exp",
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "sample",
                "PHI": undefined,
                "propertyId": 11,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                  "display": "Sample",
                  "name": "sample",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                  "dataType": Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                    "display": "Sample",
                    "name": "sample",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "sample",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "all field types",
          "container": undefined,
          "description": "description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "key",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "key",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "string",
              "PHI": undefined,
              "propertyId": 2,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "multiline",
              "PHI": undefined,
              "propertyId": 3,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Multi-Line Text",
                "name": "multiLine",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Multi-Line Text",
                  "name": "multiLine",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "multiline",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "boolean",
              "PHI": undefined,
              "propertyId": 4,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Boolean",
                "name": "boolean",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "alternateRangeURI": "xsd:boolean",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Boolean",
                  "name": "boolean",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                  "alternateRangeURI": "xsd:boolean",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "boolean",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "double",
              "PHI": undefined,
              "propertyId": 5,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Decimal (floating point)",
                "name": "double",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                "alternateRangeURI": "xsd:double",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Decimal (floating point)",
                  "name": "double",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                  "alternateRangeURI": "xsd:double",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "double",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "datetime",
              "PHI": undefined,
              "propertyId": 6,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Date Time",
                "name": "dateTime",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                "alternateRangeURI": "xsd:dateTime",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Date Time",
                  "name": "dateTime",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                  "alternateRangeURI": "xsd:dateTime",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "datetime",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#flag",
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "flag",
              "PHI": undefined,
              "propertyId": 7,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "display": "Flag",
                "name": "flag",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "display": "Flag",
                  "name": "flag",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "flag",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "file link",
              "PHI": undefined,
              "propertyId": 8,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "File",
                "name": "fileLink",
                "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "File",
                  "name": "fileLink",
                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "file link",
                "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "participant id",
              "PHI": undefined,
              "propertyId": 9,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                "display": "Subject/Participant",
                "name": "ParticipantId",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                "dataType": Immutable.Record {
                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                  "display": "Subject/Participant",
                  "name": "ParticipantId",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "participant id",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "attachment",
              "PHI": undefined,
              "propertyId": 10,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.labkey.org/exp/xml#attachment",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Attachment",
                "name": "attachment",
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Attachment",
                  "name": "attachment",
                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "attachment",
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#sample",
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": "Materials",
              "lookupSchema": "exp",
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "sample",
              "PHI": undefined,
              "propertyId": 11,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                "display": "Sample",
                "name": "sample",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                  "display": "Sample",
                  "name": "sample",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "sample",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "all field types",
                "container": undefined,
                "description": "description",
                "domainURI": "test",
                "domainId": 1,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "key",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "key",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "string",
                    "PHI": undefined,
                    "propertyId": 2,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "multiline",
                    "PHI": undefined,
                    "propertyId": 3,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Multi-Line Text",
                        "name": "multiLine",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "multiline",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "boolean",
                    "PHI": undefined,
                    "propertyId": 4,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Boolean",
                        "name": "boolean",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                        "alternateRangeURI": "xsd:boolean",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "double",
                    "PHI": undefined,
                    "propertyId": 5,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Decimal (floating point)",
                        "name": "double",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                        "alternateRangeURI": "xsd:double",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "datetime",
                    "PHI": undefined,
                    "propertyId": 6,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Date Time",
                        "name": "dateTime",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                        "alternateRangeURI": "xsd:dateTime",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "datetime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "flag",
                    "PHI": undefined,
                    "propertyId": 7,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://www.labkey.org/exp/xml#flag",
                        "display": "Flag",
                        "name": "flag",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "file link",
                    "PHI": undefined,
                    "propertyId": 8,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "File",
                        "name": "fileLink",
                        "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "file link",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "participant id",
                    "PHI": undefined,
                    "propertyId": 9,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                        "display": "Subject/Participant",
                        "name": "ParticipantId",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "participant id",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "attachment",
                    "PHI": undefined,
                    "propertyId": 10,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Attachment",
                        "name": "attachment",
                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": "Materials",
                    "lookupSchema": "exp",
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "sample",
                    "PHI": undefined,
                    "propertyId": 11,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://www.labkey.org/exp/xml#sample",
                        "display": "Sample",
                        "name": "sample",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="11 Fields Defined"
                id="domainpropertiesrow-all-field-types-hdr"
                isValid={true}
                title="all field types"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-all-field-types-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    all field types
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="3"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="3"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "key",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "key",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="key"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="key"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "key",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "key",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip70"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip71"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip72"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip73"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip74"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "string",
                                        "PHI": undefined,
                                        "propertyId": 2,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={1}
                                    isDragDisabled={false}
                                    key="domain-row-key-1"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-1"
                                      index={1}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-1"
                                        index={1}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-1"
                                          index={1}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-1"
                                            dropAnimationFinished={[Function]}
                                            index={1}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={1}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-1"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-1"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-1"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-1"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-1"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-1"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-1"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="string"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-1"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="string"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-1"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="string"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-1"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="string"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-1"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-1"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-1"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-1"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-1"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "string",
                                                          "PHI": undefined,
                                                          "propertyId": 2,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={1}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={1}
                                                              label="Text Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Text Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Text Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip75"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-1"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-1"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-1"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-1"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={1}
                                                                  label="Text Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-1"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-1"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-1"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-1"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip76"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-1"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-1"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip77"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-1"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-1"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Text",
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": "xsd:string",
                                                                    "shortDisplay": "String",
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip78"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-1"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip79"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-1"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "multiline",
                                        "PHI": undefined,
                                        "propertyId": 3,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Multi-Line Text",
                                            "name": "multiLine",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "multiline",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={2}
                                    isDragDisabled={false}
                                    key="domain-row-key-2"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-2"
                                      index={2}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-2"
                                        index={2}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-2"
                                          index={2}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-2"
                                            dropAnimationFinished={[Function]}
                                            index={2}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={2}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-2"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-2"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-2"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-2"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-2"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-2"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-2"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="multiline"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-2"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="multiline"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-2"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="multiLine"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-2"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="multiLine"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-2"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-2"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-2"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-2"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-2"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "multiline",
                                                          "PHI": undefined,
                                                          "propertyId": 3,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Multi-Line Text",
                                                            "name": "multiLine",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Multi-Line Text",
                                                              "name": "multiLine",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "multiline",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={2}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              domainIndex={0}
                                                              index={2}
                                                              label="Multi-line Text Field Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Multi-line Text Field Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Multi-line Text Field Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip80"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-2"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-2"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-2"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-2"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-2"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-2"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  domainIndex={0}
                                                                  index={2}
                                                                  label="Multi-line Text Field Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "multiline",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Multi-Line Text",
                                                                    "name": "multiLine",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Multi-Line Text",
                                                                      "name": "multiLine",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "multiline",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-2"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-2"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-2"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-2"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip81"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-2"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-2"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip82"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-2"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-2"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "multiline",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Multi-Line Text",
                                                                    "name": "multiLine",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Multi-Line Text",
                                                                      "name": "multiLine",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "multiline",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip83"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-2"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip84"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-2"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "boolean",
                                        "PHI": undefined,
                                        "propertyId": 4,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Boolean",
                                            "name": "boolean",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                            "alternateRangeURI": "xsd:boolean",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={3}
                                    isDragDisabled={false}
                                    key="domain-row-key-3"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-3"
                                      index={3}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-3"
                                        index={3}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-3"
                                          index={3}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-3"
                                            dropAnimationFinished={[Function]}
                                            index={3}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={3}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-3"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-3"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-3"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-3"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-3"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-3"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-3"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="boolean"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-3"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="boolean"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-3"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="boolean"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-3"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="boolean"
                                                          >
                                                            <option
                                                              key="boolean"
                                                              value="boolean"
                                                            >
                                                              Boolean
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-3"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-3"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-3"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-3"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-3"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "boolean",
                                                          "PHI": undefined,
                                                          "propertyId": 4,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Boolean",
                                                            "name": "boolean",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                            "alternateRangeURI": "xsd:boolean",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Boolean",
                                                              "name": "boolean",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                              "alternateRangeURI": "xsd:boolean",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "boolean",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={3}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <BooleanFieldOptions
                                                              domainIndex={0}
                                                              index={3}
                                                              label="Boolean Field Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Boolean Field Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Boolean Field Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <div>
                                                                            Use boolean formatting to specify the text to show when a value is true and false. Text can optionally be shown for null values.
                                                                            <br />
                                                                            <br />
                                                                            For example, "Yes;No;Blank" would output "Yes" if the value is true, "No" if false, and "Blank" for a null value.
                                                                          </div>
                                                                        }
                                                                        label="Format for Boolean Values"
                                                                      >
                                                                        Format for Boolean 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Values
                                                                          <LabelHelpTip
                                                                            title="Format for Boolean Values"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip85"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Boolean Values"
                                                                                >
                                                                                  <div>
                                                                                    Use boolean formatting to specify the text to show when a value is true and false. Text can optionally be shown for null values.
                                                                                    <br />
                                                                                    <br />
                                                                                    For example, "Yes;No;Blank" would output "Yes" if the value is true, "No" if false, and "Blank" for a null value.
                                                                                  </div>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-3"
                                                                      name="domainpropertiesrow-scale"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-3"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </BooleanFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "boolean",
                                                                  "PHI": undefined,
                                                                  "propertyId": 4,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Boolean",
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": "xsd:boolean",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Boolean",
                                                                      "name": "boolean",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                      "alternateRangeURI": "xsd:boolean",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-3"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-3"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-3"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-3"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip86"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-3"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-3"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip87"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-3"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-3"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "boolean",
                                                                  "PHI": undefined,
                                                                  "propertyId": 4,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Boolean",
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": "xsd:boolean",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Boolean",
                                                                      "name": "boolean",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                      "alternateRangeURI": "xsd:boolean",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip88"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-3"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "double",
                                        "PHI": undefined,
                                        "propertyId": 5,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Decimal (floating point)",
                                            "name": "double",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                            "alternateRangeURI": "xsd:double",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={4}
                                    isDragDisabled={false}
                                    key="domain-row-key-4"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-4"
                                      index={4}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-4"
                                        index={4}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-4"
                                          index={4}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-4"
                                            dropAnimationFinished={[Function]}
                                            index={4}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-4"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={4}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-4"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-4"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-4"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-4"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-4"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-4"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-4"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-4"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="double"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-4"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="double"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-4"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="double"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-4"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="double"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-4"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-4"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-4"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-4"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-4"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "double",
                                                          "PHI": undefined,
                                                          "propertyId": 5,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Decimal (floating point)",
                                                            "name": "double",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                            "alternateRangeURI": "xsd:double",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Decimal (floating point)",
                                                              "name": "double",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                              "alternateRangeURI": "xsd:double",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "double",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={4}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              domainIndex={0}
                                                              index={4}
                                                              label="Decimal Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              showScannableOption={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Decimal Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Decimal Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip89"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-4"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-4"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-4"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-4"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-4"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-4"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  domainIndex={0}
                                                                  index={4}
                                                                  label="Decimal Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  showScannableOption={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "double",
                                                                  "PHI": undefined,
                                                                  "propertyId": 5,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Decimal (floating point)",
                                                                    "name": "double",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                    "alternateRangeURI": "xsd:double",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Decimal (floating point)",
                                                                      "name": "double",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                      "alternateRangeURI": "xsd:double",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "double",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={4}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-4"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-4"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-4"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-4"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip90"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-4"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-4"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip91"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-4"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-4"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "double",
                                                                  "PHI": undefined,
                                                                  "propertyId": 5,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Decimal (floating point)",
                                                                    "name": "double",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                    "alternateRangeURI": "xsd:double",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Decimal (floating point)",
                                                                      "name": "double",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                      "alternateRangeURI": "xsd:double",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "double",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={4}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip92"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-4"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip93"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-4"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "datetime",
                                        "PHI": undefined,
                                        "propertyId": 6,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Date Time",
                                            "name": "dateTime",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                            "alternateRangeURI": "xsd:dateTime",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "datetime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={5}
                                    isDragDisabled={false}
                                    key="domain-row-key-5"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-5"
                                      index={5}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-5"
                                        index={5}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-5"
                                          index={5}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-5"
                                            dropAnimationFinished={[Function]}
                                            index={5}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-5"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={5}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-5"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-5"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-5"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-5"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-5"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-5"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-5"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-5"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="datetime"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-5"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="datetime"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-5"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="dateTime"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-5"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="dateTime"
                                                          >
                                                            <option
                                                              key="date"
                                                              value="date"
                                                            >
                                                              Date
                                                            </option>
                                                            <option
                                                              key="dateTime"
                                                              value="dateTime"
                                                            >
                                                              Date Time
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="time"
                                                              value="time"
                                                            >
                                                              Time
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-5"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-5"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-5"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-5"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-5"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "datetime",
                                                          "PHI": undefined,
                                                          "propertyId": 6,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Date Time",
                                                            "name": "dateTime",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                            "alternateRangeURI": "xsd:dateTime",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Date Time",
                                                              "name": "dateTime",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                              "alternateRangeURI": "xsd:dateTime",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "datetime",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={5}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <DateTimeFieldOptions
                                                              domainIndex={0}
                                                              excludeFromShifting={false}
                                                              index={5}
                                                              label="Date and Time Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              type="dateTime"
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Date and Time Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Date and Time Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a 
                                                                              date or time
                                                                               value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/SimpleDateFormat.html"
                                                                              >
                                                                                SimpleDateFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#date"
                                                                              >
                                                                                Date and Time formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Dates"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Dates
                                                                          <LabelHelpTip
                                                                            title="Format for Dates"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip94"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Dates"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a 
                                                                                      date or time
                                                                                       value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/SimpleDateFormat.html"
                                                                                      >
                                                                                        SimpleDateFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#date"
                                                                                      >
                                                                                        Date and Time formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-9"
                                                                  />
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-5"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-5"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-9"
                                                                  />
                                                                </div>
                                                              </div>
                                                            </DateTimeFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "datetime",
                                                                  "PHI": undefined,
                                                                  "propertyId": 6,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Date Time",
                                                                    "name": "dateTime",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                    "alternateRangeURI": "xsd:dateTime",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Date Time",
                                                                      "name": "dateTime",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                      "alternateRangeURI": "xsd:dateTime",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "datetime",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={5}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-5"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-5"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-5"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-5"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip95"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-5"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-5"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip96"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-5"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-5"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "datetime",
                                                                  "PHI": undefined,
                                                                  "propertyId": 6,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Date Time",
                                                                    "name": "dateTime",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                    "alternateRangeURI": "xsd:dateTime",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Date Time",
                                                                      "name": "dateTime",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                      "alternateRangeURI": "xsd:dateTime",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "datetime",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={5}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip97"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-5"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip98"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-5"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "flag",
                                        "PHI": undefined,
                                        "propertyId": 7,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "dataType": Immutable.Record {
                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                            "display": "Flag",
                                            "name": "flag",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={6}
                                    isDragDisabled={false}
                                    key="domain-row-key-6"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-6"
                                      index={6}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-6"
                                        index={6}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-6"
                                          index={6}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-6"
                                            dropAnimationFinished={[Function]}
                                            index={6}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-6"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={6}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-6"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-6"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-6"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-6"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-6"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-6"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-6"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-6"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="flag"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-6"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="flag"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-6"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="flag"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-6"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="flag"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-6"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-6"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-6"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-6"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-6"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "flag",
                                                          "PHI": undefined,
                                                          "propertyId": 7,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                            "display": "Flag",
                                                            "name": "flag",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                              "display": "Flag",
                                                              "name": "flag",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "flag",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={6}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <TextFieldOptions
                                                              domainIndex={0}
                                                              index={6}
                                                              label="Flag Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scale={4000}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Flag Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Flag Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              Sets the maximum character count for a text field.
                                                                            </p>
                                                                            <p>
                                                                              Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Maximum Text Length"
                                                                      >
                                                                        Maximum Text 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Length
                                                                          <LabelHelpTip
                                                                            title="Maximum Text Length"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip99"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Maximum Text Length"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      Sets the maximum character count for a text field.
                                                                                    </p>
                                                                                    <p>
                                                                                      Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12 domain-text-options-col"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={false}
                                                                      className="domain-text-options-radio1 domain-field-float-left"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-maxLength-0-6"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="maxLength"
                                                                    >
                                                                      <input
                                                                        checked={false}
                                                                        className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-maxLength-0-6"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="maxLength"
                                                                      />
                                                                    </FormControl>
                                                                    <div>
                                                                      Unlimited
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      checked={true}
                                                                      className="domain-text-options-radio2 domain-field-float-left"
                                                                      componentClass="input"
                                                                      id="domainpropertiesrow-customLength-0-6"
                                                                      onChange={[Function]}
                                                                      type="radio"
                                                                      value="customLength"
                                                                    >
                                                                      <input
                                                                        checked={true}
                                                                        className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                        id="domainpropertiesrow-customLength-0-6"
                                                                        onChange={[Function]}
                                                                        type="radio"
                                                                        value="customLength"
                                                                      />
                                                                    </FormControl>
                                                                    <span
                                                                      className="domain-text-options-length domain-field-float-left"
                                                                    >
                                                                      No longer than 
                                                                      <FormControl
                                                                        bsClass="form-control"
                                                                        className="domain-text-length-field"
                                                                        componentClass="input"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-scale-0-6"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="number"
                                                                        value={4000}
                                                                      >
                                                                        <input
                                                                          className="domain-text-length-field form-control"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-scale-0-6"
                                                                          name="domainpropertiesrow-scale"
                                                                          onChange={[Function]}
                                                                          type="number"
                                                                          value={4000}
                                                                        />
                                                                      </FormControl>
                                                                       characters
                                                                    </span>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  domainIndex={0}
                                                                  index={6}
                                                                  label="Flag Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scale={4000}
                                                                />
                                                              </div>
                                                            </TextFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "flag",
                                                                  "PHI": undefined,
                                                                  "propertyId": 7,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "display": "Flag",
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={6}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-6"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-6"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-6"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-6"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip100"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-6"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-6"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip101"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-6"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-6"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "flag",
                                                                  "PHI": undefined,
                                                                  "propertyId": 7,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "display": "Flag",
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "flag",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={6}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip102"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-6"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip103"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-6"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "file link",
                                        "PHI": undefined,
                                        "propertyId": 8,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "File",
                                          "name": "fileLink",
                                          "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "File",
                                            "name": "fileLink",
                                            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "file link",
                                          "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={7}
                                    isDragDisabled={false}
                                    key="domain-row-key-7"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-7"
                                      index={7}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-7"
                                        index={7}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-7"
                                          index={7}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-7"
                                            dropAnimationFinished={[Function]}
                                            index={7}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-7"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={7}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-7"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-7"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-7"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-7"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-7"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-7"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-7"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-7"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="file link"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-7"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="file link"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-7"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="fileLink"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-7"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="fileLink"
                                                          >
                                                            <option
                                                              key="fileLink"
                                                              value="fileLink"
                                                            >
                                                              File
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-7"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-7"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-7"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-7"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-7"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "file link",
                                                          "PHI": undefined,
                                                          "propertyId": 8,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "File",
                                                            "name": "fileLink",
                                                            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "File",
                                                              "name": "fileLink",
                                                              "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "file link",
                                                            "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={7}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <Memo()
                                                              domainIndex={0}
                                                              index={7}
                                                              label="File"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      helpTipBody={
                                                                        <React.Fragment>
                                                                          <p>
                                                                            Set the default behavior of file links when clicked in grids and elsewhere in LabKey.
                                                                          </p>
                                                                        </React.Fragment>
                                                                      }
                                                                      title="File Behavior"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        File Behavior
                                                                        <LabelHelpTip
                                                                          title="File Behavior"
                                                                        >
                                                                          <OverlayTrigger
                                                                            id="label-help-tip104"
                                                                            overlay={
                                                                              <Popover
                                                                                id="label-help-tip-popover"
                                                                                title="File Behavior"
                                                                              >
                                                                                <React.Fragment>
                                                                                  <p>
                                                                                    Set the default behavior of file links when clicked in grids and elsewhere in LabKey.
                                                                                  </p>
                                                                                </React.Fragment>
                                                                              </Popover>
                                                                            }
                                                                          >
                                                                            <div
                                                                              className="overlay-trigger"
                                                                              onClick={[Function]}
                                                                              onMouseEnter={[Function]}
                                                                              onMouseLeave={[Function]}
                                                                            >
                                                                              <span
                                                                                className="label-help-target"
                                                                              >
                                                                                <span
                                                                                  className="label-help-icon fa fa-question-circle"
                                                                                />
                                                                              </span>
                                                                            </div>
                                                                          </OverlayTrigger>
                                                                        </LabelHelpTip>
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row domain-field-label"
                                                                >
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-7"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-7"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-inline-0-7"
                                                                          value="inline"
                                                                        >
                                                                          Show File in Browser
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-attachment-0-7"
                                                                          value="attachment"
                                                                        >
                                                                          Download File
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </Memo()>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "file link",
                                                                  "PHI": undefined,
                                                                  "propertyId": 8,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "File",
                                                                    "name": "fileLink",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "File",
                                                                      "name": "fileLink",
                                                                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "file link",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={7}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-7"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-7"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-7"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-7"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip105"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-7"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-7"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip106"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-7"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-7"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "file link",
                                                                  "PHI": undefined,
                                                                  "propertyId": 8,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "File",
                                                                    "name": "fileLink",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "File",
                                                                      "name": "fileLink",
                                                                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "file link",
                                                                    "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={7}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip107"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-7"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "participant id",
                                        "PHI": undefined,
                                        "propertyId": 9,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "dataType": Immutable.Record {
                                            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                            "display": "Subject/Participant",
                                            "name": "ParticipantId",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "participant id",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={8}
                                    isDragDisabled={false}
                                    key="domain-row-key-8"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-8"
                                      index={8}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-8"
                                        index={8}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-8"
                                          index={8}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-8"
                                            dropAnimationFinished={[Function]}
                                            index={8}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-8"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={8}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-8"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-8"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-8"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-8"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-8"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-8"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-8"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-8"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="participant id"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-8"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="participant id"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-8"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="ParticipantId"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-8"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="ParticipantId"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-8"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-8"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-8"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-8"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-8"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "participant id",
                                                          "PHI": undefined,
                                                          "propertyId": 9,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                            "display": "Subject/Participant",
                                                            "name": "ParticipantId",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                              "display": "Subject/Participant",
                                                              "name": "ParticipantId",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "participant id",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={8}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          />
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "participant id",
                                                                  "PHI": undefined,
                                                                  "propertyId": 9,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "display": "Subject/Participant",
                                                                    "name": "ParticipantId",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                      "display": "Subject/Participant",
                                                                      "name": "ParticipantId",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "participant id",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={8}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-8"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-8"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-8"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-8"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip108"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-8"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-8"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip109"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-8"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-8"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "participant id",
                                                                  "PHI": undefined,
                                                                  "propertyId": 9,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "display": "Subject/Participant",
                                                                    "name": "ParticipantId",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                      "display": "Subject/Participant",
                                                                      "name": "ParticipantId",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "participant id",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={8}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip110"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-8"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip111"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-8"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "attachment",
                                        "PHI": undefined,
                                        "propertyId": 10,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Attachment",
                                          "name": "attachment",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Attachment",
                                            "name": "attachment",
                                            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "attachment",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={9}
                                    isDragDisabled={false}
                                    key="domain-row-key-9"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-9"
                                      index={9}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-9"
                                        index={9}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-9"
                                          index={9}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-9"
                                            dropAnimationFinished={[Function]}
                                            index={9}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-9"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={9}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-9"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-9"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-9"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-9"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-9"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-9"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-9"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-9"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="attachment"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-9"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="attachment"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-9"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="attachment"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-9"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="attachment"
                                                          >
                                                            <option
                                                              key="attachment"
                                                              value="attachment"
                                                            >
                                                              Attachment
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-9"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-9"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-9"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-9"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-9"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "attachment",
                                                          "PHI": undefined,
                                                          "propertyId": 10,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Attachment",
                                                            "name": "attachment",
                                                            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Attachment",
                                                              "name": "attachment",
                                                              "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "attachment",
                                                            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={9}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <Memo()
                                                              domainIndex={0}
                                                              index={9}
                                                              label="Attachment"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      helpTipBody={
                                                                        <React.Fragment>
                                                                          <p>
                                                                            Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                          </p>
                                                                        </React.Fragment>
                                                                      }
                                                                      title="Attachment Behavior"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Attachment Behavior
                                                                        <LabelHelpTip
                                                                          title="Attachment Behavior"
                                                                        >
                                                                          <OverlayTrigger
                                                                            id="label-help-tip112"
                                                                            overlay={
                                                                              <Popover
                                                                                id="label-help-tip-popover"
                                                                                title="Attachment Behavior"
                                                                              >
                                                                                <React.Fragment>
                                                                                  <p>
                                                                                    Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                                  </p>
                                                                                </React.Fragment>
                                                                              </Popover>
                                                                            }
                                                                          >
                                                                            <div
                                                                              className="overlay-trigger"
                                                                              onClick={[Function]}
                                                                              onMouseEnter={[Function]}
                                                                              onMouseLeave={[Function]}
                                                                            >
                                                                              <span
                                                                                className="label-help-target"
                                                                              >
                                                                                <span
                                                                                  className="label-help-icon fa fa-question-circle"
                                                                                />
                                                                              </span>
                                                                            </div>
                                                                          </OverlayTrigger>
                                                                        </LabelHelpTip>
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row domain-field-label"
                                                                >
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-9"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-9"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-inline-0-9"
                                                                          value="inline"
                                                                        >
                                                                          Show Attachment in Browser
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-attachment-0-9"
                                                                          value="attachment"
                                                                        >
                                                                          Download Attachment
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </Memo()>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "attachment",
                                                                  "PHI": undefined,
                                                                  "propertyId": 10,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Attachment",
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Attachment",
                                                                      "name": "attachment",
                                                                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={9}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-9"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-9"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-9"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-9"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip113"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-9"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-9"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip114"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-9"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-9"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "attachment",
                                                                  "PHI": undefined,
                                                                  "propertyId": 10,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Attachment",
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Attachment",
                                                                      "name": "attachment",
                                                                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={9}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip115"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-9"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": "Materials",
                                        "lookupSchema": "exp",
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "sample",
                                        "PHI": undefined,
                                        "propertyId": 11,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "dataType": Immutable.Record {
                                            "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                            "display": "Sample",
                                            "name": "sample",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={10}
                                    isDragDisabled={false}
                                    key="domain-row-key-10"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-10"
                                      index={10}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-10"
                                        index={10}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-10"
                                          index={10}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-10"
                                            dropAnimationFinished={[Function]}
                                            index={10}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="3"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-10"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={10}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-10"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-3-hidden-text-21"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="3"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-10"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-10"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-10"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-10"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-10"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-10"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-10"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="sample"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-10"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="sample"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-10"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="sample"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-10"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="sample"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-10"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-10"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-10"
                                                    >
                                                      All Samples
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-10"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-10"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": "Materials",
                                                          "lookupSchema": "exp",
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "sample",
                                                          "PHI": undefined,
                                                          "propertyId": 11,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                            "display": "Sample",
                                                            "name": "sample",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                              "display": "Sample",
                                                              "name": "sample",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "sample",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={10}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <SampleFieldOptions
                                                              domainIndex={0}
                                                              index={10}
                                                              label="Sample Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              original={
                                                                {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                    "display": "Sample",
                                                                    "name": "sample",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "name": "sample",
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                }
                                                              }
                                                              value="http://www.w3.org/2001/XMLSchema#string|Materials"
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Sample Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Sample Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Sample lookup to
                                                                      <LabelHelpTip
                                                                        title="Sample Reference"
                                                                      >
                                                                        <OverlayTrigger
                                                                          id="label-help-tip116"
                                                                          overlay={
                                                                            <Popover
                                                                              id="label-help-tip-popover"
                                                                              title="Sample Reference"
                                                                            >
                                                                              <p>
                                                                                Select the sample reference for this field. You can choose to reference all available samples or select a specific sample type to filter by.
                                                                              </p>
                                                                              <p>
                                                                                This selection will be used to validate and link incoming data, populate lists for data entry, etc.
                                                                              </p>
                                                                              <p>
                                                                                Learn more about using
                                                                                 
                                                                                <HelpLink
                                                                                  topic="propertyFields#samp"
                                                                                >
                                                                                  sample fields
                                                                                </HelpLink>
                                                                                 in LabKey.
                                                                              </p>
                                                                               
                                                                            </Popover>
                                                                          }
                                                                        >
                                                                          <div
                                                                            className="overlay-trigger"
                                                                            onClick={[Function]}
                                                                            onMouseEnter={[Function]}
                                                                            onMouseLeave={[Function]}
                                                                          >
                                                                            <span
                                                                              className="label-help-target"
                                                                            >
                                                                              <span
                                                                                className="label-help-icon fa fa-question-circle"
                                                                              />
                                                                            </span>
                                                                          </div>
                                                                        </OverlayTrigger>
                                                                      </LabelHelpTip>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-sampleTypeSelect-0-10"
                                                                      key="domainpropertiesrow-sampleTypeSelect-0-10"
                                                                      name="domainpropertiesrow-sampleTypeSelect"
                                                                      onChange={[Function]}
                                                                      value="http://www.w3.org/2001/XMLSchema#string|Materials"
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-sampleTypeSelect-0-10"
                                                                        name="domainpropertiesrow-sampleTypeSelect"
                                                                        onChange={[Function]}
                                                                        value="http://www.w3.org/2001/XMLSchema#string|Materials"
                                                                      >
                                                                        <option
                                                                          disabled={true}
                                                                          key="_loading"
                                                                          value="http://www.w3.org/2001/XMLSchema#string|Materials"
                                                                        >
                                                                          Loading...
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </SampleFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": "Materials",
                                                                  "lookupSchema": "exp",
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "sample",
                                                                  "PHI": undefined,
                                                                  "propertyId": 11,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                    "display": "Sample",
                                                                    "name": "sample",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                      "display": "Sample",
                                                                      "name": "sample",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "sample",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={10}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-10"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-10"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-10"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-10"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip117"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-10"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-10"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip118"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-10"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-10"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": "Materials",
                                                                  "lookupSchema": "exp",
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "sample",
                                                                  "PHI": undefined,
                                                                  "propertyId": 11,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                    "display": "Sample",
                                                                    "name": "sample",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#string|Materials",
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                                      "display": "Sample",
                                                                      "name": "sample",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "sample",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={10}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip119"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-10"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form with hide add fields button 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": undefined,
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideAddFieldsButton": true,
      "hideInferFromFile": true,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": undefined,
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideAddFieldsButton": true,
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": undefined,
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                id="domain-header"
                isValid={true}
                title="Fields"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domain-header"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    Fields
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className=""
                collapsible={false}
              >
                <div
                  className="panel-body"
                >
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <FileAttachmentForm
                    acceptedFormats=".json"
                    allowDirectories={false}
                    allowMultiple={false}
                    cancelText="Cancel"
                    compact={false}
                    fileSpecificCallback={
                      Immutable.Map {
                        ".json": [Function],
                      }
                    }
                    label="Import fields from file"
                    labelLong="Select file or drag and drop here."
                    onFileRemoval={[Function]}
                    previewGridProps={false}
                    showAcceptedFormats={true}
                    showButtons={false}
                    showLabel={true}
                    showProgressBar={false}
                    submitText="Upload"
                  >
                    <span
                      className="translator--toggle__wizard"
                    >
                      <FormSection
                        iconSpacer={false}
                        label="Import fields from file"
                        showLabel={true}
                      >
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <label
                              className="control-label text-left"
                            >
                              <strong>
                                Import fields from file
                              </strong>
                            </label>
                          </div>
                        </div>
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <div
                              className="wizard-row--container"
                            >
                              <div
                                className=""
                              >
                                <FileAttachmentContainer
                                  acceptedFormats=".json"
                                  allowDirectories={false}
                                  allowMultiple={false}
                                  compact={false}
                                  handleChange={[Function]}
                                  handleRemoval={[Function]}
                                  labelLong="Select file or drag and drop here."
                                >
                                  <div
                                    className="file-upload--container block"
                                  >
                                    <label
                                      className="file-upload--label"
                                      htmlFor="fileUpload"
                                      onDragEnter={[Function]}
                                      onDragLeave={[Function]}
                                      onDragOver={[Function]}
                                      onDrop={[Function]}
                                    >
                                      <i
                                        aria-hidden="true"
                                        className="fa fa-cloud-upload fa-2x cloud-logo"
                                      />
                                      Select file or drag and drop here.
                                    </label>
                                    <input
                                      accept=".json"
                                      className="file-upload--input"
                                      id="fileUpload"
                                      multiple={false}
                                      name="fileUpload"
                                      onChange={[Function]}
                                      type="file"
                                    />
                                  </div>
                                </FileAttachmentContainer>
                              </div>
                            </div>
                          </div>
                        </div>
                      </FormSection>
                    </span>
                    <div
                      className="row"
                    >
                      <div
                        className="col-md-9"
                      >
                        <div
                          className="file-form-formats"
                        >
                          <strong>
                            Supported formats include: 
                          </strong>
                          .json
                        </div>
                      </div>
                      <div
                        className="col-md-3"
                      >
                        <div
                          className="pull-right"
                        />
                      </div>
                    </div>
                  </FileAttachmentForm>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form with hide required 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "Hide required",
      "container": undefined,
      "description": "domain form with no required fields",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "key",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "key",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": false,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideRequired": true,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "Hide required",
            "container": undefined,
            "description": "domain form with no required fields",
            "domainURI": "test",
            "domainId": 1,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "key",
                "PHI": undefined,
                "propertyId": 1,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "key",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "Hide required",
          "container": undefined,
          "description": "domain form with no required fields",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "key",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "key",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideRequired": true,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "Hide required",
                "container": undefined,
                "description": "domain form with no required fields",
                "domainURI": "test",
                "domainId": 1,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "key",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "key",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="1 Field Defined"
                id="domainpropertiesrow-Hide-required-hdr"
                isValid={true}
                title="Hide required"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-Hide-required-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    Hide required
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="23"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                />
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="23"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "hideRequired": true,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "key",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "key",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": false,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="23"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-23-hidden-text-110"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="23"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="key"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="key"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        />
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    />
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "hideRequired": true,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "key",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "key",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": false,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip306"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "hideRequired": true,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip307"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip308"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "hideRequired": true,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "key",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "key",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": false,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip309"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip310"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form with no fields 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "no fields",
      "container": undefined,
      "description": "no field description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideInferFromFile": true,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "no fields",
            "container": undefined,
            "description": "no field description",
            "domainURI": "test",
            "domainId": 1,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "no fields",
          "container": undefined,
          "description": "no field description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "no fields",
                "container": undefined,
                "description": "no field description",
                "domainURI": "test",
                "domainId": 1,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                id="domainpropertiesrow-no-fields-hdr"
                isValid={true}
                title="no fields"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-no-fields-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    no fields
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className=""
                collapsible={false}
              >
                <div
                  className="panel-body"
                >
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <FileAttachmentForm
                    acceptedFormats=".json"
                    allowDirectories={false}
                    allowMultiple={false}
                    cancelText="Cancel"
                    compact={false}
                    fileSpecificCallback={
                      Immutable.Map {
                        ".json": [Function],
                      }
                    }
                    label="Import fields from file"
                    labelLong="Select file or drag and drop here."
                    onFileRemoval={[Function]}
                    previewGridProps={false}
                    showAcceptedFormats={true}
                    showButtons={false}
                    showLabel={true}
                    showProgressBar={false}
                    submitText="Upload"
                  >
                    <span
                      className="translator--toggle__wizard"
                    >
                      <FormSection
                        iconSpacer={false}
                        label="Import fields from file"
                        showLabel={true}
                      >
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <label
                              className="control-label text-left"
                            >
                              <strong>
                                Import fields from file
                              </strong>
                            </label>
                          </div>
                        </div>
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <div
                              className="wizard-row--container"
                            >
                              <div
                                className=""
                              >
                                <FileAttachmentContainer
                                  acceptedFormats=".json"
                                  allowDirectories={false}
                                  allowMultiple={false}
                                  compact={false}
                                  handleChange={[Function]}
                                  handleRemoval={[Function]}
                                  labelLong="Select file or drag and drop here."
                                >
                                  <div
                                    className="file-upload--container block"
                                  >
                                    <label
                                      className="file-upload--label"
                                      htmlFor="fileUpload"
                                      onDragEnter={[Function]}
                                      onDragLeave={[Function]}
                                      onDragOver={[Function]}
                                      onDrop={[Function]}
                                    >
                                      <i
                                        aria-hidden="true"
                                        className="fa fa-cloud-upload fa-2x cloud-logo"
                                      />
                                      Select file or drag and drop here.
                                    </label>
                                    <input
                                      accept=".json"
                                      className="file-upload--input"
                                      id="fileUpload"
                                      multiple={false}
                                      name="fileUpload"
                                      onChange={[Function]}
                                      type="file"
                                    />
                                  </div>
                                </FileAttachmentContainer>
                              </div>
                            </div>
                          </div>
                        </div>
                      </FormSection>
                    </span>
                    <div
                      className="row"
                    >
                      <div
                        className="col-md-9"
                      >
                        <div
                          className="file-form-formats"
                        >
                          <strong>
                            Supported formats include: 
                          </strong>
                          .json
                        </div>
                      </div>
                      <div
                        className="col-md-3"
                      >
                        <div
                          className="pull-right"
                        />
                      </div>
                    </div>
                  </FileAttachmentForm>
                  <div
                    className="margin-top domain-form-manual-section"
                  >
                    <p>
                      Or
                    </p>
                    <ActionButton
                      buttonClass="domain-form-manual-btn"
                      containerClass="form-group"
                      helperTitle="More Info"
                      onClick={[Function]}
                    >
                      <div
                        className="form-group"
                      >
                        <div
                          className="domain-form-manual-btn"
                        >
                          <span
                            className="container--action-button btn btn-default"
                            onClick={[Function]}
                          >
                            Manually Define Fields
                          </span>
                        </div>
                      </div>
                    </ActionButton>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm domain form with updated fields 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": "update field types",
      "container": undefined,
      "description": "description",
      "domainURI": "test",
      "domainId": 1,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "newfieldname",
          "PHI": undefined,
          "propertyId": 0,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Integer",
            "name": "int",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": "xsd:int",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "fieldname",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": true,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": false,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "string changed to boolean",
          "PHI": undefined,
          "propertyId": 1,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Boolean",
            "name": "boolean",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
            "alternateRangeURI": "xsd:boolean",
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "string changed to boolean",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": true,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": undefined,
        },
        Immutable.Record {
          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "int changed to participant",
          "PHI": undefined,
          "propertyId": 2,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
            "display": "Subject/Participant",
            "name": "ParticipantId",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": undefined,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Integer",
              "name": "int",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "alternateRangeURI": "xsd:int",
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "int changed to participant",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          },
          "updatedField": true,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": undefined,
        },
        Immutable.Record {
          "conceptURI": undefined,
          "conditionalFormats": Immutable.List [],
          "defaultScale": undefined,
          "defaultValueType": undefined,
          "defaultValue": undefined,
          "defaultDisplayValue": undefined,
          "description": undefined,
          "dimension": undefined,
          "excludeFromShifting": false,
          "format": undefined,
          "hidden": false,
          "importAliases": undefined,
          "label": undefined,
          "lookupContainer": undefined,
          "lookupQuery": undefined,
          "lookupSchema": undefined,
          "lookupValidator": undefined,
          "lookupIsValid": undefined,
          "measure": undefined,
          "mvEnabled": false,
          "name": "flag changed to attachment",
          "PHI": undefined,
          "propertyId": 3,
          "propertyURI": "test",
          "propertyValidators": Immutable.List [],
          "rangeValidators": Immutable.List [],
          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
          "regexValidators": Immutable.List [],
          "textChoiceValidator": undefined,
          "recommendedVariable": false,
          "uniqueConstraint": false,
          "required": false,
          "scale": 4000,
          "URL": undefined,
          "shownInDetailsView": true,
          "shownInInsertView": true,
          "shownInUpdateView": true,
          "visible": true,
          "dataType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Attachment",
            "name": "attachment",
            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "lookupQueryValue": undefined,
          "lookupType": Immutable.Record {
            "conceptURI": undefined,
            "display": "Lookup",
            "name": "lookup",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
            "alternateRangeURI": undefined,
            "shortDisplay": undefined,
            "lookupSchema": undefined,
            "lookupQuery": undefined,
          },
          "original": {
            "conceptURI": "http://www.labkey.org/exp/xml#flag",
            "dataType": Immutable.Record {
              "conceptURI": "http://www.labkey.org/exp/xml#flag",
              "display": "Flag",
              "name": "flag",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "name": "flag changed to attachment",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          },
          "updatedField": true,
          "isPrimaryKey": false,
          "lockType": "NotLocked",
          "wrappedColumnName": undefined,
          "disablePhiLevel": false,
          "lockExistingField": false,
          "sourceOntology": undefined,
          "conceptSubtree": undefined,
          "conceptLabelColumn": undefined,
          "conceptImportColumn": undefined,
          "principalConceptCode": undefined,
          "derivationDataScope": undefined,
          "selected": false,
          "scannable": undefined,
        },
      ],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": "update field types",
            "container": undefined,
            "description": "description",
            "domainURI": "test",
            "domainId": 1,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "newfieldname",
                "PHI": undefined,
                "propertyId": 0,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "fieldname",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": true,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "string changed to boolean",
                "PHI": undefined,
                "propertyId": 1,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Boolean",
                  "name": "boolean",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                  "alternateRangeURI": "xsd:boolean",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "string changed to boolean",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": true,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": undefined,
              },
              Immutable.Record {
                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "int changed to participant",
                "PHI": undefined,
                "propertyId": 2,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                  "display": "Subject/Participant",
                  "name": "ParticipantId",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Integer",
                    "name": "int",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "alternateRangeURI": "xsd:int",
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "int changed to participant",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                },
                "updatedField": true,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": undefined,
              },
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "lookupIsValid": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "flag changed to attachment",
                "PHI": undefined,
                "propertyId": 3,
                "propertyURI": "test",
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "uniqueConstraint": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Attachment",
                  "name": "attachment",
                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "dataType": Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                    "display": "Flag",
                    "name": "flag",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "flag changed to attachment",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                },
                "updatedField": true,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": undefined,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": "update field types",
          "container": undefined,
          "description": "description",
          "domainURI": "test",
          "domainId": 1,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "newfieldname",
              "PHI": undefined,
              "propertyId": 0,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Integer",
                "name": "int",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": "xsd:int",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "fieldname",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": true,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "string changed to boolean",
              "PHI": undefined,
              "propertyId": 1,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Boolean",
                "name": "boolean",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                "alternateRangeURI": "xsd:boolean",
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "string changed to boolean",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": true,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": undefined,
            },
            Immutable.Record {
              "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "int changed to participant",
              "PHI": undefined,
              "propertyId": 2,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                "display": "Subject/Participant",
                "name": "ParticipantId",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Integer",
                  "name": "int",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                  "alternateRangeURI": "xsd:int",
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "int changed to participant",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
              },
              "updatedField": true,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": undefined,
            },
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "flag changed to attachment",
              "PHI": undefined,
              "propertyId": 3,
              "propertyURI": "test",
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": "http://www.labkey.org/exp/xml#attachment",
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Attachment",
                "name": "attachment",
                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": "http://www.labkey.org/exp/xml#flag",
                "dataType": Immutable.Record {
                  "conceptURI": "http://www.labkey.org/exp/xml#flag",
                  "display": "Flag",
                  "name": "flag",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "flag changed to attachment",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              },
              "updatedField": true,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": undefined,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "disableMvEnabled": false,
          "hideAddFieldsButton": false,
          "hideConditionalFormatting": false,
          "hideFilePropertyType": false,
          "hideImportData": false,
          "hideImportExport": false,
          "hideRequired": false,
          "hideStudyPropertyTypes": false,
          "hideTextOptions": false,
          "hideValidators": false,
          "isDragDisabled": false,
          "phiLevelDisabled": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": "update field types",
                "container": undefined,
                "description": "description",
                "domainURI": "test",
                "domainId": 1,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "newfieldname",
                    "PHI": undefined,
                    "propertyId": 0,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "fieldname",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": true,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "string changed to boolean",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "string changed to boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": true,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": undefined,
                  },
                  Immutable.Record {
                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "int changed to participant",
                    "PHI": undefined,
                    "propertyId": 2,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Integer",
                        "name": "int",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": "xsd:int",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "int changed to participant",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": true,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": undefined,
                  },
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "flag changed to attachment",
                    "PHI": undefined,
                    "propertyId": 3,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://www.labkey.org/exp/xml#flag",
                        "display": "Flag",
                        "name": "flag",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "flag changed to attachment",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": true,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": undefined,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                headerDetails="4 Fields Defined"
                id="domainpropertiesrow-update-field-types-hdr"
                isValid={true}
                title="update field types"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domainpropertiesrow-update-field-types-hdr"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    update field types
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                      <ActionButton
                        buttonClass="domain-toolbar-export-btn"
                        containerClass="container--toolbar-button"
                        disabled={false}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-export-btn"
                          >
                            <span
                              className="container--action-button btn btn-default"
                              onClick={[Function]}
                            >
                              <i
                                className="fa fa-download domain-toolbar-export-btn-icon"
                              />
                               
                              Export
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <DragDropContext
                    onBeforeDragStart={[Function]}
                    onDragEnd={[Function]}
                  >
                    <ErrorBoundary>
                      <App
                        contextId="5"
                        dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                        onBeforeDragStart={[Function]}
                        onDragEnd={[Function]}
                        setCallbacks={[Function]}
                      >
                        <Provider
                          context={
                            {
                              "$$typeof": Symbol(react.context),
                              "Consumer": {
                                "$$typeof": Symbol(react.context),
                                "_calculateChangedBits": null,
                                "_context": [Circular],
                              },
                              "Provider": {
                                "$$typeof": Symbol(react.provider),
                                "_context": [Circular],
                              },
                              "_calculateChangedBits": null,
                              "_currentRenderer": {},
                              "_currentRenderer2": null,
                              "_currentValue": null,
                              "_currentValue2": null,
                              "_threadCount": 0,
                            }
                          }
                          store={
                            {
                              "@@observable": [Function],
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                            }
                          }
                        >
                          <div
                            className="domain-field-row domain-row-border-default domain-floating-hdr"
                          >
                            <Alert
                              bsStyle="info"
                            />
                            <div
                              className="row"
                            >
                              <div
                                className="domain-field-header"
                              >
                                0
                                 
                                fields
                                 selected
                                <button
                                  className="domain-panel-header-clear-all btn btn-default"
                                  disabled={true}
                                  onClick={[Function]}
                                  type="button"
                                >
                                  Clear
                                </button>
                              </div>
                            </div>
                            <div
                              className="row domain-row-container"
                            >
                              <div
                                className="domain-row-handle"
                              />
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domain-select-all-checkbox"
                                  inline={false}
                                  name="domain-select-all-checkbox"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domain-select-all-checkbox"
                                        name="domain-select-all-checkbox"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                              </div>
                              <div>
                                <div
                                  className="col-xs-3"
                                >
                                  <b>
                                    Name *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-2"
                                >
                                  <b>
                                    Data Type *
                                  </b>
                                </div>
                                <div
                                  className="col-xs-1"
                                >
                                  <b>
                                    Required
                                  </b>
                                </div>
                                <div
                                  className="col-xs-6"
                                >
                                  <b>
                                    Details
                                  </b>
                                </div>
                              </div>
                            </div>
                          </div>
                          <Connect(Droppable)
                            direction="vertical"
                            droppableId="domain-form-droppable"
                            getContainerForClone={[Function]}
                            ignoreContainerClipping={false}
                            isCombineEnabled={false}
                            isDropDisabled={false}
                            mode="standard"
                            renderClone={null}
                            type="DEFAULT"
                          >
                            <Droppable
                              direction="vertical"
                              droppableId="domain-form-droppable"
                              getContainerForClone={[Function]}
                              ignoreContainerClipping={false}
                              isCombineEnabled={false}
                              isDropDisabled={false}
                              mode="standard"
                              placeholder={null}
                              renderClone={null}
                              shouldAnimatePlaceholder={false}
                              snapshot={
                                {
                                  "draggingFromThisWith": null,
                                  "draggingOverWith": null,
                                  "isDraggingOver": false,
                                  "isUsingPlaceholder": false,
                                }
                              }
                              type="DEFAULT"
                              updateViewportMaxScroll={[Function]}
                              useClone={null}
                            >
                              <div
                                data-rbd-droppable-context-id="5"
                                data-rbd-droppable-id="domain-form-droppable"
                              >
                                <form
                                  className="domain-form"
                                >
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "newfieldname",
                                        "PHI": undefined,
                                        "propertyId": 0,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "fieldname",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": true,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": false,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={0}
                                    isDragDisabled={false}
                                    key="domain-row-key-0"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                      index={0}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                        index={0}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                          index={0}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                            dropAnimationFinished={[Function]}
                                            index={0}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="5"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={0}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-0"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-5-hidden-text-40"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="5"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-0"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-0"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-0"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-0"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-0"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-0"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="newfieldname"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-0"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="newfieldname"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-0"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="int"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-0"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="int"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-0"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-0"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-0"
                                                    >
                                                      Updated
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-0"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-0"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "newfieldname",
                                                          "PHI": undefined,
                                                          "propertyId": 0,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Integer",
                                                            "name": "int",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": "xsd:int",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "fieldname",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": true,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": false,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={0}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NumericFieldOptions
                                                              appPropertiesOnly={false}
                                                              domainIndex={0}
                                                              index={0}
                                                              label="Integer Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                              scannable={false}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Integer Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Integer Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            <p>
                                                                              To control how a number value is displayed, provide a string format compatible with the Java
                                                                               
                                                                              <Memo
                                                                                urlSuffix="java/text/DecimalFormat.html"
                                                                              >
                                                                                DecimalFormat
                                                                              </Memo>
                                                                               class.
                                                                            </p>
                                                                            <p>
                                                                              Learn more about using 
                                                                              <HelpLink
                                                                                topic="dateFormats#number"
                                                                              >
                                                                                Number formats
                                                                              </HelpLink>
                                                                               in LabKey.
                                                                            </p>
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Format for Numbers"
                                                                      >
                                                                        Format for 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Numbers
                                                                          <LabelHelpTip
                                                                            title="Format for Numbers"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip137"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Numbers"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    <p>
                                                                                      To control how a number value is displayed, provide a string format compatible with the Java
                                                                                       
                                                                                      <Memo
                                                                                        urlSuffix="java/text/DecimalFormat.html"
                                                                                      >
                                                                                        DecimalFormat
                                                                                      </Memo>
                                                                                       class.
                                                                                    </p>
                                                                                    <p>
                                                                                      Learn more about using 
                                                                                      <HelpLink
                                                                                        topic="dateFormats#number"
                                                                                      >
                                                                                        Number formats
                                                                                      </HelpLink>
                                                                                       in LabKey.
                                                                                    </p>
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Default Scale Type
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-0"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-0"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-defaultScale-0-0"
                                                                      name="domainpropertiesrow-defaultScale"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-defaultScale-0-0"
                                                                        name="domainpropertiesrow-defaultScale"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LINEAR-0-0"
                                                                          value="LINEAR"
                                                                        >
                                                                          Linear
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-defaultScaleoption-LOG-0-0"
                                                                          value="LOG"
                                                                        >
                                                                          Log
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                                <Memo()
                                                                  appPropertiesOnly={false}
                                                                  domainIndex={0}
                                                                  index={0}
                                                                  label="Integer Options"
                                                                  lockType="NotLocked"
                                                                  onChange={[Function]}
                                                                  scannable={false}
                                                                />
                                                              </div>
                                                            </NumericFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "newfieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-0"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-0"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-0"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-0"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip138"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-0"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-0"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip139"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-0"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-0"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "newfieldname",
                                                                  "PHI": undefined,
                                                                  "propertyId": 0,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Integer",
                                                                    "name": "int",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": "xsd:int",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "fieldname",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": false,
                                                                }
                                                              }
                                                              index={0}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip140"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-0"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RangeValidatorHelpText />}
                                                                          label="Create Range Validator"
                                                                        >
                                                                          Create Range 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Range Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip141"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Range Validator"
                                                                                  >
                                                                                    <RangeValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-rangeValidator-0-0"
                                                                          name="domainpropertiesrow-rangeValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Range
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "string changed to boolean",
                                        "PHI": undefined,
                                        "propertyId": 1,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Text",
                                            "name": "string",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": "xsd:string",
                                            "shortDisplay": "String",
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "string changed to boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": true,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": undefined,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={1}
                                    isDragDisabled={false}
                                    key="domain-row-key-1"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-1"
                                      index={1}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-1"
                                        index={1}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-1"
                                          index={1}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-1"
                                            dropAnimationFinished={[Function]}
                                            index={1}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="5"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={1}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-1"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-5-hidden-text-40"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="5"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-1"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-1"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-1"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-1"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-1"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-1"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-1"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="string changed to boolean"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-1"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="string changed to boolean"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-1"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="boolean"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-1"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="boolean"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-1"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-1"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-1"
                                                    >
                                                      Updated
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-1"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-1"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "string changed to boolean",
                                                          "PHI": undefined,
                                                          "propertyId": 1,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Boolean",
                                                            "name": "boolean",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                            "alternateRangeURI": "xsd:boolean",
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Text",
                                                              "name": "string",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": "xsd:string",
                                                              "shortDisplay": "String",
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "string changed to boolean",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": true,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": undefined,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={1}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <BooleanFieldOptions
                                                              domainIndex={0}
                                                              index={1}
                                                              label="Boolean Field Options"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      title="Boolean Field Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Boolean Field Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <div>
                                                                            Use boolean formatting to specify the text to show when a value is true and false. Text can optionally be shown for null values.
                                                                            <br />
                                                                            <br />
                                                                            For example, "Yes;No;Blank" would output "Yes" if the value is true, "No" if false, and "Blank" for a null value.
                                                                          </div>
                                                                        }
                                                                        label="Format for Boolean Values"
                                                                      >
                                                                        Format for Boolean 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Values
                                                                          <LabelHelpTip
                                                                            title="Format for Boolean Values"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip142"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Format for Boolean Values"
                                                                                >
                                                                                  <div>
                                                                                    Use boolean formatting to specify the text to show when a value is true and false. Text can optionally be shown for null values.
                                                                                    <br />
                                                                                    <br />
                                                                                    For example, "Yes;No;Blank" would output "Yes" if the value is true, "No" if false, and "Blank" for a null value.
                                                                                  </div>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-1"
                                                                      name="domainpropertiesrow-scale"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-1"
                                                                        name="domainpropertiesrow-scale"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </BooleanFieldOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string changed to boolean",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Boolean",
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": "xsd:boolean",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string changed to boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-1"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-1"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-1"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-1"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip143"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-1"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-1"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip144"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-1"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-1"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "string changed to boolean",
                                                                  "PHI": undefined,
                                                                  "propertyId": 1,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Boolean",
                                                                    "name": "boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                                    "alternateRangeURI": "xsd:boolean",
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Text",
                                                                      "name": "string",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": "xsd:string",
                                                                      "shortDisplay": "String",
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "string changed to boolean",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={1}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip145"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-1"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "int changed to participant",
                                        "PHI": undefined,
                                        "propertyId": 2,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": undefined,
                                          "dataType": Immutable.Record {
                                            "conceptURI": undefined,
                                            "display": "Integer",
                                            "name": "int",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                            "alternateRangeURI": "xsd:int",
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "int changed to participant",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        },
                                        "updatedField": true,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": undefined,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={2}
                                    isDragDisabled={false}
                                    key="domain-row-key-2"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-2"
                                      index={2}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-2"
                                        index={2}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-2"
                                          index={2}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-2"
                                            dropAnimationFinished={[Function]}
                                            index={2}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="5"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={2}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-2"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-5-hidden-text-40"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="5"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-2"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-2"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-2"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-2"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-2"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-2"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-2"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="int changed to participant"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-2"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="int changed to participant"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-2"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="ParticipantId"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-2"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="ParticipantId"
                                                          >
                                                            <option
                                                              key="double"
                                                              value="double"
                                                            >
                                                              Decimal (floating point)
                                                            </option>
                                                            <option
                                                              key="int"
                                                              value="int"
                                                            >
                                                              Integer
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="sample"
                                                              value="sample"
                                                            >
                                                              Sample
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="users"
                                                              value="users"
                                                            >
                                                              User
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-2"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-2"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-2"
                                                    >
                                                      Updated
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-2"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-2"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "int changed to participant",
                                                          "PHI": undefined,
                                                          "propertyId": 2,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                            "display": "Subject/Participant",
                                                            "name": "ParticipantId",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": undefined,
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": undefined,
                                                              "display": "Integer",
                                                              "name": "int",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                              "alternateRangeURI": "xsd:int",
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "int changed to participant",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          },
                                                          "updatedField": true,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": undefined,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={2}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          />
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "int changed to participant",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "display": "Subject/Participant",
                                                                    "name": "ParticipantId",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "int changed to participant",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-2"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-2"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-2"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-2"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip146"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-2"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-2"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip147"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-2"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-2"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "int changed to participant",
                                                                  "PHI": undefined,
                                                                  "propertyId": 2,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                                    "display": "Subject/Participant",
                                                                    "name": "ParticipantId",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": undefined,
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": undefined,
                                                                      "display": "Integer",
                                                                      "name": "int",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                      "alternateRangeURI": "xsd:int",
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "int changed to participant",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={2}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting and Validation Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting and Validation Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip148"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-2"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<RegexValidatorHelpText />}
                                                                          label="Create Regular Expression Validator"
                                                                        >
                                                                          Create Regular Expression 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Validator
                                                                            <LabelHelpTip
                                                                              title="Create Regular Expression Validator"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip149"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Regular Expression Validator"
                                                                                  >
                                                                                    <RegexValidatorHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-regexValidator-0-2"
                                                                          name="domainpropertiesrow-regexValidator"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Regex
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <DomainRow
                                    allowUniqueConstraintProperties={false}
                                    appPropertiesOnly={false}
                                    availableTypes={
                                      Immutable.List [
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Multi-Line Text",
                                          "name": "multiLine",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Boolean",
                                          "name": "boolean",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                          "alternateRangeURI": "xsd:boolean",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Integer",
                                          "name": "int",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": "xsd:int",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date",
                                          "name": "date",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Time",
                                          "name": "time",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "display": "Flag",
                                          "name": "flag",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "User",
                                          "name": "users",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": "core",
                                          "lookupQuery": "users",
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": undefined,
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                          "display": "Text Choice",
                                          "name": "textChoice",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                      ]
                                    }
                                    defaultValueOptions={Immutable.List []}
                                    domainFormDisplayOptions={
                                      {
                                        "disableMvEnabled": false,
                                        "hideAddFieldsButton": false,
                                        "hideConditionalFormatting": false,
                                        "hideFilePropertyType": false,
                                        "hideImportData": false,
                                        "hideImportExport": false,
                                        "hideRequired": false,
                                        "hideStudyPropertyTypes": false,
                                        "hideTextOptions": false,
                                        "hideValidators": false,
                                        "isDragDisabled": false,
                                        "phiLevelDisabled": false,
                                      }
                                    }
                                    domainId={1}
                                    domainIndex={0}
                                    dragging={false}
                                    expandTransition={300}
                                    expanded={false}
                                    field={
                                      Immutable.Record {
                                        "conceptURI": undefined,
                                        "conditionalFormats": Immutable.List [],
                                        "defaultScale": undefined,
                                        "defaultValueType": undefined,
                                        "defaultValue": undefined,
                                        "defaultDisplayValue": undefined,
                                        "description": undefined,
                                        "dimension": undefined,
                                        "excludeFromShifting": false,
                                        "format": undefined,
                                        "hidden": false,
                                        "importAliases": undefined,
                                        "label": undefined,
                                        "lookupContainer": undefined,
                                        "lookupQuery": undefined,
                                        "lookupSchema": undefined,
                                        "lookupValidator": undefined,
                                        "lookupIsValid": undefined,
                                        "measure": undefined,
                                        "mvEnabled": false,
                                        "name": "flag changed to attachment",
                                        "PHI": undefined,
                                        "propertyId": 3,
                                        "propertyURI": "test",
                                        "propertyValidators": Immutable.List [],
                                        "rangeValidators": Immutable.List [],
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "regexValidators": Immutable.List [],
                                        "textChoiceValidator": undefined,
                                        "recommendedVariable": false,
                                        "uniqueConstraint": false,
                                        "required": false,
                                        "scale": 4000,
                                        "URL": undefined,
                                        "shownInDetailsView": true,
                                        "shownInInsertView": true,
                                        "shownInUpdateView": true,
                                        "visible": true,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Attachment",
                                          "name": "attachment",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "lookupQueryValue": undefined,
                                        "lookupType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Lookup",
                                          "name": "lookup",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "original": {
                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                          "dataType": Immutable.Record {
                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                            "display": "Flag",
                                            "name": "flag",
                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                            "alternateRangeURI": undefined,
                                            "shortDisplay": undefined,
                                            "lookupSchema": undefined,
                                            "lookupQuery": undefined,
                                          },
                                          "name": "flag changed to attachment",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        },
                                        "updatedField": true,
                                        "isPrimaryKey": false,
                                        "lockType": "NotLocked",
                                        "wrappedColumnName": undefined,
                                        "disablePhiLevel": false,
                                        "lockExistingField": false,
                                        "sourceOntology": undefined,
                                        "conceptSubtree": undefined,
                                        "conceptLabelColumn": undefined,
                                        "conceptImportColumn": undefined,
                                        "principalConceptCode": undefined,
                                        "derivationDataScope": undefined,
                                        "selected": false,
                                        "scannable": undefined,
                                      }
                                    }
                                    fieldDetailsInfo={{}}
                                    getDomainFields={[Function]}
                                    helpNoun="field designer"
                                    index={3}
                                    isDragDisabled={false}
                                    key="domain-row-key-3"
                                    maxPhiLevel="Restricted"
                                    onChange={[Function]}
                                    onDelete={[Function]}
                                    onExpand={[Function]}
                                    showDefaultValueSettings={false}
                                  >
                                    <PublicDraggable
                                      draggableId="domainpropertiesrow-domaindrag-0-3"
                                      index={3}
                                      isDragDisabled={false}
                                    >
                                      <PrivateDraggable
                                        canDragInteractiveElements={false}
                                        draggableId="domainpropertiesrow-domaindrag-0-3"
                                        index={3}
                                        isClone={false}
                                        isDragDisabled={false}
                                        isEnabled={true}
                                        shouldRespectForcePress={false}
                                      >
                                        <Connect(Draggable)
                                          canDragInteractiveElements={false}
                                          draggableId="domainpropertiesrow-domaindrag-0-3"
                                          index={3}
                                          isClone={false}
                                          isDragDisabled={false}
                                          isEnabled={true}
                                          shouldRespectForcePress={false}
                                        >
                                          <Draggable
                                            canDragInteractiveElements={false}
                                            draggableId="domainpropertiesrow-domaindrag-0-3"
                                            dropAnimationFinished={[Function]}
                                            index={3}
                                            isClone={false}
                                            isDragDisabled={false}
                                            isEnabled={true}
                                            mapped={
                                              {
                                                "combineTargetFor": null,
                                                "offset": {
                                                  "x": 0,
                                                  "y": 0,
                                                },
                                                "shouldAnimateDisplacement": true,
                                                "snapshot": {
                                                  "combineTargetFor": null,
                                                  "combineWith": null,
                                                  "draggingOver": null,
                                                  "dropAnimation": null,
                                                  "isClone": false,
                                                  "isDragging": false,
                                                  "isDropAnimating": false,
                                                  "mode": null,
                                                },
                                                "type": "SECONDARY",
                                              }
                                            }
                                            shouldRespectForcePress={false}
                                          >
                                            <div
                                              className="domain-field-row domain-row-border-default"
                                              data-rbd-draggable-context-id="5"
                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                              onTransitionEnd={null}
                                              style={
                                                {
                                                  "transform": null,
                                                  "transition": null,
                                                }
                                              }
                                              tabIndex={3}
                                            >
                                              <div
                                                className="row domain-row-container"
                                                key="domainpropertiesrow-domainrow-0-3"
                                              >
                                                <div
                                                  aria-describedby="rbd-hidden-text-5-hidden-text-40"
                                                  className="domain-row-handle"
                                                  data-rbd-drag-handle-context-id="5"
                                                  data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-3"
                                                  draggable={false}
                                                  onDragStart={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <DragDropHandle>
                                                    <div
                                                      className="drag-drop-handle"
                                                    >
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                      <span
                                                        className="fa fa-ellipsis-v"
                                                      />
                                                    </div>
                                                  </DragDropHandle>
                                                </div>
                                                <div
                                                  className="domain-row-action-section"
                                                >
                                                  <Checkbox
                                                    bsClass="checkbox"
                                                    checked={false}
                                                    className="domain-field-check-icon"
                                                    disabled={false}
                                                    id="domainpropertiesrow-selected-0-3"
                                                    inline={false}
                                                    name="domainpropertiesrow-selected"
                                                    onChange={[Function]}
                                                    title=""
                                                  >
                                                    <div
                                                      className="domain-field-check-icon checkbox"
                                                    >
                                                      <label
                                                        title=""
                                                      >
                                                        <input
                                                          checked={false}
                                                          disabled={false}
                                                          id="domainpropertiesrow-selected-0-3"
                                                          name="domainpropertiesrow-selected"
                                                          onChange={[Function]}
                                                          type="checkbox"
                                                        />
                                                      </label>
                                                    </div>
                                                  </Checkbox>
                                                  <FieldExpansionToggle
                                                    cls="domain-field-expand-icon"
                                                    collapsedTitle="Show additional field properties"
                                                    expanded={false}
                                                    expandedTitle="Hide additional field properties"
                                                    id="domainpropertiesrow-expand-0-3"
                                                    onClick={[Function]}
                                                  >
                                                    <div
                                                      className="field-icon domain-field-expand-icon"
                                                      id="domainpropertiesrow-expand-0-3"
                                                      onClick={[Function]}
                                                      title="Show additional field properties"
                                                    >
                                                      <span
                                                        className="fa fa-lg fa-chevron-right"
                                                      />
                                                    </div>
                                                  </FieldExpansionToggle>
                                                </div>
                                                <div
                                                  className="domain-row-main"
                                                >
                                                  <div
                                                    className="col-xs-6 domain-row-base-fields domain-row-base-fields-position"
                                                  >
                                                    <div
                                                      id="domainpropertiesrow-row-0-3"
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-name-0-3"
                                                          name="domainpropertiesrow-name"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value="flag changed to attachment"
                                                        >
                                                          <input
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-name-0-3"
                                                            name="domainpropertiesrow-name"
                                                            onChange={[Function]}
                                                            type="text"
                                                            value="flag changed to attachment"
                                                          />
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <FormControl
                                                          bsClass="form-control"
                                                          componentClass="select"
                                                          disabled={false}
                                                          id="domainpropertiesrow-type-0-3"
                                                          name="domainpropertiesrow-type"
                                                          onChange={[Function]}
                                                          value="attachment"
                                                        >
                                                          <select
                                                            className="form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-type-0-3"
                                                            name="domainpropertiesrow-type"
                                                            onChange={[Function]}
                                                            value="attachment"
                                                          >
                                                            <option
                                                              key="flag"
                                                              value="flag"
                                                            >
                                                              Flag
                                                            </option>
                                                            <option
                                                              key="lookup"
                                                              value="lookup"
                                                            >
                                                              Lookup
                                                            </option>
                                                            <option
                                                              key="multiLine"
                                                              value="multiLine"
                                                            >
                                                              Multi-Line Text
                                                            </option>
                                                            <option
                                                              key="ParticipantId"
                                                              value="ParticipantId"
                                                            >
                                                              Subject/Participant
                                                            </option>
                                                            <option
                                                              key="string"
                                                              value="string"
                                                            >
                                                              Text
                                                            </option>
                                                            <option
                                                              key="textChoice"
                                                              value="textChoice"
                                                            >
                                                              Text Choice
                                                            </option>
                                                          </select>
                                                        </FormControl>
                                                      </div>
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <div
                                                          className="domain-field-checkbox-container"
                                                        >
                                                          <Checkbox
                                                            bsClass="checkbox"
                                                            checked={false}
                                                            className="domain-field-checkbox"
                                                            disabled={false}
                                                            id="domainpropertiesrow-required-0-3"
                                                            inline={false}
                                                            name="domainpropertiesrow-required"
                                                            onChange={[Function]}
                                                            title=""
                                                          >
                                                            <div
                                                              className="domain-field-checkbox checkbox"
                                                            >
                                                              <label
                                                                title=""
                                                              >
                                                                <input
                                                                  checked={false}
                                                                  disabled={false}
                                                                  id="domainpropertiesrow-required-0-3"
                                                                  name="domainpropertiesrow-required"
                                                                  onChange={[Function]}
                                                                  type="checkbox"
                                                                />
                                                              </label>
                                                            </div>
                                                          </Checkbox>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </div>
                                                  <div
                                                    className="col-xs-6 domain-row-details-container"
                                                  >
                                                    <div
                                                      className="domain-field-details"
                                                      id="domainpropertiesrow-details-0-3"
                                                    >
                                                      Updated
                                                    </div>
                                                    <div
                                                      className="domain-field-buttons"
                                                    >
                                                      <Memo()
                                                        iconCls="domain-field-delete-icon"
                                                        id="domainpropertiesrow-delete-0-3"
                                                        onDelete={[Function]}
                                                        title="Remove field"
                                                      >
                                                        <span
                                                          className="field-icon"
                                                          id="domainpropertiesrow-delete-0-3"
                                                          onClick={[Function]}
                                                          title="Remove field"
                                                        >
                                                          <span
                                                            className="fa fa-times-circle domain-field-delete-icon"
                                                          />
                                                        </span>
                                                      </Memo()>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                              <Collapse
                                                appear={false}
                                                dimension="height"
                                                getDimensionValue={[Function]}
                                                in={false}
                                                mountOnEnter={false}
                                                onExited={[Function]}
                                                onExiting={[Function]}
                                                timeout={300}
                                                unmountOnExit={false}
                                              >
                                                <Transition
                                                  appear={false}
                                                  aria-expanded={null}
                                                  enter={true}
                                                  exit={true}
                                                  in={false}
                                                  mountOnEnter={false}
                                                  onEnter={[Function]}
                                                  onEntered={[Function]}
                                                  onEntering={[Function]}
                                                  onExit={[Function]}
                                                  onExited={[Function]}
                                                  onExiting={[Function]}
                                                  timeout={300}
                                                  unmountOnExit={false}
                                                >
                                                  <div
                                                    aria-expanded={null}
                                                    className="collapse"
                                                  >
                                                    <DomainRowExpandedOptions
                                                      appPropertiesOnly={false}
                                                      domainFormDisplayOptions={
                                                        {
                                                          "disableMvEnabled": false,
                                                          "hideAddFieldsButton": false,
                                                          "hideConditionalFormatting": false,
                                                          "hideFilePropertyType": false,
                                                          "hideImportData": false,
                                                          "hideImportExport": false,
                                                          "hideRequired": false,
                                                          "hideStudyPropertyTypes": false,
                                                          "hideTextOptions": false,
                                                          "hideValidators": false,
                                                          "isDragDisabled": false,
                                                          "phiLevelDisabled": false,
                                                        }
                                                      }
                                                      domainIndex={0}
                                                      field={
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "conditionalFormats": Immutable.List [],
                                                          "defaultScale": undefined,
                                                          "defaultValueType": undefined,
                                                          "defaultValue": undefined,
                                                          "defaultDisplayValue": undefined,
                                                          "description": undefined,
                                                          "dimension": undefined,
                                                          "excludeFromShifting": false,
                                                          "format": undefined,
                                                          "hidden": false,
                                                          "importAliases": undefined,
                                                          "label": undefined,
                                                          "lookupContainer": undefined,
                                                          "lookupQuery": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupValidator": undefined,
                                                          "lookupIsValid": undefined,
                                                          "measure": undefined,
                                                          "mvEnabled": false,
                                                          "name": "flag changed to attachment",
                                                          "PHI": undefined,
                                                          "propertyId": 3,
                                                          "propertyURI": "test",
                                                          "propertyValidators": Immutable.List [],
                                                          "rangeValidators": Immutable.List [],
                                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                          "regexValidators": Immutable.List [],
                                                          "textChoiceValidator": undefined,
                                                          "recommendedVariable": false,
                                                          "uniqueConstraint": false,
                                                          "required": false,
                                                          "scale": 4000,
                                                          "URL": undefined,
                                                          "shownInDetailsView": true,
                                                          "shownInInsertView": true,
                                                          "shownInUpdateView": true,
                                                          "visible": true,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Attachment",
                                                            "name": "attachment",
                                                            "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "lookupQueryValue": undefined,
                                                          "lookupType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Lookup",
                                                            "name": "lookup",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": undefined,
                                                            "shortDisplay": undefined,
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "original": {
                                                            "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                            "dataType": Immutable.Record {
                                                              "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                              "display": "Flag",
                                                              "name": "flag",
                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                              "alternateRangeURI": undefined,
                                                              "shortDisplay": undefined,
                                                              "lookupSchema": undefined,
                                                              "lookupQuery": undefined,
                                                            },
                                                            "name": "flag changed to attachment",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          },
                                                          "updatedField": true,
                                                          "isPrimaryKey": false,
                                                          "lockType": "NotLocked",
                                                          "wrappedColumnName": undefined,
                                                          "disablePhiLevel": false,
                                                          "lockExistingField": false,
                                                          "sourceOntology": undefined,
                                                          "conceptSubtree": undefined,
                                                          "conceptLabelColumn": undefined,
                                                          "conceptImportColumn": undefined,
                                                          "principalConceptCode": undefined,
                                                          "derivationDataScope": undefined,
                                                          "selected": false,
                                                          "scannable": undefined,
                                                        }
                                                      }
                                                      getDomainFields={[Function]}
                                                      index={3}
                                                      onChange={[Function]}
                                                      onMultiChange={[Function]}
                                                      showingModal={[Function]}
                                                    >
                                                      <div
                                                        className="domain-row-container"
                                                      >
                                                        <div
                                                          className="domain-row-container-expand-spacer"
                                                        />
                                                        <div
                                                          className="domain-row-container-expanded"
                                                        >
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <Memo()
                                                              domainIndex={0}
                                                              index={3}
                                                              label="Attachment"
                                                              lockType="NotLocked"
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      helpTipBody={
                                                                        <React.Fragment>
                                                                          <p>
                                                                            Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                          </p>
                                                                        </React.Fragment>
                                                                      }
                                                                      title="Attachment Behavior"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading"
                                                                      >
                                                                        Attachment Behavior
                                                                        <LabelHelpTip
                                                                          title="Attachment Behavior"
                                                                        >
                                                                          <OverlayTrigger
                                                                            id="label-help-tip150"
                                                                            overlay={
                                                                              <Popover
                                                                                id="label-help-tip-popover"
                                                                                title="Attachment Behavior"
                                                                              >
                                                                                <React.Fragment>
                                                                                  <p>
                                                                                    Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                                  </p>
                                                                                </React.Fragment>
                                                                              </Popover>
                                                                            }
                                                                          >
                                                                            <div
                                                                              className="overlay-trigger"
                                                                              onClick={[Function]}
                                                                              onMouseEnter={[Function]}
                                                                              onMouseLeave={[Function]}
                                                                            >
                                                                              <span
                                                                                className="label-help-target"
                                                                              >
                                                                                <span
                                                                                  className="label-help-icon fa fa-question-circle"
                                                                                />
                                                                              </span>
                                                                            </div>
                                                                          </OverlayTrigger>
                                                                        </LabelHelpTip>
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row domain-field-label"
                                                                >
                                                                  <div
                                                                    className="col-xs-2"
                                                                  >
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="select"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-format-0-3"
                                                                      name="domainpropertiesrow-format"
                                                                      onChange={[Function]}
                                                                    >
                                                                      <select
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-format-0-3"
                                                                        name="domainpropertiesrow-format"
                                                                        onChange={[Function]}
                                                                      >
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-inline-0-3"
                                                                          value="inline"
                                                                        >
                                                                          Show Attachment in Browser
                                                                        </option>
                                                                        <option
                                                                          key="domainpropertiesrow-formatoption-attachment-0-3"
                                                                          value="attachment"
                                                                        >
                                                                          Download Attachment
                                                                        </option>
                                                                      </select>
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </Memo()>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <NameAndLinkingOptions
                                                              appPropertiesOnly={false}
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "flag changed to attachment",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Attachment",
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "flag changed to attachment",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Name and Linking Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Name and Linking Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-5"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Description
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="textarea"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-description-0-3"
                                                                      name="domainpropertiesrow-description"
                                                                      onChange={[Function]}
                                                                      rows={4}
                                                                      value=""
                                                                    >
                                                                      <textarea
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-description-0-3"
                                                                        name="domainpropertiesrow-description"
                                                                        onChange={[Function]}
                                                                        rows={4}
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-3"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      Label
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-label-0-3"
                                                                      name="domainpropertiesrow-label"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-label-0-3"
                                                                        name="domainpropertiesrow-label"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Define alternate field names to be used when importing from a file.
                                                                            <br />
                                                                            <br />
                                                                            Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                          </React.Fragment>
                                                                        }
                                                                        label="Import Aliases"
                                                                      >
                                                                        Import 
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          Aliases
                                                                          <LabelHelpTip
                                                                            title="Import Aliases"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip151"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="Import Aliases"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Define alternate field names to be used when importing from a file.
                                                                                    <br />
                                                                                    <br />
                                                                                    Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-importAliases-0-3"
                                                                      name="domainpropertiesrow-importAliases"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-importAliases-0-3"
                                                                        name="domainpropertiesrow-importAliases"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                  <div
                                                                    className="col-xs-4"
                                                                  >
                                                                    <div
                                                                      className="domain-field-label"
                                                                    >
                                                                      <DomainFieldLabel
                                                                        helpTipBody={
                                                                          <React.Fragment>
                                                                            Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                            <br />
                                                                            <br />
                                                                            Learn more about using 
                                                                            <HelpLink
                                                                              topic="urlEncoding"
                                                                            >
                                                                              URL Formatting Options
                                                                            </HelpLink>
                                                                            .
                                                                          </React.Fragment>
                                                                        }
                                                                        label="URL"
                                                                      >
                                                                        <span
                                                                          className="domain-no-wrap"
                                                                        >
                                                                          URL
                                                                          <LabelHelpTip
                                                                            title="URL"
                                                                          >
                                                                            <OverlayTrigger
                                                                              id="label-help-tip152"
                                                                              overlay={
                                                                                <Popover
                                                                                  id="label-help-tip-popover"
                                                                                  title="URL"
                                                                                >
                                                                                  <React.Fragment>
                                                                                    Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                    <br />
                                                                                    <br />
                                                                                    Learn more about using 
                                                                                    <HelpLink
                                                                                      topic="urlEncoding"
                                                                                    >
                                                                                      URL Formatting Options
                                                                                    </HelpLink>
                                                                                    .
                                                                                  </React.Fragment>
                                                                                </Popover>
                                                                              }
                                                                            >
                                                                              <div
                                                                                className="overlay-trigger"
                                                                                onClick={[Function]}
                                                                                onMouseEnter={[Function]}
                                                                                onMouseLeave={[Function]}
                                                                              >
                                                                                <span
                                                                                  className="label-help-target"
                                                                                >
                                                                                  <span
                                                                                    className="label-help-icon fa fa-question-circle"
                                                                                  />
                                                                                </span>
                                                                              </div>
                                                                            </OverlayTrigger>
                                                                          </LabelHelpTip>
                                                                        </span>
                                                                      </DomainFieldLabel>
                                                                    </div>
                                                                    <FormControl
                                                                      bsClass="form-control"
                                                                      componentClass="input"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-URL-0-3"
                                                                      name="domainpropertiesrow-URL"
                                                                      onChange={[Function]}
                                                                      type="text"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        className="form-control"
                                                                        disabled={false}
                                                                        id="domainpropertiesrow-URL-0-3"
                                                                        name="domainpropertiesrow-URL"
                                                                        onChange={[Function]}
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                    </FormControl>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </NameAndLinkingOptions>
                                                          </div>
                                                          <div
                                                            className="col-xs-12"
                                                          >
                                                            <ConditionalFormattingAndValidation
                                                              domainFormDisplayOptions={
                                                                {
                                                                  "disableMvEnabled": false,
                                                                  "hideAddFieldsButton": false,
                                                                  "hideConditionalFormatting": false,
                                                                  "hideFilePropertyType": false,
                                                                  "hideImportData": false,
                                                                  "hideImportExport": false,
                                                                  "hideRequired": false,
                                                                  "hideStudyPropertyTypes": false,
                                                                  "hideTextOptions": false,
                                                                  "hideValidators": false,
                                                                  "isDragDisabled": false,
                                                                  "phiLevelDisabled": false,
                                                                }
                                                              }
                                                              domainIndex={0}
                                                              field={
                                                                Immutable.Record {
                                                                  "conceptURI": undefined,
                                                                  "conditionalFormats": Immutable.List [],
                                                                  "defaultScale": undefined,
                                                                  "defaultValueType": undefined,
                                                                  "defaultValue": undefined,
                                                                  "defaultDisplayValue": undefined,
                                                                  "description": undefined,
                                                                  "dimension": undefined,
                                                                  "excludeFromShifting": false,
                                                                  "format": undefined,
                                                                  "hidden": false,
                                                                  "importAliases": undefined,
                                                                  "label": undefined,
                                                                  "lookupContainer": undefined,
                                                                  "lookupQuery": undefined,
                                                                  "lookupSchema": undefined,
                                                                  "lookupValidator": undefined,
                                                                  "lookupIsValid": undefined,
                                                                  "measure": undefined,
                                                                  "mvEnabled": false,
                                                                  "name": "flag changed to attachment",
                                                                  "PHI": undefined,
                                                                  "propertyId": 3,
                                                                  "propertyURI": "test",
                                                                  "propertyValidators": Immutable.List [],
                                                                  "rangeValidators": Immutable.List [],
                                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                  "regexValidators": Immutable.List [],
                                                                  "textChoiceValidator": undefined,
                                                                  "recommendedVariable": false,
                                                                  "uniqueConstraint": false,
                                                                  "required": false,
                                                                  "scale": 4000,
                                                                  "URL": undefined,
                                                                  "shownInDetailsView": true,
                                                                  "shownInInsertView": true,
                                                                  "shownInUpdateView": true,
                                                                  "visible": true,
                                                                  "dataType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Attachment",
                                                                    "name": "attachment",
                                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "lookupQueryValue": undefined,
                                                                  "lookupType": Immutable.Record {
                                                                    "conceptURI": undefined,
                                                                    "display": "Lookup",
                                                                    "name": "lookup",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                    "alternateRangeURI": undefined,
                                                                    "shortDisplay": undefined,
                                                                    "lookupSchema": undefined,
                                                                    "lookupQuery": undefined,
                                                                  },
                                                                  "original": {
                                                                    "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                    "dataType": Immutable.Record {
                                                                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                                      "display": "Flag",
                                                                      "name": "flag",
                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                      "alternateRangeURI": undefined,
                                                                      "shortDisplay": undefined,
                                                                      "lookupSchema": undefined,
                                                                      "lookupQuery": undefined,
                                                                    },
                                                                    "name": "flag changed to attachment",
                                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                  },
                                                                  "updatedField": true,
                                                                  "isPrimaryKey": false,
                                                                  "lockType": "NotLocked",
                                                                  "wrappedColumnName": undefined,
                                                                  "disablePhiLevel": false,
                                                                  "lockExistingField": false,
                                                                  "sourceOntology": undefined,
                                                                  "conceptSubtree": undefined,
                                                                  "conceptLabelColumn": undefined,
                                                                  "conceptImportColumn": undefined,
                                                                  "principalConceptCode": undefined,
                                                                  "derivationDataScope": undefined,
                                                                  "selected": false,
                                                                  "scannable": undefined,
                                                                }
                                                              }
                                                              index={3}
                                                              onChange={[Function]}
                                                              showingModal={[Function]}
                                                            >
                                                              <div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <SectionHeading
                                                                      cls="domain-field-section-hdr"
                                                                      title="Conditional Formatting Options"
                                                                    >
                                                                      <div
                                                                        className="domain-field-section-heading domain-field-section-hdr"
                                                                      >
                                                                        Conditional Formatting Options
                                                                      </div>
                                                                    </SectionHeading>
                                                                  </div>
                                                                </div>
                                                                <div
                                                                  className="row"
                                                                >
                                                                  <div
                                                                    className="col-xs-12"
                                                                  >
                                                                    <div
                                                                      className="domain-validation-group"
                                                                    >
                                                                      <div
                                                                        className="domain-field-label domain-no-wrap"
                                                                      >
                                                                        <DomainFieldLabel
                                                                          helpTipBody={<ConditionalFormatHelpText />}
                                                                          label="Create Conditional Format Criteria"
                                                                        >
                                                                          Create Conditional Format 
                                                                          <span
                                                                            className="domain-no-wrap"
                                                                          >
                                                                            Criteria
                                                                            <LabelHelpTip
                                                                              title="Create Conditional Format Criteria"
                                                                            >
                                                                              <OverlayTrigger
                                                                                id="label-help-tip153"
                                                                                overlay={
                                                                                  <Popover
                                                                                    id="label-help-tip-popover"
                                                                                    title="Create Conditional Format Criteria"
                                                                                  >
                                                                                    <ConditionalFormatHelpText />
                                                                                  </Popover>
                                                                                }
                                                                              >
                                                                                <div
                                                                                  className="overlay-trigger"
                                                                                  onClick={[Function]}
                                                                                  onMouseEnter={[Function]}
                                                                                  onMouseLeave={[Function]}
                                                                                >
                                                                                  <span
                                                                                    className="label-help-target"
                                                                                  >
                                                                                    <span
                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                    />
                                                                                  </span>
                                                                                </div>
                                                                              </OverlayTrigger>
                                                                            </LabelHelpTip>
                                                                          </span>
                                                                        </DomainFieldLabel>
                                                                      </div>
                                                                      <div>
                                                                        <button
                                                                          className="domain-validation-button btn btn-default"
                                                                          disabled={false}
                                                                          id="domainpropertiesrow-conditionalFormat-0-3"
                                                                          name="domainpropertiesrow-conditionalFormat"
                                                                          onClick={[Function]}
                                                                          type="button"
                                                                        >
                                                                          Add Format
                                                                        </button>
                                                                        <span
                                                                          className="domain-text-label"
                                                                        >
                                                                          None Set
                                                                        </span>
                                                                      </div>
                                                                    </div>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                            </ConditionalFormattingAndValidation>
                                                          </div>
                                                        </div>
                                                      </div>
                                                    </DomainRowExpandedOptions>
                                                  </div>
                                                </Transition>
                                              </Collapse>
                                            </div>
                                          </Draggable>
                                        </Connect(Draggable)>
                                      </PrivateDraggable>
                                    </PublicDraggable>
                                  </DomainRow>
                                  <AnimateInOut
                                    on={null}
                                    shouldAnimate={false}
                                  />
                                </form>
                              </div>
                            </Droppable>
                          </Connect(Droppable)>
                        </Provider>
                      </App>
                    </ErrorBoundary>
                  </DragDropContext>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm with empty domain form 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": undefined,
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideImportExport": true,
      "hideInferFromFile": true,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": undefined,
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideImportExport": true,
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": undefined,
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                id="domain-header"
                isValid={true}
                title="Fields"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domain-header"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    Fields
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className="domain-field-top-noBuffer"
                collapsible={false}
              >
                <div
                  className="domain-field-top-noBuffer panel-body"
                >
                  <div
                    className="row domain-field-toolbar"
                  >
                    <div
                      className="col-xs-4"
                    >
                      <AddEntityButton
                        buttonClass="domain-toolbar-add-btn"
                        containerClass="container--toolbar-button"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-toolbar-add-btn"
                          containerClass="container--toolbar-button"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="container--toolbar-button"
                          >
                            <div
                              className="domain-toolbar-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                      <ActionButton
                        buttonClass="domain-toolbar-delete-btn"
                        containerClass="container--toolbar-button"
                        disabled={true}
                        helperTitle="More Info"
                        onClick={[Function]}
                      >
                        <div
                          className="container--toolbar-button"
                        >
                          <div
                            className="domain-toolbar-delete-btn"
                          >
                            <span
                              className="container--action-button btn btn-default disabled"
                            >
                              <i
                                className="fa fa-trash domain-toolbar-export-btn-icon"
                              />
                               Delete
                            </span>
                          </div>
                        </div>
                      </ActionButton>
                    </div>
                    <div
                      className="col-xs-8"
                    >
                      <div
                        className="pull-right domain-field-toolbar-right-aligned"
                      >
                        <FormControl
                          bsClass="form-control"
                          className="domain-search-input"
                          componentClass="input"
                          id="domain-search-name-0"
                          onChange={[Function]}
                          placeholder="Search Fields"
                          type="text"
                        >
                          <input
                            className="domain-search-input form-control"
                            id="domain-search-name-0"
                            onChange={[Function]}
                            placeholder="Search Fields"
                            type="text"
                          />
                        </FormControl>
                      </div>
                    </div>
                  </div>
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <div
                    className="domain-form-no-field-panel"
                  >
                    No fields created yet. Click the 'Add Field' button to get started.
                  </div>
                  <div
                    className="row domain-add-field-row"
                  >
                    <div
                      className="col-xs-12"
                    >
                      <AddEntityButton
                        buttonClass="domain-form-add-btn"
                        containerClass="pull-right"
                        entity="Field"
                        onClick={[Function]}
                      >
                        <ActionButton
                          buttonClass="domain-form-add-btn"
                          containerClass="pull-right"
                          helperTitle="More Info"
                          onClick={[Function]}
                        >
                          <div
                            className="pull-right"
                          >
                            <div
                              className="domain-form-add-btn"
                            >
                              <span
                                className="container--action-button btn btn-default"
                                onClick={[Function]}
                              >
                                <i
                                  className="fa fa-plus-circle container--addition-icon"
                                />
                                 Add 
                                Field
                              </span>
                            </div>
                          </div>
                        </ActionButton>
                      </AddEntityButton>
                    </div>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm with hideInferFromFile false 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": undefined,
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideInferFromFile": false,
    }
  }
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": undefined,
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideInferFromFile": false,
        }
      }
      domainIndex={0}
      helpNoun="field designer"
      helpTopic="fieldEditor"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": undefined,
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={true}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <CollapsiblePanelHeader
                collapsed={true}
                id="domain-header"
                isValid={true}
                title="Fields"
                togglePanel={[Function]}
              >
                <div
                  className="domain-panel-header domain-panel-header-collapsed"
                  id="domain-header"
                  onClick={[Function]}
                >
                  <span
                    className="domain-panel-title"
                  >
                    Fields
                  </span>
                </div>
              </CollapsiblePanelHeader>
              <PanelBody
                bsClass="panel"
                className=""
                collapsible={false}
              >
                <div
                  className="panel-body"
                >
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="fieldEditor"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=fieldEditor"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <FileAttachmentForm
                    acceptedFormats=".csv, .tsv, .txt, .xls, .xlsx, .json"
                    allowDirectories={false}
                    allowMultiple={false}
                    cancelText="Cancel"
                    compact={false}
                    fileSpecificCallback={
                      Immutable.Map {
                        ".json": [Function],
                      }
                    }
                    label="Import or infer fields from file"
                    labelLong="Select file or drag and drop here."
                    onFileRemoval={[Function]}
                    previewGridProps={
                      {
                        "domainKindName": undefined,
                        "onPreviewLoad": [Function],
                        "previewCount": 3,
                        "skipPreviewGrid": true,
                      }
                    }
                    showAcceptedFormats={true}
                    showButtons={false}
                    showLabel={true}
                    showProgressBar={false}
                    submitText="Upload"
                  >
                    <span
                      className="translator--toggle__wizard"
                    >
                      <FormSection
                        iconSpacer={false}
                        label="Import or infer fields from file"
                        showLabel={true}
                      >
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <label
                              className="control-label text-left"
                            >
                              <strong>
                                Import or infer fields from file
                              </strong>
                            </label>
                          </div>
                        </div>
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <div
                              className="wizard-row--container"
                            >
                              <div
                                className=""
                              >
                                <FileAttachmentContainer
                                  acceptedFormats=".csv, .tsv, .txt, .xls, .xlsx, .json"
                                  allowDirectories={false}
                                  allowMultiple={false}
                                  compact={false}
                                  handleChange={[Function]}
                                  handleRemoval={[Function]}
                                  labelLong="Select file or drag and drop here."
                                >
                                  <div
                                    className="file-upload--container block"
                                  >
                                    <label
                                      className="file-upload--label"
                                      htmlFor="fileUpload"
                                      onDragEnter={[Function]}
                                      onDragLeave={[Function]}
                                      onDragOver={[Function]}
                                      onDrop={[Function]}
                                    >
                                      <i
                                        aria-hidden="true"
                                        className="fa fa-cloud-upload fa-2x cloud-logo"
                                      />
                                      Select file or drag and drop here.
                                    </label>
                                    <input
                                      accept=".csv, .tsv, .txt, .xls, .xlsx, .json"
                                      className="file-upload--input"
                                      id="fileUpload"
                                      multiple={false}
                                      name="fileUpload"
                                      onChange={[Function]}
                                      type="file"
                                    />
                                  </div>
                                </FileAttachmentContainer>
                              </div>
                            </div>
                          </div>
                        </div>
                      </FormSection>
                    </span>
                    <div
                      className="row"
                    >
                      <div
                        className="col-md-9"
                      >
                        <div
                          className="file-form-formats"
                        >
                          <strong>
                            Supported formats include: 
                          </strong>
                          .csv, .tsv, .txt, .xls, .xlsx, .json
                        </div>
                      </div>
                      <div
                        className="col-md-3"
                      >
                        <div
                          className="pull-right"
                        />
                      </div>
                    </div>
                  </FileAttachmentForm>
                  <div
                    className="margin-top domain-form-manual-section"
                  >
                    <p>
                      Or
                    </p>
                    <ActionButton
                      buttonClass="domain-form-manual-btn"
                      containerClass="form-group"
                      helperTitle="More Info"
                      onClick={[Function]}
                    >
                      <div
                        className="form-group"
                      >
                        <div
                          className="domain-form-manual-btn"
                        >
                          <span
                            className="container--action-button btn btn-default"
                            onClick={[Function]}
                          >
                            Manually Define Fields
                          </span>
                        </div>
                      </div>
                    </ActionButton>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;

exports[`DomainForm with showHeader, helpNoun, and helpTopic 1`] = `
<DomainForm
  api={
    {
      "fetchDomainDetails": [MockFunction],
      "fetchOntologies": [MockFunction],
      "getDataClassDetails": [MockFunction],
      "getDomainNamePreviews": [MockFunction],
      "getGenId": [MockFunction],
      "getMaxPhiLevel": [MockFunction] {
        "calls": [
          [
            undefined,
          ],
          [
            undefined,
          ],
          [
            undefined,
          ],
        ],
        "results": [
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
          {
            "type": "return",
            "value": Promise {},
          },
        ],
      },
      "getValidPublishTargets": [MockFunction],
      "hasExistingDomainData": [MockFunction],
      "saveDomain": [MockFunction],
      "setGenId": [MockFunction],
      "validateDomainNameExpressions": [MockFunction],
    }
  }
  domain={
    Immutable.Record {
      "name": undefined,
      "container": undefined,
      "description": undefined,
      "domainURI": undefined,
      "domainId": null,
      "allowFileLinkProperties": false,
      "allowAttachmentProperties": false,
      "allowFlagProperties": true,
      "allowSampleSubjectProperties": true,
      "allowTextChoiceProperties": true,
      "allowTimepointProperties": false,
      "allowUniqueConstraintProperties": false,
      "allowUserProperties": true,
      "showDefaultValueSettings": false,
      "defaultDefaultValueType": undefined,
      "defaultValueOptions": Immutable.List [],
      "fields": Immutable.List [],
      "indices": Immutable.List [],
      "domainException": undefined,
      "mandatoryFieldNames": Immutable.List [],
      "reservedFieldNames": Immutable.List [],
      "newDesignFields": undefined,
      "instructions": undefined,
      "domainKindName": undefined,
      "schemaName": undefined,
      "queryName": undefined,
      "disabledSystemFields": undefined,
    }
  }
  domainFormDisplayOptions={
    {
      "hideInferFromFile": true,
    }
  }
  helpNoun="assay"
  helpTopic="assays"
  onChange={
    [MockFunction] {
      "calls": [
        [
          Immutable.Record {
            "name": undefined,
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "allowUniqueConstraintProperties": false,
            "allowUserProperties": true,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
          false,
        ],
      ],
      "results": [
        {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  showHeader={false}
  testMode={true}
>
  <LookupProvider>
    <DomainFormImpl
      api={
        {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [MockFunction] {
            "calls": [
              [
                undefined,
              ],
              [
                undefined,
              ],
              [
                undefined,
              ],
            ],
            "results": [
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
              {
                "type": "return",
                "value": Promise {},
              },
            ],
          },
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        }
      }
      appPropertiesOnly={false}
      domain={
        Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        }
      }
      domainFormDisplayOptions={
        {
          "hideInferFromFile": true,
        }
      }
      domainIndex={0}
      helpNoun="assay"
      helpTopic="assays"
      initCollapsed={false}
      isNew={false}
      onChange={
        [MockFunction] {
          "calls": [
            [
              Immutable.Record {
                "name": undefined,
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "allowUniqueConstraintProperties": false,
                "allowUserProperties": true,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              false,
            ],
          ],
          "results": [
            {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      showHeader={false}
      testMode={true}
    >
      <ForwardRef
        className="panel panel-default domain-form-panel"
        expanded={true}
        onToggle={[Function]}
      >
        <Uncontrolled(Panel)
          className="panel panel-default domain-form-panel"
          expanded={true}
          innerRef={null}
          onToggle={[Function]}
        >
          <Panel
            bsClass="panel"
            bsStyle="default"
            className="panel panel-default domain-form-panel"
            expanded={true}
            onToggle={[Function]}
          >
            <div
              className="panel panel-default domain-form-panel panel panel-default"
            >
              <PanelBody
                bsClass="panel"
                className=""
                collapsible={false}
              >
                <div
                  className="panel-body"
                >
                  <div
                    className="row domain-form-hdr-margins"
                  >
                    <div
                      className="col-xs-9"
                    />
                    <div
                      className="col-xs-3"
                    >
                      <HelpLink
                        className="domain-field-float-right"
                        topic="assays"
                      >
                        <a
                          className="domain-field-float-right"
                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=assays"
                          rel="noopener noreferrer"
                          target="_blank"
                        >
                          Learn more about this tool
                        </a>
                      </HelpLink>
                    </div>
                  </div>
                  <FileAttachmentForm
                    acceptedFormats=".json"
                    allowDirectories={false}
                    allowMultiple={false}
                    cancelText="Cancel"
                    compact={false}
                    fileSpecificCallback={
                      Immutable.Map {
                        ".json": [Function],
                      }
                    }
                    label="Import fields from file"
                    labelLong="Select file or drag and drop here."
                    onFileRemoval={[Function]}
                    previewGridProps={false}
                    showAcceptedFormats={true}
                    showButtons={false}
                    showLabel={true}
                    showProgressBar={false}
                    submitText="Upload"
                  >
                    <span
                      className="translator--toggle__wizard"
                    >
                      <FormSection
                        iconSpacer={false}
                        label="Import fields from file"
                        showLabel={true}
                      >
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <label
                              className="control-label text-left"
                            >
                              <strong>
                                Import fields from file
                              </strong>
                            </label>
                          </div>
                        </div>
                        <div
                          className="row"
                        >
                          <div
                            className="col-sm-12"
                          >
                            <div
                              className="wizard-row--container"
                            >
                              <div
                                className=""
                              >
                                <FileAttachmentContainer
                                  acceptedFormats=".json"
                                  allowDirectories={false}
                                  allowMultiple={false}
                                  compact={false}
                                  handleChange={[Function]}
                                  handleRemoval={[Function]}
                                  labelLong="Select file or drag and drop here."
                                >
                                  <div
                                    className="file-upload--container block"
                                  >
                                    <label
                                      className="file-upload--label"
                                      htmlFor="fileUpload"
                                      onDragEnter={[Function]}
                                      onDragLeave={[Function]}
                                      onDragOver={[Function]}
                                      onDrop={[Function]}
                                    >
                                      <i
                                        aria-hidden="true"
                                        className="fa fa-cloud-upload fa-2x cloud-logo"
                                      />
                                      Select file or drag and drop here.
                                    </label>
                                    <input
                                      accept=".json"
                                      className="file-upload--input"
                                      id="fileUpload"
                                      multiple={false}
                                      name="fileUpload"
                                      onChange={[Function]}
                                      type="file"
                                    />
                                  </div>
                                </FileAttachmentContainer>
                              </div>
                            </div>
                          </div>
                        </div>
                      </FormSection>
                    </span>
                    <div
                      className="row"
                    >
                      <div
                        className="col-md-9"
                      >
                        <div
                          className="file-form-formats"
                        >
                          <strong>
                            Supported formats include: 
                          </strong>
                          .json
                        </div>
                      </div>
                      <div
                        className="col-md-3"
                      >
                        <div
                          className="pull-right"
                        />
                      </div>
                    </div>
                  </FileAttachmentForm>
                  <div
                    className="margin-top domain-form-manual-section"
                  >
                    <p>
                      Or
                    </p>
                    <ActionButton
                      buttonClass="domain-form-manual-btn"
                      containerClass="form-group"
                      helperTitle="More Info"
                      onClick={[Function]}
                    >
                      <div
                        className="form-group"
                      >
                        <div
                          className="domain-form-manual-btn"
                        >
                          <span
                            className="container--action-button btn btn-default"
                            onClick={[Function]}
                          >
                            Manually Define Fields
                          </span>
                        </div>
                      </div>
                    </ActionButton>
                  </div>
                </div>
              </PanelBody>
            </div>
          </Panel>
        </Uncontrolled(Panel)>
      </ForwardRef>
    </DomainFormImpl>
  </LookupProvider>
</DomainForm>
`;
