// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DomainRow Sample Field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="6"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="6"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": "Materials",
                    "lookupSchema": "exp",
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "sampleField",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#int|Materials",
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://www.labkey.org/exp/xml#sample",
                        "display": "Sample",
                        "name": "sample",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "sampleField",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={0}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-0"
                  index={0}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-0"
                    index={0}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-0"
                      index={0}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-0"
                        dropAnimationFinished={[Function]}
                        index={0}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="6"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-0"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={0}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-0"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-6-hidden-text-18"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="6"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-0"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-0"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-0"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-0"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-0"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-0"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-0"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="sampleField"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-0"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="sampleField"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-0"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="sample"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-0"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="sample"
                                            >
                                              <option
                                                key="double"
                                                value="double"
                                              >
                                                Decimal (floating point)
                                              </option>
                                              <option
                                                key="int"
                                                value="int"
                                              >
                                                Integer
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="sample"
                                                value="sample"
                                              >
                                                Sample
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="users"
                                                value="users"
                                              >
                                                User
                                              </option>
                                              <option
                                                key="visitId"
                                                value="visitId"
                                              >
                                                Visit ID
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-0"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-0"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-0"
                                    >
                                      All Samples
                                    </div>
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-0"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-0"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": "Materials",
                                      "lookupSchema": "exp",
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "sampleField",
                                      "PHI": undefined,
                                      "propertyId": 1,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                        "display": "Sample",
                                        "name": "sample",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#int|Materials",
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                          "display": "Sample",
                                          "name": "sample",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "sampleField",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={0}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <SampleFieldOptions
                                            domainIndex={1}
                                            index={0}
                                            label="Sample Options"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                            original={
                                              {
                                                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                "dataType": Immutable.Record {
                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                  "display": "Sample",
                                                  "name": "sample",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "name": "sampleField",
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                              }
                                            }
                                            value="http://www.w3.org/2001/XMLSchema#int|Materials"
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        title="Sample Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Sample Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Sample lookup to
                                                        <LabelHelpTip
                                                          title="Sample Reference"
                                                        >
                                                          <OverlayTrigger
                                                            id="label-help-tip28"
                                                            overlay={
                                                              <Popover
                                                                id="label-help-tip-popover"
                                                                title="Sample Reference"
                                                              >
                                                                <p>
                                                                  Select the sample reference for this field. You can choose to reference all available samples or select a specific sample type to filter by.
                                                                </p>
                                                                <p>
                                                                  This selection will be used to validate and link incoming data, populate lists for data entry, etc.
                                                                </p>
                                                                <p>
                                                                  Learn more about using
                                                                   
                                                                  <HelpLink
                                                                    topic="propertyFields#samp"
                                                                  >
                                                                    sample fields
                                                                  </HelpLink>
                                                                   in LabKey.
                                                                </p>
                                                                 
                                                              </Popover>
                                                            }
                                                          >
                                                            <div
                                                              className="overlay-trigger"
                                                              onClick={[Function]}
                                                              onMouseEnter={[Function]}
                                                              onMouseLeave={[Function]}
                                                            >
                                                              <span
                                                                className="label-help-target"
                                                              >
                                                                <span
                                                                  className="label-help-icon fa fa-question-circle"
                                                                />
                                                              </span>
                                                            </div>
                                                          </OverlayTrigger>
                                                        </LabelHelpTip>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="select"
                                                        disabled={false}
                                                        id="domainpropertiesrow-sampleTypeSelect-1-0"
                                                        key="domainpropertiesrow-sampleTypeSelect-1-0"
                                                        name="domainpropertiesrow-sampleTypeSelect"
                                                        onChange={[Function]}
                                                        value="http://www.w3.org/2001/XMLSchema#int|Materials"
                                                      >
                                                        <select
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-sampleTypeSelect-1-0"
                                                          name="domainpropertiesrow-sampleTypeSelect"
                                                          onChange={[Function]}
                                                          value="http://www.w3.org/2001/XMLSchema#int|Materials"
                                                        >
                                                          <option
                                                            disabled={true}
                                                            key="_loading"
                                                            value="http://www.w3.org/2001/XMLSchema#int|Materials"
                                                          >
                                                            Loading...
                                                          </option>
                                                        </select>
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </SampleFieldOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": "Materials",
                                                "lookupSchema": "exp",
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "sampleField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                  "display": "Sample",
                                                  "name": "sample",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#int|Materials",
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                    "display": "Sample",
                                                    "name": "sample",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "sampleField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-0"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-0"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-0"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-0"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip29"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-0"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-0"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip30"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-0"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-0"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": "Materials",
                                                "lookupSchema": "exp",
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "sampleField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                  "display": "Sample",
                                                  "name": "sample",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": "http://www.w3.org/2001/XMLSchema#int|Materials",
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                    "display": "Sample",
                                                    "name": "sample",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "sampleField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip31"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-0"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow client side warning on field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="7"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="7"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "#ColumnAwesome",
                    "PHI": undefined,
                    "propertyId": undefined,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Attachment",
                        "name": "attachment",
                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "#ColumnAwesome",
                      "rangeURI": undefined,
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                fieldError={
                  Immutable.Record {
                    "message": "Field name contains special characters.",
                    "fieldName": "#ColumnAwesome",
                    "propertyId": undefined,
                    "severity": "Warning",
                    "serverError": undefined,
                    "rowIndexes": Immutable.List [],
                    "newRowIndexes": undefined,
                    "extraInfo": "SQL queries, R scripts, and other code are easiest to write when field names contain only a combination of letters, numbers, and underscores, and start with a letter or underscore. Exporting fields that abide by this format are also easier to work with in analysis applications such as SAS, SPSS, and MATLAB.",
                  }
                }
                helpNoun="domain"
                index={1}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-1"
                  index={1}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-1"
                    index={1}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-1"
                      index={1}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-1"
                        dropAnimationFinished={[Function]}
                        index={1}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-warning"
                          data-rbd-draggable-context-id="7"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-1"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={1}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-1"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-7-hidden-text-21"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="7"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-1"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-1"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-1"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-1"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-1"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-1"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-1"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="#ColumnAwesome"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-1"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="#ColumnAwesome"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-1"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="attachment"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-1"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="attachment"
                                            >
                                              <option
                                                key="attachment"
                                                value="attachment"
                                              >
                                                Attachment
                                              </option>
                                              <option
                                                key="boolean"
                                                value="boolean"
                                              >
                                                Boolean
                                              </option>
                                              <option
                                                key="date"
                                                value="date"
                                              >
                                                Date
                                              </option>
                                              <option
                                                key="dateTime"
                                                value="dateTime"
                                              >
                                                Date Time
                                              </option>
                                              <option
                                                key="double"
                                                value="double"
                                              >
                                                Decimal (floating point)
                                              </option>
                                              <option
                                                key="fileLink"
                                                value="fileLink"
                                              >
                                                File
                                              </option>
                                              <option
                                                key="flag"
                                                value="flag"
                                              >
                                                Flag
                                              </option>
                                              <option
                                                key="int"
                                                value="int"
                                              >
                                                Integer
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="ontologyLookup"
                                                value="ontologyLookup"
                                              >
                                                Ontology Lookup
                                              </option>
                                              <option
                                                key="sample"
                                                value="sample"
                                              >
                                                Sample
                                              </option>
                                              <option
                                                key="smiles"
                                                value="smiles"
                                              >
                                                SMILES
                                              </option>
                                              <option
                                                key="ParticipantId"
                                                value="ParticipantId"
                                              >
                                                Subject/Participant
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="textChoice"
                                                value="textChoice"
                                              >
                                                Text Choice
                                              </option>
                                              <option
                                                key="time"
                                                value="time"
                                              >
                                                Time
                                              </option>
                                              <option
                                                key="uniqueId"
                                                value="uniqueId"
                                              >
                                                Unique ID
                                              </option>
                                              <option
                                                key="users"
                                                value="users"
                                              >
                                                User
                                              </option>
                                              <option
                                                key="visitDate"
                                                value="visitDate"
                                              >
                                                Visit Date
                                              </option>
                                              <option
                                                key="visitId"
                                                value="visitId"
                                              >
                                                Visit ID
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-1"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-1"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-1"
                                    >
                                      New Field
                                      . 
                                      <Memo()
                                        fieldError={
                                          Immutable.Record {
                                            "message": "Field name contains special characters.",
                                            "fieldName": "#ColumnAwesome",
                                            "propertyId": undefined,
                                            "severity": "Warning",
                                            "serverError": undefined,
                                            "rowIndexes": Immutable.List [],
                                            "newRowIndexes": undefined,
                                            "extraInfo": "SQL queries, R scripts, and other code are easiest to write when field names contain only a combination of letters, numbers, and underscores, and start with a letter or underscore. Exporting fields that abide by this format are also easier to work with in analysis applications such as SAS, SPSS, and MATLAB.",
                                          }
                                        }
                                      >
                                        <span
                                          className="domain-row-warning"
                                        >
                                          <LabelHelpTip
                                            iconComponent={
                                              <span
                                                className="fa fa-exclamation-circle domain-warning-icon"
                                              />
                                            }
                                            title="Warning"
                                          >
                                            <OverlayTrigger
                                              id="label-help-tip32"
                                              overlay={
                                                <Popover
                                                  id="label-help-tip-popover"
                                                  title="Warning"
                                                >
                                                  SQL queries, R scripts, and other code are easiest to write when field names contain only a combination of letters, numbers, and underscores, and start with a letter or underscore. Exporting fields that abide by this format are also easier to work with in analysis applications such as SAS, SPSS, and MATLAB.
                                                </Popover>
                                              }
                                            >
                                              <div
                                                className="overlay-trigger"
                                                onClick={[Function]}
                                                onMouseEnter={[Function]}
                                                onMouseLeave={[Function]}
                                              >
                                                <span
                                                  className="label-help-target"
                                                >
                                                  <span
                                                    className="fa fa-exclamation-circle domain-warning-icon"
                                                  />
                                                </span>
                                              </div>
                                            </OverlayTrigger>
                                          </LabelHelpTip>
                                          <span>
                                             
                                          </span>
                                          Warning: Field name contains special characters.
                                        </span>
                                      </Memo()>
                                    </div>
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-1"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-1"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "#ColumnAwesome",
                                      "PHI": undefined,
                                      "propertyId": undefined,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Attachment",
                                        "name": "attachment",
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Attachment",
                                          "name": "attachment",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "#ColumnAwesome",
                                        "rangeURI": undefined,
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={1}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <Memo()
                                            domainIndex={1}
                                            index={1}
                                            label="Attachment"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        helpTipBody={
                                                          <React.Fragment>
                                                            <p>
                                                              Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                            </p>
                                                          </React.Fragment>
                                                        }
                                                        title="Attachment Behavior"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Attachment Behavior
                                                          <LabelHelpTip
                                                            title="Attachment Behavior"
                                                          >
                                                            <OverlayTrigger
                                                              id="label-help-tip33"
                                                              overlay={
                                                                <Popover
                                                                  id="label-help-tip-popover"
                                                                  title="Attachment Behavior"
                                                                >
                                                                  <React.Fragment>
                                                                    <p>
                                                                      Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                    </p>
                                                                  </React.Fragment>
                                                                </Popover>
                                                              }
                                                            >
                                                              <div
                                                                className="overlay-trigger"
                                                                onClick={[Function]}
                                                                onMouseEnter={[Function]}
                                                                onMouseLeave={[Function]}
                                                              >
                                                                <span
                                                                  className="label-help-target"
                                                                >
                                                                  <span
                                                                    className="label-help-icon fa fa-question-circle"
                                                                  />
                                                                </span>
                                                              </div>
                                                            </OverlayTrigger>
                                                          </LabelHelpTip>
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                className="domain-field-label"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="domain-field-label row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={2}
                                                  >
                                                    <div
                                                      className="col-xs-2"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="select"
                                                        disabled={false}
                                                        id="domainpropertiesrow-format-1-1"
                                                        name="domainpropertiesrow-format"
                                                        onChange={[Function]}
                                                      >
                                                        <select
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-format-1-1"
                                                          name="domainpropertiesrow-format"
                                                          onChange={[Function]}
                                                        >
                                                          <option
                                                            key="domainpropertiesrow-formatoption-inline-1-1"
                                                            value="inline"
                                                          >
                                                            Show Attachment in Browser
                                                          </option>
                                                          <option
                                                            key="domainpropertiesrow-formatoption-attachment-1-1"
                                                            value="attachment"
                                                          >
                                                            Download Attachment
                                                          </option>
                                                        </select>
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </Memo()>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "#ColumnAwesome",
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Attachment",
                                                  "name": "attachment",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Attachment",
                                                    "name": "attachment",
                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "#ColumnAwesome",
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-1"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-1"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-1"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-1"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip34"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-1"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-1"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip35"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-1"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-1"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "#ColumnAwesome",
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Attachment",
                                                  "name": "attachment",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Attachment",
                                                    "name": "attachment",
                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "#ColumnAwesome",
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip36"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-1"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow date time field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="3"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="3"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "dateTimeField",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Date Time",
                        "name": "dateTime",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                        "alternateRangeURI": "xsd:dateTime",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "dateTimeField",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={0}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-0"
                  index={0}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-0"
                    index={0}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-0"
                      index={0}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-0"
                        dropAnimationFinished={[Function]}
                        index={0}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="3"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-0"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={0}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-0"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-3-hidden-text-9"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="3"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-0"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-0"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-0"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-0"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-0"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-0"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-0"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="dateTimeField"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-0"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="dateTimeField"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-0"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="dateTime"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-0"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="dateTime"
                                            >
                                              <option
                                                key="date"
                                                value="date"
                                              >
                                                Date
                                              </option>
                                              <option
                                                key="dateTime"
                                                value="dateTime"
                                              >
                                                Date Time
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="time"
                                                value="time"
                                              >
                                                Time
                                              </option>
                                              <option
                                                key="visitDate"
                                                value="visitDate"
                                              >
                                                Visit Date
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-0"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-0"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-0"
                                    />
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-0"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-0"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "dateTimeField",
                                      "PHI": undefined,
                                      "propertyId": 1,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Date Time",
                                        "name": "dateTime",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                        "alternateRangeURI": "xsd:dateTime",
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Date Time",
                                          "name": "dateTime",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                          "alternateRangeURI": "xsd:dateTime",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "dateTimeField",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={0}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <DateTimeFieldOptions
                                            domainIndex={1}
                                            excludeFromShifting={false}
                                            index={0}
                                            label="Date and Time Options"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                            type="dateTime"
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        title="Date and Time Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Date and Time Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              <p>
                                                                To control how a 
                                                                date or time
                                                                 value is displayed, provide a string format compatible with the Java
                                                                 
                                                                <Memo
                                                                  urlSuffix="java/text/SimpleDateFormat.html"
                                                                >
                                                                  SimpleDateFormat
                                                                </Memo>
                                                                 class.
                                                              </p>
                                                              <p>
                                                                Learn more about using 
                                                                <HelpLink
                                                                  topic="dateFormats#date"
                                                                >
                                                                  Date and Time formats
                                                                </HelpLink>
                                                                 in LabKey.
                                                              </p>
                                                            </React.Fragment>
                                                          }
                                                          label="Format for Dates"
                                                        >
                                                          Format for 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Dates
                                                            <LabelHelpTip
                                                              title="Format for Dates"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip15"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Format for Dates"
                                                                  >
                                                                    <React.Fragment>
                                                                      <p>
                                                                        To control how a 
                                                                        date or time
                                                                         value is displayed, provide a string format compatible with the Java
                                                                         
                                                                        <Memo
                                                                          urlSuffix="java/text/SimpleDateFormat.html"
                                                                        >
                                                                          SimpleDateFormat
                                                                        </Memo>
                                                                         class.
                                                                      </p>
                                                                      <p>
                                                                        Learn more about using 
                                                                        <HelpLink
                                                                          topic="dateFormats#date"
                                                                        >
                                                                          Date and Time formats
                                                                        </HelpLink>
                                                                         in LabKey.
                                                                      </p>
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={9}
                                                  >
                                                    <div
                                                      className="col-xs-9"
                                                    />
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-format-1-0"
                                                        name="domainpropertiesrow-format"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-format-1-0"
                                                          name="domainpropertiesrow-format"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={9}
                                                  >
                                                    <div
                                                      className="col-xs-9"
                                                    />
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </DateTimeFieldOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "dateTimeField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Date Time",
                                                  "name": "dateTime",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                  "alternateRangeURI": "xsd:dateTime",
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Date Time",
                                                    "name": "dateTime",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                    "alternateRangeURI": "xsd:dateTime",
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "dateTimeField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-0"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-0"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-0"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-0"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip16"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-0"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-0"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip17"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-0"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-0"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "dateTimeField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Date Time",
                                                  "name": "dateTime",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                  "alternateRangeURI": "xsd:dateTime",
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Date Time",
                                                    "name": "dateTime",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                    "alternateRangeURI": "xsd:dateTime",
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "dateTimeField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting and Validation Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting and Validation Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip18"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-0"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className=""
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<RangeValidatorHelpText />}
                                                            label="Create Range Validator"
                                                          >
                                                            Create Range 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Validator
                                                              <LabelHelpTip
                                                                title="Create Range Validator"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip19"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Range Validator"
                                                                    >
                                                                      <RangeValidatorHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-rangeValidator-1-0"
                                                            name="domainpropertiesrow-rangeValidator"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Range
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow decimal field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="2"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="2"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "decimalField",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": true,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Decimal (floating point)",
                        "name": "double",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                        "alternateRangeURI": "xsd:double",
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "decimalField",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={2}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-2"
                  index={2}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-2"
                    index={2}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-2"
                      index={2}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-2"
                        dropAnimationFinished={[Function]}
                        index={2}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="2"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-2"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={2}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-2"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-2-hidden-text-6"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="2"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-2"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-2"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-2"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-2"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-2"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-2"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-2"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="decimalField"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-2"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="decimalField"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-2"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="double"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-2"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="double"
                                            >
                                              <option
                                                key="double"
                                                value="double"
                                              >
                                                Decimal (floating point)
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="visitId"
                                                value="visitId"
                                              >
                                                Visit ID
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={true}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-2"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={true}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-2"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-2"
                                    />
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-2"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-2"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "decimalField",
                                      "PHI": undefined,
                                      "propertyId": 1,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": true,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Decimal (floating point)",
                                        "name": "double",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                        "alternateRangeURI": "xsd:double",
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Decimal (floating point)",
                                          "name": "double",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                          "alternateRangeURI": "xsd:double",
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "decimalField",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={2}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NumericFieldOptions
                                            domainIndex={1}
                                            index={2}
                                            label="Decimal Options"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                            showScannableOption={false}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        title="Decimal Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Decimal Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              <p>
                                                                To control how a number value is displayed, provide a string format compatible with the Java
                                                                 
                                                                <Memo
                                                                  urlSuffix="java/text/DecimalFormat.html"
                                                                >
                                                                  DecimalFormat
                                                                </Memo>
                                                                 class.
                                                              </p>
                                                              <p>
                                                                Learn more about using 
                                                                <HelpLink
                                                                  topic="dateFormats#number"
                                                                >
                                                                  Number formats
                                                                </HelpLink>
                                                                 in LabKey.
                                                              </p>
                                                            </React.Fragment>
                                                          }
                                                          label="Format for Numbers"
                                                        >
                                                          Format for 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Numbers
                                                            <LabelHelpTip
                                                              title="Format for Numbers"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip10"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Format for Numbers"
                                                                  >
                                                                    <React.Fragment>
                                                                      <p>
                                                                        To control how a number value is displayed, provide a string format compatible with the Java
                                                                         
                                                                        <Memo
                                                                          urlSuffix="java/text/DecimalFormat.html"
                                                                        >
                                                                          DecimalFormat
                                                                        </Memo>
                                                                         class.
                                                                      </p>
                                                                      <p>
                                                                        Learn more about using 
                                                                        <HelpLink
                                                                          topic="dateFormats#number"
                                                                        >
                                                                          Number formats
                                                                        </HelpLink>
                                                                         in LabKey.
                                                                      </p>
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={2}
                                                  >
                                                    <div
                                                      className="col-xs-2"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Default Scale Type
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-format-1-2"
                                                        name="domainpropertiesrow-format"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-format-1-2"
                                                          name="domainpropertiesrow-format"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={2}
                                                  >
                                                    <div
                                                      className="col-xs-2"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="select"
                                                        disabled={false}
                                                        id="domainpropertiesrow-defaultScale-1-2"
                                                        name="domainpropertiesrow-defaultScale"
                                                        onChange={[Function]}
                                                      >
                                                        <select
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-defaultScale-1-2"
                                                          name="domainpropertiesrow-defaultScale"
                                                          onChange={[Function]}
                                                        >
                                                          <option
                                                            key="domainpropertiesrow-defaultScaleoption-LINEAR-1-2"
                                                            value="LINEAR"
                                                          >
                                                            Linear
                                                          </option>
                                                          <option
                                                            key="domainpropertiesrow-defaultScaleoption-LOG-1-2"
                                                            value="LOG"
                                                          >
                                                            Log
                                                          </option>
                                                        </select>
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Memo()
                                                domainIndex={1}
                                                index={2}
                                                label="Decimal Options"
                                                lockType="NotLocked"
                                                onChange={[Function]}
                                                showScannableOption={false}
                                              />
                                            </div>
                                          </NumericFieldOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "decimalField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": true,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Decimal (floating point)",
                                                  "name": "double",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                  "alternateRangeURI": "xsd:double",
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Decimal (floating point)",
                                                    "name": "double",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                    "alternateRangeURI": "xsd:double",
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "decimalField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={2}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-2"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-2"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-2"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-2"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip11"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-2"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-2"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip12"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-2"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-2"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "decimalField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": true,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Decimal (floating point)",
                                                  "name": "double",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                  "alternateRangeURI": "xsd:double",
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Decimal (floating point)",
                                                    "name": "double",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                    "alternateRangeURI": "xsd:double",
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "decimalField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={2}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting and Validation Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting and Validation Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip13"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-2"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className=""
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<RangeValidatorHelpText />}
                                                            label="Create Range Validator"
                                                          >
                                                            Create Range 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Validator
                                                              <LabelHelpTip
                                                                title="Create Range Validator"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip14"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Range Validator"
                                                                    >
                                                                      <RangeValidatorHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-rangeValidator-1-2"
                                                            name="domainpropertiesrow-rangeValidator"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Range
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow participant id field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="4"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="4"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "participantField",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "dataType": Immutable.Record {
                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                        "display": "Subject/Participant",
                        "name": "ParticipantId",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "participantField",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={0}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-0"
                  index={0}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-0"
                    index={0}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-0"
                      index={0}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-0"
                        dropAnimationFinished={[Function]}
                        index={0}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="4"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-0"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={0}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-0"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-4-hidden-text-12"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="4"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-0"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-0"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-0"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-0"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-0"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-0"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-0"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="participantField"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-0"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="participantField"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-0"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="ParticipantId"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-0"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="ParticipantId"
                                            >
                                              <option
                                                key="flag"
                                                value="flag"
                                              >
                                                Flag
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="ontologyLookup"
                                                value="ontologyLookup"
                                              >
                                                Ontology Lookup
                                              </option>
                                              <option
                                                key="smiles"
                                                value="smiles"
                                              >
                                                SMILES
                                              </option>
                                              <option
                                                key="ParticipantId"
                                                value="ParticipantId"
                                              >
                                                Subject/Participant
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="textChoice"
                                                value="textChoice"
                                              >
                                                Text Choice
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-0"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-0"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-0"
                                    />
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-0"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-0"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "participantField",
                                      "PHI": undefined,
                                      "propertyId": 1,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                        "display": "Subject/Participant",
                                        "name": "ParticipantId",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                        "dataType": Immutable.Record {
                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                          "display": "Subject/Participant",
                                          "name": "ParticipantId",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "participantField",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={0}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        />
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "participantField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                  "display": "Subject/Participant",
                                                  "name": "ParticipantId",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                    "display": "Subject/Participant",
                                                    "name": "ParticipantId",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "participantField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-0"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-0"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-0"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-0"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip20"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-0"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-0"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip21"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-0"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-0"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "participantField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                  "display": "Subject/Participant",
                                                  "name": "ParticipantId",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                    "display": "Subject/Participant",
                                                    "name": "ParticipantId",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "participantField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={0}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting and Validation Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting and Validation Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip22"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-0"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<RegexValidatorHelpText />}
                                                            label="Create Regular Expression Validator"
                                                          >
                                                            Create Regular Expression 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Validator
                                                              <LabelHelpTip
                                                                title="Create Regular Expression Validator"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip23"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Regular Expression Validator"
                                                                    >
                                                                      <RegexValidatorHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-regexValidator-1-0"
                                                            name="domainpropertiesrow-regexValidator"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Regex
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow server side error on reserved field 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="8"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="8"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "modified",
                    "PHI": undefined,
                    "propertyId": undefined,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Attachment",
                        "name": "attachment",
                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "modified",
                      "rangeURI": undefined,
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                fieldError={
                  Immutable.Record {
                    "message": "'modified' is a reserved field name in 'CancerCuringStudy'",
                    "fieldName": "modified",
                    "propertyId": undefined,
                    "severity": "Error",
                    "serverError": undefined,
                    "rowIndexes": Immutable.List [],
                    "newRowIndexes": undefined,
                    "extraInfo": undefined,
                  }
                }
                helpNoun="domain"
                index={1}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-1"
                  index={1}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-1"
                    index={1}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-1"
                      index={1}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-1"
                        dropAnimationFinished={[Function]}
                        index={1}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-error"
                          data-rbd-draggable-context-id="8"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-1"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={1}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-1"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-8-hidden-text-24"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="8"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-1"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-1"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-1"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-1"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-1"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-1"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-1"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="modified"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-1"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="modified"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-1"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="attachment"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-1"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="attachment"
                                            >
                                              <option
                                                key="attachment"
                                                value="attachment"
                                              >
                                                Attachment
                                              </option>
                                              <option
                                                key="boolean"
                                                value="boolean"
                                              >
                                                Boolean
                                              </option>
                                              <option
                                                key="date"
                                                value="date"
                                              >
                                                Date
                                              </option>
                                              <option
                                                key="dateTime"
                                                value="dateTime"
                                              >
                                                Date Time
                                              </option>
                                              <option
                                                key="double"
                                                value="double"
                                              >
                                                Decimal (floating point)
                                              </option>
                                              <option
                                                key="fileLink"
                                                value="fileLink"
                                              >
                                                File
                                              </option>
                                              <option
                                                key="flag"
                                                value="flag"
                                              >
                                                Flag
                                              </option>
                                              <option
                                                key="int"
                                                value="int"
                                              >
                                                Integer
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="ontologyLookup"
                                                value="ontologyLookup"
                                              >
                                                Ontology Lookup
                                              </option>
                                              <option
                                                key="sample"
                                                value="sample"
                                              >
                                                Sample
                                              </option>
                                              <option
                                                key="smiles"
                                                value="smiles"
                                              >
                                                SMILES
                                              </option>
                                              <option
                                                key="ParticipantId"
                                                value="ParticipantId"
                                              >
                                                Subject/Participant
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="textChoice"
                                                value="textChoice"
                                              >
                                                Text Choice
                                              </option>
                                              <option
                                                key="time"
                                                value="time"
                                              >
                                                Time
                                              </option>
                                              <option
                                                key="uniqueId"
                                                value="uniqueId"
                                              >
                                                Unique ID
                                              </option>
                                              <option
                                                key="users"
                                                value="users"
                                              >
                                                User
                                              </option>
                                              <option
                                                key="visitDate"
                                                value="visitDate"
                                              >
                                                Visit Date
                                              </option>
                                              <option
                                                key="visitId"
                                                value="visitId"
                                              >
                                                Visit ID
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-1"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-1"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-1"
                                    >
                                      New Field
                                      . 
                                      <Memo()
                                        fieldError={
                                          Immutable.Record {
                                            "message": "'modified' is a reserved field name in 'CancerCuringStudy'",
                                            "fieldName": "modified",
                                            "propertyId": undefined,
                                            "severity": "Error",
                                            "serverError": undefined,
                                            "rowIndexes": Immutable.List [],
                                            "newRowIndexes": undefined,
                                            "extraInfo": undefined,
                                          }
                                        }
                                      >
                                        <span
                                          className="domain-row-warning"
                                        >
                                          Error: 'modified' is a reserved field name in 'CancerCuringStudy'
                                        </span>
                                      </Memo()>
                                    </div>
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-1"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-1"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "modified",
                                      "PHI": undefined,
                                      "propertyId": undefined,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Attachment",
                                        "name": "attachment",
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Attachment",
                                          "name": "attachment",
                                          "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                          "alternateRangeURI": undefined,
                                          "shortDisplay": undefined,
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "modified",
                                        "rangeURI": undefined,
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={1}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <Memo()
                                            domainIndex={1}
                                            index={1}
                                            label="Attachment"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        helpTipBody={
                                                          <React.Fragment>
                                                            <p>
                                                              Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                            </p>
                                                          </React.Fragment>
                                                        }
                                                        title="Attachment Behavior"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Attachment Behavior
                                                          <LabelHelpTip
                                                            title="Attachment Behavior"
                                                          >
                                                            <OverlayTrigger
                                                              id="label-help-tip37"
                                                              overlay={
                                                                <Popover
                                                                  id="label-help-tip-popover"
                                                                  title="Attachment Behavior"
                                                                >
                                                                  <React.Fragment>
                                                                    <p>
                                                                      Set the default behavior of attachment links when clicked in grids and elsewhere in LabKey.
                                                                    </p>
                                                                  </React.Fragment>
                                                                </Popover>
                                                              }
                                                            >
                                                              <div
                                                                className="overlay-trigger"
                                                                onClick={[Function]}
                                                                onMouseEnter={[Function]}
                                                                onMouseLeave={[Function]}
                                                              >
                                                                <span
                                                                  className="label-help-target"
                                                                >
                                                                  <span
                                                                    className="label-help-icon fa fa-question-circle"
                                                                  />
                                                                </span>
                                                              </div>
                                                            </OverlayTrigger>
                                                          </LabelHelpTip>
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                className="domain-field-label"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="domain-field-label row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={2}
                                                  >
                                                    <div
                                                      className="col-xs-2"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="select"
                                                        disabled={false}
                                                        id="domainpropertiesrow-format-1-1"
                                                        name="domainpropertiesrow-format"
                                                        onChange={[Function]}
                                                      >
                                                        <select
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-format-1-1"
                                                          name="domainpropertiesrow-format"
                                                          onChange={[Function]}
                                                        >
                                                          <option
                                                            key="domainpropertiesrow-formatoption-inline-1-1"
                                                            value="inline"
                                                          >
                                                            Show Attachment in Browser
                                                          </option>
                                                          <option
                                                            key="domainpropertiesrow-formatoption-attachment-1-1"
                                                            value="attachment"
                                                          >
                                                            Download Attachment
                                                          </option>
                                                        </select>
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </Memo()>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "modified",
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Attachment",
                                                  "name": "attachment",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Attachment",
                                                    "name": "attachment",
                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "modified",
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-1"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-1"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-1"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-1"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip38"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-1"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-1"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip39"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-1"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-1"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "modified",
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Attachment",
                                                  "name": "attachment",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Attachment",
                                                    "name": "attachment",
                                                    "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                                                    "alternateRangeURI": undefined,
                                                    "shortDisplay": undefined,
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "modified",
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip40"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-1"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow string field test 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="1"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="1"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "stringField",
                    "PHI": undefined,
                    "propertyId": 1,
                    "propertyURI": "test",
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "stringField",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={1}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-1"
                  index={1}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-1"
                    index={1}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-1"
                      index={1}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-1"
                        dropAnimationFinished={[Function]}
                        index={1}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="1"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-1"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={1}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-1"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-1-hidden-text-3"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="1"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-1"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-1"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-1"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-1"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-1"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-1"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-1"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value="stringField"
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-1"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value="stringField"
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-1"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="string"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-1"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="string"
                                            >
                                              <option
                                                key="flag"
                                                value="flag"
                                              >
                                                Flag
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="ontologyLookup"
                                                value="ontologyLookup"
                                              >
                                                Ontology Lookup
                                              </option>
                                              <option
                                                key="smiles"
                                                value="smiles"
                                              >
                                                SMILES
                                              </option>
                                              <option
                                                key="ParticipantId"
                                                value="ParticipantId"
                                              >
                                                Subject/Participant
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="textChoice"
                                                value="textChoice"
                                              >
                                                Text Choice
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-1"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-1"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-1"
                                    />
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-1"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-1"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": "stringField",
                                      "PHI": undefined,
                                      "propertyId": 1,
                                      "propertyURI": "test",
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Text",
                                        "name": "string",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "alternateRangeURI": "xsd:string",
                                        "shortDisplay": "String",
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": "stringField",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={1}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <TextFieldOptions
                                            domainIndex={1}
                                            index={1}
                                            label="Text Options"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                            scale={4000}
                                            scannable={false}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        title="Text Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Text Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              <p>
                                                                Sets the maximum character count for a text field.
                                                              </p>
                                                              <p>
                                                                Anything over 4,000 characters will use the 'Unlimited' designation.
                                                              </p>
                                                            </React.Fragment>
                                                          }
                                                          label="Maximum Text Length"
                                                        >
                                                          Maximum Text 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Length
                                                            <LabelHelpTip
                                                              title="Maximum Text Length"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip5"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Maximum Text Length"
                                                                  >
                                                                    <React.Fragment>
                                                                      <p>
                                                                        Sets the maximum character count for a text field.
                                                                      </p>
                                                                      <p>
                                                                        Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                      </p>
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    className="domain-text-options-col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="domain-text-options-col col-xs-12"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        checked={false}
                                                        className="domain-text-options-radio1 domain-field-float-left"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-maxLength-1-1"
                                                        onChange={[Function]}
                                                        type="radio"
                                                        value="maxLength"
                                                      >
                                                        <input
                                                          checked={false}
                                                          className="domain-text-options-radio1 domain-field-float-left form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-maxLength-1-1"
                                                          onChange={[Function]}
                                                          type="radio"
                                                          value="maxLength"
                                                        />
                                                      </FormControl>
                                                      <div>
                                                        Unlimited
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        checked={true}
                                                        className="domain-text-options-radio2 domain-field-float-left"
                                                        componentClass="input"
                                                        id="domainpropertiesrow-customLength-1-1"
                                                        onChange={[Function]}
                                                        type="radio"
                                                        value="customLength"
                                                      >
                                                        <input
                                                          checked={true}
                                                          className="domain-text-options-radio2 domain-field-float-left form-control"
                                                          id="domainpropertiesrow-customLength-1-1"
                                                          onChange={[Function]}
                                                          type="radio"
                                                          value="customLength"
                                                        />
                                                      </FormControl>
                                                      <span
                                                        className="domain-text-options-length domain-field-float-left"
                                                      >
                                                        No longer than 
                                                        <FormControl
                                                          bsClass="form-control"
                                                          className="domain-text-length-field"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-scale-1-1"
                                                          name="domainpropertiesrow-scale"
                                                          onChange={[Function]}
                                                          type="number"
                                                          value={4000}
                                                        >
                                                          <input
                                                            className="domain-text-length-field form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-scale-1-1"
                                                            name="domainpropertiesrow-scale"
                                                            onChange={[Function]}
                                                            type="number"
                                                            value={4000}
                                                          />
                                                        </FormControl>
                                                         characters
                                                      </span>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Memo()
                                                domainIndex={1}
                                                index={1}
                                                label="Text Options"
                                                lockType="NotLocked"
                                                onChange={[Function]}
                                                scale={4000}
                                                scannable={false}
                                              />
                                            </div>
                                          </TextFieldOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "stringField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Text",
                                                  "name": "string",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": "xsd:string",
                                                  "shortDisplay": "String",
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Text",
                                                    "name": "string",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": "xsd:string",
                                                    "shortDisplay": "String",
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "stringField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-1"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-1"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-1"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-1"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip6"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-1"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-1"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip7"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-1"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-1"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": "stringField",
                                                "PHI": undefined,
                                                "propertyId": 1,
                                                "propertyURI": "test",
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Text",
                                                  "name": "string",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": "xsd:string",
                                                  "shortDisplay": "String",
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Text",
                                                    "name": "string",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": "xsd:string",
                                                    "shortDisplay": "String",
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": "stringField",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting and Validation Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting and Validation Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip8"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-1"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<RegexValidatorHelpText />}
                                                            label="Create Regular Expression Validator"
                                                          >
                                                            Create Regular Expression 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Validator
                                                              <LabelHelpTip
                                                                title="Create Regular Expression Validator"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip9"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Regular Expression Validator"
                                                                    >
                                                                      <RegexValidatorHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-regexValidator-1-1"
                                                            name="domainpropertiesrow-regexValidator"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Regex
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;

exports[`DomainRow with empty domain form 1`] = `
<DragDropContext
  onDragEnd={[MockFunction]}
>
  <ErrorBoundary>
    <App
      contextId="0"
      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
      onDragEnd={[MockFunction]}
      setCallbacks={[Function]}
    >
      <Provider
        context={
          {
            "$$typeof": Symbol(react.context),
            "Consumer": {
              "$$typeof": Symbol(react.context),
              "_calculateChangedBits": null,
              "_context": [Circular],
            },
            "Provider": {
              "$$typeof": Symbol(react.provider),
              "_context": [Circular],
            },
            "_calculateChangedBits": null,
            "_currentRenderer": {},
            "_currentRenderer2": null,
            "_currentValue": null,
            "_currentValue2": null,
            "_threadCount": 0,
          }
        }
        store={
          {
            "@@observable": [Function],
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
          }
        }
      >
        <Connect(Droppable)
          direction="vertical"
          droppableId="domain-form-droppable"
          getContainerForClone={[Function]}
          ignoreContainerClipping={false}
          isCombineEnabled={false}
          isDropDisabled={false}
          mode="standard"
          renderClone={null}
          type="DEFAULT"
        >
          <Droppable
            direction="vertical"
            droppableId="domain-form-droppable"
            getContainerForClone={[Function]}
            ignoreContainerClipping={false}
            isCombineEnabled={false}
            isDropDisabled={false}
            mode="standard"
            placeholder={null}
            renderClone={null}
            shouldAnimatePlaceholder={false}
            snapshot={
              {
                "draggingFromThisWith": null,
                "draggingOverWith": null,
                "isDraggingOver": false,
                "isUsingPlaceholder": false,
              }
            }
            type="DEFAULT"
            updateViewportMaxScroll={[Function]}
            useClone={null}
          >
            <div
              data-rbd-droppable-context-id="0"
              data-rbd-droppable-id="domain-form-droppable"
            >
              <DomainRow
                allowUniqueConstraintProperties={false}
                availableTypes={
                  Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Multi-Line Text",
                      "name": "multiLine",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Boolean",
                      "name": "boolean",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                      "alternateRangeURI": "xsd:boolean",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Integer",
                      "name": "int",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": "xsd:int",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Decimal (floating point)",
                      "name": "double",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": "xsd:double",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date",
                      "name": "date",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#date",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Time",
                      "name": "time",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#time",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Date Time",
                      "name": "dateTime",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": "xsd:dateTime",
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#flag",
                      "display": "Flag",
                      "name": "flag",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "File",
                      "name": "fileLink",
                      "rangeURI": "http://cpas.fhcrc.org/exp/xml#fileLink",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Attachment",
                      "name": "attachment",
                      "rangeURI": "http://www.labkey.org/exp/xml#attachment",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "User",
                      "name": "users",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": "core",
                      "lookupQuery": "users",
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                      "display": "Subject/Participant",
                      "name": "ParticipantId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#sample",
                      "display": "Sample",
                      "name": "sample",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/exp/xml#smiles",
                      "display": "SMILES",
                      "name": "smiles",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#conceptCode",
                      "display": "Ontology Lookup",
                      "name": "ontologyLookup",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit Date",
                      "name": "visitDate",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://cpas.labkey.com/Study#VisitId",
                      "display": "Visit ID",
                      "name": "visitId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#storageUniqueId",
                      "display": "Unique ID",
                      "name": "uniqueId",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    Immutable.Record {
                      "conceptURI": "http://www.labkey.org/types#textChoice",
                      "display": "Text Choice",
                      "name": "textChoice",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                  ]
                }
                defaultDefaultValueType="FIXED_EDITABLE"
                defaultValueOptions={
                  Immutable.List [
                    "FIXED_EDITABLE",
                    "LAST_ENTERED",
                    "FIXED_NON_EDITABLE",
                  ]
                }
                domainFormDisplayOptions={
                  {
                    "disableMvEnabled": false,
                    "hideAddFieldsButton": false,
                    "hideConditionalFormatting": false,
                    "hideFilePropertyType": false,
                    "hideImportData": false,
                    "hideImportExport": false,
                    "hideRequired": false,
                    "hideStudyPropertyTypes": false,
                    "hideTextOptions": false,
                    "hideValidators": false,
                    "isDragDisabled": false,
                    "phiLevelDisabled": false,
                  }
                }
                domainIndex={1}
                dragging={false}
                expandTransition={300}
                expanded={false}
                field={
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "lookupIsValid": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": undefined,
                    "PHI": undefined,
                    "propertyId": undefined,
                    "propertyURI": undefined,
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": undefined,
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "uniqueConstraint": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": undefined,
                      "rangeURI": undefined,
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  }
                }
                helpNoun="domain"
                index={1}
                maxPhiLevel="Restricted"
                onChange={[MockFunction]}
                onDelete={[MockFunction]}
                onExpand={[MockFunction]}
                showDefaultValueSettings={true}
              >
                <PublicDraggable
                  draggableId="domainpropertiesrow-domaindrag-1-1"
                  index={1}
                >
                  <PrivateDraggable
                    canDragInteractiveElements={false}
                    draggableId="domainpropertiesrow-domaindrag-1-1"
                    index={1}
                    isClone={false}
                    isEnabled={true}
                    shouldRespectForcePress={false}
                  >
                    <Connect(Draggable)
                      canDragInteractiveElements={false}
                      draggableId="domainpropertiesrow-domaindrag-1-1"
                      index={1}
                      isClone={false}
                      isEnabled={true}
                      shouldRespectForcePress={false}
                    >
                      <Draggable
                        canDragInteractiveElements={false}
                        draggableId="domainpropertiesrow-domaindrag-1-1"
                        dropAnimationFinished={[Function]}
                        index={1}
                        isClone={false}
                        isEnabled={true}
                        mapped={
                          {
                            "combineTargetFor": null,
                            "offset": {
                              "x": 0,
                              "y": 0,
                            },
                            "shouldAnimateDisplacement": true,
                            "snapshot": {
                              "combineTargetFor": null,
                              "combineWith": null,
                              "draggingOver": null,
                              "dropAnimation": null,
                              "isClone": false,
                              "isDragging": false,
                              "isDropAnimating": false,
                              "mode": null,
                            },
                            "type": "SECONDARY",
                          }
                        }
                        shouldRespectForcePress={false}
                      >
                        <div
                          className="domain-field-row domain-row-border-default"
                          data-rbd-draggable-context-id="0"
                          data-rbd-draggable-id="domainpropertiesrow-domaindrag-1-1"
                          onTransitionEnd={null}
                          style={
                            {
                              "transform": null,
                              "transition": null,
                            }
                          }
                          tabIndex={1}
                        >
                          <Row
                            bsClass="row"
                            className="domain-row-container"
                            componentClass="div"
                            key="domainpropertiesrow-domainrow-1-1"
                          >
                            <div
                              className="domain-row-container row"
                            >
                              <div
                                aria-describedby="rbd-hidden-text-0-hidden-text-0"
                                className="domain-row-handle"
                                data-rbd-drag-handle-context-id="0"
                                data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-1-1"
                                draggable={false}
                                onDragStart={[Function]}
                                role="button"
                                tabIndex={0}
                              >
                                <DragDropHandle>
                                  <div
                                    className="drag-drop-handle"
                                  >
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                    <span
                                      className="fa fa-ellipsis-v"
                                    />
                                  </div>
                                </DragDropHandle>
                              </div>
                              <div
                                className="domain-row-action-section"
                              >
                                <Checkbox
                                  bsClass="checkbox"
                                  checked={false}
                                  className="domain-field-check-icon"
                                  disabled={false}
                                  id="domainpropertiesrow-selected-1-1"
                                  inline={false}
                                  name="domainpropertiesrow-selected"
                                  onChange={[Function]}
                                  title=""
                                >
                                  <div
                                    className="domain-field-check-icon checkbox"
                                  >
                                    <label
                                      title=""
                                    >
                                      <input
                                        checked={false}
                                        disabled={false}
                                        id="domainpropertiesrow-selected-1-1"
                                        name="domainpropertiesrow-selected"
                                        onChange={[Function]}
                                        type="checkbox"
                                      />
                                    </label>
                                  </div>
                                </Checkbox>
                                <FieldExpansionToggle
                                  cls="domain-field-expand-icon"
                                  collapsedTitle="Show additional field properties"
                                  expanded={false}
                                  expandedTitle="Hide additional field properties"
                                  id="domainpropertiesrow-expand-1-1"
                                  onClick={[Function]}
                                >
                                  <div
                                    className="field-icon domain-field-expand-icon"
                                    id="domainpropertiesrow-expand-1-1"
                                    onClick={[Function]}
                                    title="Show additional field properties"
                                  >
                                    <span
                                      className="fa fa-lg fa-chevron-right"
                                    />
                                  </div>
                                </FieldExpansionToggle>
                              </div>
                              <div
                                className="domain-row-main"
                              >
                                <Col
                                  bsClass="col"
                                  className="domain-row-base-fields domain-row-base-fields-position"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                  >
                                    <div
                                      id="domainpropertiesrow-row-1-1"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={6}
                                      >
                                        <div
                                          className="col-xs-6"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="input"
                                            disabled={false}
                                            id="domainpropertiesrow-name-1-1"
                                            name="domainpropertiesrow-name"
                                            onChange={[Function]}
                                            type="text"
                                            value=""
                                          >
                                            <input
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-name-1-1"
                                              name="domainpropertiesrow-name"
                                              onChange={[Function]}
                                              type="text"
                                              value=""
                                            />
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={4}
                                      >
                                        <div
                                          className="col-xs-4"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            componentClass="select"
                                            disabled={false}
                                            id="domainpropertiesrow-type-1-1"
                                            name="domainpropertiesrow-type"
                                            onChange={[Function]}
                                            value="string"
                                          >
                                            <select
                                              className="form-control"
                                              disabled={false}
                                              id="domainpropertiesrow-type-1-1"
                                              name="domainpropertiesrow-type"
                                              onChange={[Function]}
                                              value="string"
                                            >
                                              <option
                                                key="attachment"
                                                value="attachment"
                                              >
                                                Attachment
                                              </option>
                                              <option
                                                key="boolean"
                                                value="boolean"
                                              >
                                                Boolean
                                              </option>
                                              <option
                                                key="date"
                                                value="date"
                                              >
                                                Date
                                              </option>
                                              <option
                                                key="dateTime"
                                                value="dateTime"
                                              >
                                                Date Time
                                              </option>
                                              <option
                                                key="double"
                                                value="double"
                                              >
                                                Decimal (floating point)
                                              </option>
                                              <option
                                                key="fileLink"
                                                value="fileLink"
                                              >
                                                File
                                              </option>
                                              <option
                                                key="flag"
                                                value="flag"
                                              >
                                                Flag
                                              </option>
                                              <option
                                                key="int"
                                                value="int"
                                              >
                                                Integer
                                              </option>
                                              <option
                                                key="lookup"
                                                value="lookup"
                                              >
                                                Lookup
                                              </option>
                                              <option
                                                key="multiLine"
                                                value="multiLine"
                                              >
                                                Multi-Line Text
                                              </option>
                                              <option
                                                key="ontologyLookup"
                                                value="ontologyLookup"
                                              >
                                                Ontology Lookup
                                              </option>
                                              <option
                                                key="sample"
                                                value="sample"
                                              >
                                                Sample
                                              </option>
                                              <option
                                                key="smiles"
                                                value="smiles"
                                              >
                                                SMILES
                                              </option>
                                              <option
                                                key="ParticipantId"
                                                value="ParticipantId"
                                              >
                                                Subject/Participant
                                              </option>
                                              <option
                                                key="string"
                                                value="string"
                                              >
                                                Text
                                              </option>
                                              <option
                                                key="textChoice"
                                                value="textChoice"
                                              >
                                                Text Choice
                                              </option>
                                              <option
                                                key="time"
                                                value="time"
                                              >
                                                Time
                                              </option>
                                              <option
                                                key="uniqueId"
                                                value="uniqueId"
                                              >
                                                Unique ID
                                              </option>
                                              <option
                                                key="users"
                                                value="users"
                                              >
                                                User
                                              </option>
                                              <option
                                                key="visitDate"
                                                value="visitDate"
                                              >
                                                Visit Date
                                              </option>
                                              <option
                                                key="visitId"
                                                value="visitId"
                                              >
                                                Visit ID
                                              </option>
                                            </select>
                                          </FormControl>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={2}
                                      >
                                        <div
                                          className="col-xs-2"
                                        >
                                          <div
                                            className="domain-field-checkbox-container"
                                          >
                                            <Checkbox
                                              bsClass="checkbox"
                                              checked={false}
                                              className="domain-field-checkbox"
                                              disabled={false}
                                              id="domainpropertiesrow-required-1-1"
                                              inline={false}
                                              name="domainpropertiesrow-required"
                                              onChange={[Function]}
                                              title=""
                                            >
                                              <div
                                                className="domain-field-checkbox checkbox"
                                              >
                                                <label
                                                  title=""
                                                >
                                                  <input
                                                    checked={false}
                                                    disabled={false}
                                                    id="domainpropertiesrow-required-1-1"
                                                    name="domainpropertiesrow-required"
                                                    onChange={[Function]}
                                                    type="checkbox"
                                                  />
                                                </label>
                                              </div>
                                            </Checkbox>
                                          </div>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </Col>
                                <Col
                                  bsClass="col"
                                  className="domain-row-details-container"
                                  componentClass="div"
                                  xs={6}
                                >
                                  <div
                                    className="domain-row-details-container col-xs-6"
                                  >
                                    <div
                                      className="domain-field-details"
                                      id="domainpropertiesrow-details-1-1"
                                    >
                                      New Field
                                    </div>
                                    <div
                                      className="domain-field-buttons"
                                    >
                                      <Memo()
                                        iconCls="domain-field-delete-icon"
                                        id="domainpropertiesrow-delete-1-1"
                                        onDelete={[Function]}
                                        title="Remove field"
                                      >
                                        <span
                                          className="field-icon"
                                          id="domainpropertiesrow-delete-1-1"
                                          onClick={[Function]}
                                          title="Remove field"
                                        >
                                          <span
                                            className="fa fa-times-circle domain-field-delete-icon"
                                          />
                                        </span>
                                      </Memo()>
                                    </div>
                                  </div>
                                </Col>
                              </div>
                            </div>
                          </Row>
                          <Collapse
                            appear={false}
                            dimension="height"
                            getDimensionValue={[Function]}
                            in={false}
                            mountOnEnter={false}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <Transition
                              appear={false}
                              aria-expanded={null}
                              enter={true}
                              exit={true}
                              in={false}
                              mountOnEnter={false}
                              onEnter={[Function]}
                              onEntered={[Function]}
                              onEntering={[Function]}
                              onExit={[Function]}
                              onExited={[Function]}
                              onExiting={[Function]}
                              timeout={300}
                              unmountOnExit={false}
                            >
                              <div
                                aria-expanded={null}
                                className="collapse"
                              >
                                <DomainRowExpandedOptions
                                  domainFormDisplayOptions={
                                    {
                                      "disableMvEnabled": false,
                                      "hideAddFieldsButton": false,
                                      "hideConditionalFormatting": false,
                                      "hideFilePropertyType": false,
                                      "hideImportData": false,
                                      "hideImportExport": false,
                                      "hideRequired": false,
                                      "hideStudyPropertyTypes": false,
                                      "hideTextOptions": false,
                                      "hideValidators": false,
                                      "isDragDisabled": false,
                                      "phiLevelDisabled": false,
                                    }
                                  }
                                  domainIndex={1}
                                  field={
                                    Immutable.Record {
                                      "conceptURI": undefined,
                                      "conditionalFormats": Immutable.List [],
                                      "defaultScale": undefined,
                                      "defaultValueType": undefined,
                                      "defaultValue": undefined,
                                      "defaultDisplayValue": undefined,
                                      "description": undefined,
                                      "dimension": undefined,
                                      "excludeFromShifting": false,
                                      "format": undefined,
                                      "hidden": false,
                                      "importAliases": undefined,
                                      "label": undefined,
                                      "lookupContainer": undefined,
                                      "lookupQuery": undefined,
                                      "lookupSchema": undefined,
                                      "lookupValidator": undefined,
                                      "lookupIsValid": undefined,
                                      "measure": undefined,
                                      "mvEnabled": false,
                                      "name": undefined,
                                      "PHI": undefined,
                                      "propertyId": undefined,
                                      "propertyURI": undefined,
                                      "propertyValidators": Immutable.List [],
                                      "rangeValidators": Immutable.List [],
                                      "rangeURI": undefined,
                                      "regexValidators": Immutable.List [],
                                      "textChoiceValidator": undefined,
                                      "recommendedVariable": false,
                                      "uniqueConstraint": false,
                                      "required": false,
                                      "scale": 4000,
                                      "URL": undefined,
                                      "shownInDetailsView": true,
                                      "shownInInsertView": true,
                                      "shownInUpdateView": true,
                                      "visible": true,
                                      "dataType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Text",
                                        "name": "string",
                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                        "alternateRangeURI": "xsd:string",
                                        "shortDisplay": "String",
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "lookupQueryValue": undefined,
                                      "lookupType": Immutable.Record {
                                        "conceptURI": undefined,
                                        "display": "Lookup",
                                        "name": "lookup",
                                        "rangeURI": undefined,
                                        "alternateRangeURI": undefined,
                                        "shortDisplay": undefined,
                                        "lookupSchema": undefined,
                                        "lookupQuery": undefined,
                                      },
                                      "original": {
                                        "conceptURI": undefined,
                                        "dataType": Immutable.Record {
                                          "conceptURI": undefined,
                                          "display": "Text",
                                          "name": "string",
                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                          "alternateRangeURI": "xsd:string",
                                          "shortDisplay": "String",
                                          "lookupSchema": undefined,
                                          "lookupQuery": undefined,
                                        },
                                        "name": undefined,
                                        "rangeURI": undefined,
                                      },
                                      "updatedField": false,
                                      "isPrimaryKey": false,
                                      "lockType": "NotLocked",
                                      "wrappedColumnName": undefined,
                                      "disablePhiLevel": false,
                                      "lockExistingField": false,
                                      "sourceOntology": undefined,
                                      "conceptSubtree": undefined,
                                      "conceptLabelColumn": undefined,
                                      "conceptImportColumn": undefined,
                                      "principalConceptCode": undefined,
                                      "derivationDataScope": undefined,
                                      "selected": false,
                                      "scannable": false,
                                    }
                                  }
                                  index={1}
                                  onChange={[Function]}
                                  onMultiChange={[Function]}
                                  showingModal={[Function]}
                                >
                                  <div
                                    className="domain-row-container"
                                  >
                                    <div
                                      className="domain-row-container-expand-spacer"
                                    />
                                    <div
                                      className="domain-row-container-expanded"
                                    >
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <TextFieldOptions
                                            domainIndex={1}
                                            index={1}
                                            label="Text Options"
                                            lockType="NotLocked"
                                            onChange={[Function]}
                                            scale={4000}
                                            scannable={false}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        title="Text Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading"
                                                        >
                                                          Text Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              <p>
                                                                Sets the maximum character count for a text field.
                                                              </p>
                                                              <p>
                                                                Anything over 4,000 characters will use the 'Unlimited' designation.
                                                              </p>
                                                            </React.Fragment>
                                                          }
                                                          label="Maximum Text Length"
                                                        >
                                                          Maximum Text 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Length
                                                            <LabelHelpTip
                                                              title="Maximum Text Length"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip0"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Maximum Text Length"
                                                                  >
                                                                    <React.Fragment>
                                                                      <p>
                                                                        Sets the maximum character count for a text field.
                                                                      </p>
                                                                      <p>
                                                                        Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                      </p>
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    className="domain-text-options-col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="domain-text-options-col col-xs-12"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        checked={false}
                                                        className="domain-text-options-radio1 domain-field-float-left"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-maxLength-1-1"
                                                        onChange={[Function]}
                                                        type="radio"
                                                        value="maxLength"
                                                      >
                                                        <input
                                                          checked={false}
                                                          className="domain-text-options-radio1 domain-field-float-left form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-maxLength-1-1"
                                                          onChange={[Function]}
                                                          type="radio"
                                                          value="maxLength"
                                                        />
                                                      </FormControl>
                                                      <div>
                                                        Unlimited
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <FormControl
                                                        bsClass="form-control"
                                                        checked={true}
                                                        className="domain-text-options-radio2 domain-field-float-left"
                                                        componentClass="input"
                                                        id="domainpropertiesrow-customLength-1-1"
                                                        onChange={[Function]}
                                                        type="radio"
                                                        value="customLength"
                                                      >
                                                        <input
                                                          checked={true}
                                                          className="domain-text-options-radio2 domain-field-float-left form-control"
                                                          id="domainpropertiesrow-customLength-1-1"
                                                          onChange={[Function]}
                                                          type="radio"
                                                          value="customLength"
                                                        />
                                                      </FormControl>
                                                      <span
                                                        className="domain-text-options-length domain-field-float-left"
                                                      >
                                                        No longer than 
                                                        <FormControl
                                                          bsClass="form-control"
                                                          className="domain-text-length-field"
                                                          componentClass="input"
                                                          disabled={false}
                                                          id="domainpropertiesrow-scale-1-1"
                                                          name="domainpropertiesrow-scale"
                                                          onChange={[Function]}
                                                          type="number"
                                                          value={4000}
                                                        >
                                                          <input
                                                            className="domain-text-length-field form-control"
                                                            disabled={false}
                                                            id="domainpropertiesrow-scale-1-1"
                                                            name="domainpropertiesrow-scale"
                                                            onChange={[Function]}
                                                            type="number"
                                                            value={4000}
                                                          />
                                                        </FormControl>
                                                         characters
                                                      </span>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Memo()
                                                domainIndex={1}
                                                index={1}
                                                label="Text Options"
                                                lockType="NotLocked"
                                                onChange={[Function]}
                                                scale={4000}
                                                scannable={false}
                                              />
                                            </div>
                                          </TextFieldOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <NameAndLinkingOptions
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": undefined,
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": undefined,
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": undefined,
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Text",
                                                  "name": "string",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": "xsd:string",
                                                  "shortDisplay": "String",
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": undefined,
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Text",
                                                    "name": "string",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": "xsd:string",
                                                    "shortDisplay": "String",
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": undefined,
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Name and Linking Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Name and Linking Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={5}
                                                  >
                                                    <div
                                                      className="col-xs-5"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Description
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="textarea"
                                                        disabled={false}
                                                        id="domainpropertiesrow-description-1-1"
                                                        name="domainpropertiesrow-description"
                                                        onChange={[Function]}
                                                        rows={4}
                                                        value=""
                                                      >
                                                        <textarea
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-description-1-1"
                                                          name="domainpropertiesrow-description"
                                                          onChange={[Function]}
                                                          rows={4}
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={3}
                                                  >
                                                    <div
                                                      className="col-xs-3"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        Label
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-label-1-1"
                                                        name="domainpropertiesrow-label"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-label-1-1"
                                                          name="domainpropertiesrow-label"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Define alternate field names to be used when importing from a file.
                                                              <br />
                                                              <br />
                                                              Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                            </React.Fragment>
                                                          }
                                                          label="Import Aliases"
                                                        >
                                                          Import 
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            Aliases
                                                            <LabelHelpTip
                                                              title="Import Aliases"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip1"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="Import Aliases"
                                                                  >
                                                                    <React.Fragment>
                                                                      Define alternate field names to be used when importing from a file.
                                                                      <br />
                                                                      <br />
                                                                      Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-importAliases-1-1"
                                                        name="domainpropertiesrow-importAliases"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-importAliases-1-1"
                                                          name="domainpropertiesrow-importAliases"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={4}
                                                  >
                                                    <div
                                                      className="col-xs-4"
                                                    >
                                                      <div
                                                        className="domain-field-label"
                                                      >
                                                        <DomainFieldLabel
                                                          helpTipBody={
                                                            <React.Fragment>
                                                              Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                              <br />
                                                              <br />
                                                              Learn more about using 
                                                              <HelpLink
                                                                topic="urlEncoding"
                                                              >
                                                                URL Formatting Options
                                                              </HelpLink>
                                                              .
                                                            </React.Fragment>
                                                          }
                                                          label="URL"
                                                        >
                                                          <span
                                                            className="domain-no-wrap"
                                                          >
                                                            URL
                                                            <LabelHelpTip
                                                              title="URL"
                                                            >
                                                              <OverlayTrigger
                                                                id="label-help-tip2"
                                                                overlay={
                                                                  <Popover
                                                                    id="label-help-tip-popover"
                                                                    title="URL"
                                                                  >
                                                                    <React.Fragment>
                                                                      Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                      <br />
                                                                      <br />
                                                                      Learn more about using 
                                                                      <HelpLink
                                                                        topic="urlEncoding"
                                                                      >
                                                                        URL Formatting Options
                                                                      </HelpLink>
                                                                      .
                                                                    </React.Fragment>
                                                                  </Popover>
                                                                }
                                                              >
                                                                <div
                                                                  className="overlay-trigger"
                                                                  onClick={[Function]}
                                                                  onMouseEnter={[Function]}
                                                                  onMouseLeave={[Function]}
                                                                >
                                                                  <span
                                                                    className="label-help-target"
                                                                  >
                                                                    <span
                                                                      className="label-help-icon fa fa-question-circle"
                                                                    />
                                                                  </span>
                                                                </div>
                                                              </OverlayTrigger>
                                                            </LabelHelpTip>
                                                          </span>
                                                        </DomainFieldLabel>
                                                      </div>
                                                      <FormControl
                                                        bsClass="form-control"
                                                        componentClass="input"
                                                        disabled={false}
                                                        id="domainpropertiesrow-URL-1-1"
                                                        name="domainpropertiesrow-URL"
                                                        onChange={[Function]}
                                                        type="text"
                                                        value=""
                                                      >
                                                        <input
                                                          className="form-control"
                                                          disabled={false}
                                                          id="domainpropertiesrow-URL-1-1"
                                                          name="domainpropertiesrow-URL"
                                                          onChange={[Function]}
                                                          type="text"
                                                          value=""
                                                        />
                                                      </FormControl>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </NameAndLinkingOptions>
                                        </div>
                                      </Col>
                                      <Col
                                        bsClass="col"
                                        componentClass="div"
                                        xs={12}
                                      >
                                        <div
                                          className="col-xs-12"
                                        >
                                          <ConditionalFormattingAndValidation
                                            domainFormDisplayOptions={
                                              {
                                                "disableMvEnabled": false,
                                                "hideAddFieldsButton": false,
                                                "hideConditionalFormatting": false,
                                                "hideFilePropertyType": false,
                                                "hideImportData": false,
                                                "hideImportExport": false,
                                                "hideRequired": false,
                                                "hideStudyPropertyTypes": false,
                                                "hideTextOptions": false,
                                                "hideValidators": false,
                                                "isDragDisabled": false,
                                                "phiLevelDisabled": false,
                                              }
                                            }
                                            domainIndex={1}
                                            field={
                                              Immutable.Record {
                                                "conceptURI": undefined,
                                                "conditionalFormats": Immutable.List [],
                                                "defaultScale": undefined,
                                                "defaultValueType": undefined,
                                                "defaultValue": undefined,
                                                "defaultDisplayValue": undefined,
                                                "description": undefined,
                                                "dimension": undefined,
                                                "excludeFromShifting": false,
                                                "format": undefined,
                                                "hidden": false,
                                                "importAliases": undefined,
                                                "label": undefined,
                                                "lookupContainer": undefined,
                                                "lookupQuery": undefined,
                                                "lookupSchema": undefined,
                                                "lookupValidator": undefined,
                                                "lookupIsValid": undefined,
                                                "measure": undefined,
                                                "mvEnabled": false,
                                                "name": undefined,
                                                "PHI": undefined,
                                                "propertyId": undefined,
                                                "propertyURI": undefined,
                                                "propertyValidators": Immutable.List [],
                                                "rangeValidators": Immutable.List [],
                                                "rangeURI": undefined,
                                                "regexValidators": Immutable.List [],
                                                "textChoiceValidator": undefined,
                                                "recommendedVariable": false,
                                                "uniqueConstraint": false,
                                                "required": false,
                                                "scale": 4000,
                                                "URL": undefined,
                                                "shownInDetailsView": true,
                                                "shownInInsertView": true,
                                                "shownInUpdateView": true,
                                                "visible": true,
                                                "dataType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Text",
                                                  "name": "string",
                                                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                  "alternateRangeURI": "xsd:string",
                                                  "shortDisplay": "String",
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "lookupQueryValue": undefined,
                                                "lookupType": Immutable.Record {
                                                  "conceptURI": undefined,
                                                  "display": "Lookup",
                                                  "name": "lookup",
                                                  "rangeURI": undefined,
                                                  "alternateRangeURI": undefined,
                                                  "shortDisplay": undefined,
                                                  "lookupSchema": undefined,
                                                  "lookupQuery": undefined,
                                                },
                                                "original": {
                                                  "conceptURI": undefined,
                                                  "dataType": Immutable.Record {
                                                    "conceptURI": undefined,
                                                    "display": "Text",
                                                    "name": "string",
                                                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                    "alternateRangeURI": "xsd:string",
                                                    "shortDisplay": "String",
                                                    "lookupSchema": undefined,
                                                    "lookupQuery": undefined,
                                                  },
                                                  "name": undefined,
                                                  "rangeURI": undefined,
                                                },
                                                "updatedField": false,
                                                "isPrimaryKey": false,
                                                "lockType": "NotLocked",
                                                "wrappedColumnName": undefined,
                                                "disablePhiLevel": false,
                                                "lockExistingField": false,
                                                "sourceOntology": undefined,
                                                "conceptSubtree": undefined,
                                                "conceptLabelColumn": undefined,
                                                "conceptImportColumn": undefined,
                                                "principalConceptCode": undefined,
                                                "derivationDataScope": undefined,
                                                "selected": false,
                                                "scannable": false,
                                              }
                                            }
                                            index={1}
                                            onChange={[Function]}
                                            showingModal={[Function]}
                                          >
                                            <div>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <SectionHeading
                                                        cls="domain-field-section-hdr"
                                                        title="Conditional Formatting and Validation Options"
                                                      >
                                                        <div
                                                          className="domain-field-section-heading domain-field-section-hdr"
                                                        >
                                                          Conditional Formatting and Validation Options
                                                        </div>
                                                      </SectionHeading>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                              <Row
                                                bsClass="row"
                                                componentClass="div"
                                              >
                                                <div
                                                  className="row"
                                                >
                                                  <Col
                                                    bsClass="col"
                                                    componentClass="div"
                                                    xs={12}
                                                  >
                                                    <div
                                                      className="col-xs-12"
                                                    >
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<ConditionalFormatHelpText />}
                                                            label="Create Conditional Format Criteria"
                                                          >
                                                            Create Conditional Format 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Criteria
                                                              <LabelHelpTip
                                                                title="Create Conditional Format Criteria"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip3"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Conditional Format Criteria"
                                                                    >
                                                                      <ConditionalFormatHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-conditionalFormat-1-1"
                                                            name="domainpropertiesrow-conditionalFormat"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Format
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                      <div
                                                        className="domain-validation-group"
                                                      >
                                                        <div
                                                          className="domain-field-label domain-no-wrap"
                                                        >
                                                          <DomainFieldLabel
                                                            helpTipBody={<RegexValidatorHelpText />}
                                                            label="Create Regular Expression Validator"
                                                          >
                                                            Create Regular Expression 
                                                            <span
                                                              className="domain-no-wrap"
                                                            >
                                                              Validator
                                                              <LabelHelpTip
                                                                title="Create Regular Expression Validator"
                                                              >
                                                                <OverlayTrigger
                                                                  id="label-help-tip4"
                                                                  overlay={
                                                                    <Popover
                                                                      id="label-help-tip-popover"
                                                                      title="Create Regular Expression Validator"
                                                                    >
                                                                      <RegexValidatorHelpText />
                                                                    </Popover>
                                                                  }
                                                                >
                                                                  <div
                                                                    className="overlay-trigger"
                                                                    onClick={[Function]}
                                                                    onMouseEnter={[Function]}
                                                                    onMouseLeave={[Function]}
                                                                  >
                                                                    <span
                                                                      className="label-help-target"
                                                                    >
                                                                      <span
                                                                        className="label-help-icon fa fa-question-circle"
                                                                      />
                                                                    </span>
                                                                  </div>
                                                                </OverlayTrigger>
                                                              </LabelHelpTip>
                                                            </span>
                                                          </DomainFieldLabel>
                                                        </div>
                                                        <div>
                                                          <button
                                                            className="domain-validation-button btn btn-default"
                                                            disabled={false}
                                                            id="domainpropertiesrow-regexValidator-1-1"
                                                            name="domainpropertiesrow-regexValidator"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            Add Regex
                                                          </button>
                                                          <span
                                                            className="domain-text-label"
                                                          >
                                                            None Set
                                                          </span>
                                                        </div>
                                                      </div>
                                                    </div>
                                                  </Col>
                                                </div>
                                              </Row>
                                            </div>
                                          </ConditionalFormattingAndValidation>
                                        </div>
                                      </Col>
                                    </div>
                                  </div>
                                </DomainRowExpandedOptions>
                              </div>
                            </Transition>
                          </Collapse>
                        </div>
                      </Draggable>
                    </Connect(Draggable)>
                  </PrivateDraggable>
                </PublicDraggable>
              </DomainRow>
              <AnimateInOut
                on={null}
                shouldAnimate={false}
              />
            </div>
          </Droppable>
        </Connect(Droppable)>
      </Provider>
    </App>
  </ErrorBoundary>
</DragDropContext>
`;
