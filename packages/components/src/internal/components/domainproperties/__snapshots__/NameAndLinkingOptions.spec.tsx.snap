// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NameAndLinkingOptions Name and Linking options 1`] = `
<NameAndLinkingOptions
  appPropertiesOnly={false}
  domainIndex={1}
  field={
    Immutable.Record {
      "conceptURI": undefined,
      "conditionalFormats": Immutable.List [],
      "defaultScale": undefined,
      "defaultValueType": undefined,
      "defaultValue": undefined,
      "defaultDisplayValue": undefined,
      "description": "This is a description",
      "dimension": undefined,
      "excludeFromShifting": false,
      "format": undefined,
      "hidden": false,
      "importAliases": "This is an alias",
      "label": "This is a label",
      "lookupContainer": undefined,
      "lookupQuery": undefined,
      "lookupSchema": undefined,
      "lookupValidator": undefined,
      "lookupIsValid": undefined,
      "measure": undefined,
      "mvEnabled": false,
      "name": "key",
      "PHI": undefined,
      "propertyId": 1,
      "propertyURI": "test",
      "propertyValidators": Immutable.List [],
      "rangeValidators": Immutable.List [],
      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      "regexValidators": Immutable.List [],
      "textChoiceValidator": undefined,
      "recommendedVariable": false,
      "uniqueConstraint": false,
      "required": false,
      "scale": 4000,
      "URL": "This is a URL",
      "shownInDetailsView": true,
      "shownInInsertView": true,
      "shownInUpdateView": true,
      "visible": true,
      "dataType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Text",
        "name": "string",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": "xsd:string",
        "shortDisplay": "String",
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "lookupQueryValue": undefined,
      "lookupType": Immutable.Record {
        "conceptURI": undefined,
        "display": "Lookup",
        "name": "lookup",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
        "alternateRangeURI": undefined,
        "shortDisplay": undefined,
        "lookupSchema": undefined,
        "lookupQuery": undefined,
      },
      "original": {
        "conceptURI": undefined,
        "dataType": Immutable.Record {
          "conceptURI": undefined,
          "display": "Text",
          "name": "string",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
          "alternateRangeURI": "xsd:string",
          "shortDisplay": "String",
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "name": "key",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
      },
      "updatedField": false,
      "isPrimaryKey": false,
      "lockType": "NotLocked",
      "wrappedColumnName": undefined,
      "disablePhiLevel": false,
      "lockExistingField": false,
      "sourceOntology": undefined,
      "conceptSubtree": undefined,
      "conceptLabelColumn": undefined,
      "conceptImportColumn": undefined,
      "principalConceptCode": undefined,
      "derivationDataScope": undefined,
      "selected": false,
      "scannable": false,
    }
  }
  index={1}
  onChange={[Function]}
>
  <div>
    <div
      className="row"
    >
      <div
        className="col-xs-12"
      >
        <SectionHeading
          cls="domain-field-section-hdr"
          title="Name and Linking Options"
        >
          <div
            className="domain-field-section-heading domain-field-section-hdr"
          >
            Name and Linking Options
          </div>
        </SectionHeading>
      </div>
    </div>
    <div
      className="row"
    >
      <div
        className="col-xs-5"
      >
        <div
          className="domain-field-label"
        >
          Description
        </div>
        <textarea
          className="form-control"
          disabled={false}
          id="domainpropertiesrow-description-1-1"
          name="domainpropertiesrow-description"
          onChange={[Function]}
          rows={4}
          value="This is a description"
        />
      </div>
      <div
        className="col-xs-3"
      >
        <div
          className="domain-field-label"
        >
          Label
        </div>
        <input
          className="form-control"
          disabled={false}
          id="domainpropertiesrow-label-1-1"
          name="domainpropertiesrow-label"
          onChange={[Function]}
          type="text"
          value="This is a label"
        />
        <div
          className="domain-field-label"
        >
          <DomainFieldLabel
            helpTipBody={
              <React.Fragment>
                Define alternate field names to be used when importing from a file.
                <br />
                <br />
                Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
              </React.Fragment>
            }
            label="Import Aliases"
          >
            Import 
            <span
              className="domain-no-wrap"
            >
              Aliases
              <LabelHelpTip
                title="Import Aliases"
              >
                <OverlayTrigger
                  id="label-help-tip0"
                  overlay={
                    <Popover
                      id="label-help-tip-popover"
                      title="Import Aliases"
                    >
                      <React.Fragment>
                        Define alternate field names to be used when importing from a file.
                        <br />
                        <br />
                        Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                      </React.Fragment>
                    </Popover>
                  }
                >
                  <div
                    className="overlay-trigger"
                    onClick={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <span
                      className="label-help-target"
                    >
                      <span
                        className="label-help-icon fa fa-question-circle"
                      />
                    </span>
                  </div>
                </OverlayTrigger>
              </LabelHelpTip>
            </span>
          </DomainFieldLabel>
        </div>
        <input
          className="form-control"
          disabled={false}
          id="domainpropertiesrow-importAliases-1-1"
          name="domainpropertiesrow-importAliases"
          onChange={[Function]}
          type="text"
          value="This is an alias"
        />
      </div>
      <div
        className="col-xs-4"
      >
        <div
          className="domain-field-label"
        >
          <DomainFieldLabel
            helpTipBody={
              <React.Fragment>
                Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                <br />
                <br />
                Learn more about using 
                <HelpLink
                  topic="urlEncoding"
                >
                  URL Formatting Options
                </HelpLink>
                .
              </React.Fragment>
            }
            label="URL"
          >
            <span
              className="domain-no-wrap"
            >
              URL
              <LabelHelpTip
                title="URL"
              >
                <OverlayTrigger
                  id="label-help-tip1"
                  overlay={
                    <Popover
                      id="label-help-tip-popover"
                      title="URL"
                    >
                      <React.Fragment>
                        Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                        <br />
                        <br />
                        Learn more about using 
                        <HelpLink
                          topic="urlEncoding"
                        >
                          URL Formatting Options
                        </HelpLink>
                        .
                      </React.Fragment>
                    </Popover>
                  }
                >
                  <div
                    className="overlay-trigger"
                    onClick={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <span
                      className="label-help-target"
                    >
                      <span
                        className="label-help-icon fa fa-question-circle"
                      />
                    </span>
                  </div>
                </OverlayTrigger>
              </LabelHelpTip>
            </span>
          </DomainFieldLabel>
        </div>
        <input
          className="form-control"
          disabled={false}
          id="domainpropertiesrow-URL-1-1"
          name="domainpropertiesrow-URL"
          onChange={[Function]}
          type="text"
          value="This is a URL"
        />
      </div>
    </div>
  </div>
</NameAndLinkingOptions>
`;
