// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SampleTypeDesigner custom properties 1`] = `
<BaseDomainDesigner
  domains={
    Immutable.List [
      Immutable.Record {
        "name": undefined,
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      },
    ]
  }
  hasValidProperties={false}
  onCancel={[MockFunction]}
  onFinish={[Function]}
  saveBtnText="Finish it up"
  submitting={false}
  visitedPanels={Immutable.List []}
>
  <ComponentWithDomainPropertiesPanelCollapse
    api={
      {
        "assay": {
          "clearAssayDefinitionCache": [MockFunction],
          "getAssayDefinitions": [MockFunction],
          "getProtocol": [MockFunction],
          "importAssayRun": [MockFunction],
        },
        "domain": {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [Function],
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        },
        "entity": {
          "getDataOperationConfirmationData": [MockFunction],
          "getDeleteConfirmationData": [MockFunction],
          "getEntityTypeData": [MockFunction],
          "getMoveConfirmationData": [MockFunction],
          "getOriginalParentsFromLineage": [MockFunction],
          "handleEntityFileImport": [MockFunction],
          "initParentOptionsSelects": [Function],
          "loadNameExpressionOptions": [MockFunction],
          "moveEntities": [MockFunction],
        },
        "folder": {
          "createProject": [MockFunction],
          "getAuditSettings": [MockFunction],
          "getDataTypeExcludedProjects": [MockFunction],
          "getFolderDataTypeExclusions": [MockFunction],
          "getProjects": [Function],
          "renameProject": [MockFunction],
          "setAuditCommentsRequired": [MockFunction],
          "updateProjectDataExclusions": [MockFunction],
          "updateProjectLookAndFeelSettings": [MockFunction],
        },
        "labelprinting": {
          "createLabelTemplateList": [MockFunction],
          "ensureLabelTemplatesList": [Function],
          "fetchBarTenderConfiguration": [Function],
          "getLabelTemplates": [Function],
          "printBarTenderLabels": [MockFunction],
          "printGridLabels": [MockFunction],
          "saveBarTenderURLConfiguration": [MockFunction],
          "saveDefaultLabelConfiguration": [MockFunction],
        },
        "navigation": {
          "initMenuModel": [MockFunction],
          "loadUserMenu": [MockFunction],
        },
        "picklist": {
          "getPicklistCountsBySampleType": [Function],
          "getPicklistDeleteData": [MockFunction],
          "getPicklistFromId": [MockFunction],
        },
        "query": {
          "deleteRows": [MockFunction],
          "deleteRowsByContainer": [MockFunction],
          "deleteView": [MockFunction],
          "getDataTypeProjectDataCount": [MockFunction],
          "getEntityTypeOptions": [MockFunction],
          "getGridViews": [MockFunction],
          "getProjectConfigurableEntityTypeOptions": [MockFunction],
          "getProjectDataTypeDataCount": [MockFunction],
          "getQueryDetails": [MockFunction],
          "getSnapshotSelections": [MockFunction],
          "incrementClientSideMetricCount": [MockFunction],
          "insertRows": [MockFunction],
          "renameGridView": [MockFunction],
          "saveGridView": [MockFunction],
          "saveSessionView": [MockFunction],
          "selectDistinctRows": [MockFunction],
          "selectRows": [MockFunction],
          "setSnapshotSelections": [MockFunction],
          "updateRows": [MockFunction],
        },
        "samples": {
          "createSessionAssayRunSummaryQuery": [MockFunction],
          "getDistinctAssaysPerSample": [MockFunction],
          "getFieldLookupFromSelection": [MockFunction],
          "getGroupedSampleDomainFields": [MockFunction],
          "getSampleAliquotRows": [MockFunction],
          "getSampleAssayResultViewConfigs": [MockFunction],
          "getSampleCounter": [MockFunction],
          "getSampleOperationConfirmationData": [MockFunction],
          "getSampleStatuses": [MockFunction],
          "getSampleStorageId": [MockFunction],
          "getSampleTypeDetails": [MockFunction],
          "getSelectionLineageData": [MockFunction],
          "getTimelineEvents": [MockFunction],
          "hasExistingSamples": [MockFunction],
          "saveSampleCounter": [MockFunction],
        },
        "search": {
          "search": [MockFunction],
        },
        "security": {
          "addGroupMembers": [MockFunction],
          "createApiKey": [MockFunction],
          "createGroup": [MockFunction],
          "deleteApiKeys": [MockFunction],
          "deleteContainer": [MockFunction],
          "deleteGroup": [MockFunction],
          "deletePolicy": [MockFunction],
          "fetchContainers": [MockFunction],
          "fetchGroups": [MockFunction],
          "fetchPolicy": [MockFunction],
          "fetchRoles": [MockFunction],
          "getAuditLogDate": [MockFunction],
          "getDeletionSummaries": [MockFunction],
          "getGroupMemberships": [MockFunction],
          "getInheritedProjects": [MockFunction],
          "getUserLimitSettings": [MockFunction],
          "getUserPermissions": [MockFunction],
          "getUserProperties": [MockFunction],
          "getUserPropertiesForOther": [MockFunction],
          "getUsersWithPermissions": [MockFunction],
          "removeGroupMembers": [MockFunction],
          "savePolicy": [MockFunction],
          "updateUserDetails": [MockFunction],
        },
      }
    }
    appPropertiesOnly={false}
    controlledCollapse={true}
    headerText="header text test"
    helpTopic="createSampleType"
    includeDataClasses={false}
    initCollapsed={false}
    model={
      Immutable.Record {
        "rowId": undefined,
        "name": undefined,
        "nameReadOnly": undefined,
        "nameExpression": undefined,
        "aliquotNameExpression": "\${\${AliquotedFrom}-:withCounter}",
        "description": undefined,
        "labelColor": undefined,
        "metricUnit": undefined,
        "parentAliases": Immutable.Map {},
        "importAliases": Immutable.Map {},
        "domainId": undefined,
        "domain": Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [
            "sampleid",
          ],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        },
        "autoLinkTargetContainerId": undefined,
        "autoLinkCategory": undefined,
        "excludedContainerIds": undefined,
        "excludedDashboardContainerIds": undefined,
        "exception": undefined,
      }
    }
    nameExpressionInfoUrl="https://www.labkey.org/Documentation"
    nameExpressionPlaceholder="name expression placeholder test"
    namePreviewsLoading={false}
    nounPlural="Some Samples"
    nounSingular="Some Sample"
    onAddParentAlias={[Function]}
    onAddUniqueIdField={[Function]}
    onNameFieldHover={[Function]}
    onParentAliasChange={[Function]}
    onRemoveParentAlias={[Function]}
    onToggle={[Function]}
    panelStatus="NONE"
    parentOptions={
      [
        {
          "label": "(Current Sample Type)",
          "schema": "samples",
          "value": "{{this_sample_set}}",
        },
        {
          "label": "Fruits",
          "query": "Fruits",
          "schema": "samples",
          "value": "materialInputs/Fruits",
        },
        {
          "label": "Name Expression Set",
          "query": "Name Expression Set",
          "schema": "samples",
          "value": "materialInputs/Name Expression Set",
        },
        {
          "label": "Sample Set 2",
          "query": "Sample Set 2",
          "schema": "samples",
          "value": "materialInputs/Sample Set 2",
        },
        {
          "label": "Sample Set Error",
          "query": "Sample Set Error",
          "schema": "samples",
          "value": "materialInputs/Sample Set Error",
        },
      ]
    }
    showLinkToStudy={false}
    updateDupeParentAliases={[Function]}
    updateModel={[Function]}
    useSeparateDataClassesAliasMenu={false}
    validate={true}
  />
  <DomainForm
    api={
      {
        "fetchDomainDetails": [MockFunction],
        "fetchOntologies": [MockFunction],
        "getDataClassDetails": [MockFunction],
        "getDomainNamePreviews": [MockFunction],
        "getGenId": [MockFunction],
        "getMaxPhiLevel": [Function],
        "getValidPublishTargets": [MockFunction],
        "hasExistingDomainData": [MockFunction],
        "saveDomain": [MockFunction],
        "setGenId": [MockFunction],
        "validateDomainNameExpressions": [MockFunction],
      }
    }
    appDomainHeaderRenderer={[Function]}
    appPropertiesOnly={false}
    controlledCollapse={true}
    domain={
      Immutable.Record {
        "name": undefined,
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      }
    }
    domainFormDisplayOptions={
      {
        "derivationDataScopeConfig": {
          "dataTypeFilter": [Function],
          "helpLinkNode": <Memo
            helpTopic="createSampleType#ali"
          />,
          "labelAll": "Separately editable for samples and aliquots",
          "labelChild": "Editable for aliquots only",
          "labelParent": "Editable for samples only (default)",
          "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
          "sectionTitle": "Sample/Aliquot Options",
          "show": undefined,
        },
        "disableMvEnabled": false,
        "domainKindDisplayName": "sample type",
        "hideAddFieldsButton": false,
        "hideConditionalFormatting": false,
        "hideFilePropertyType": false,
        "hideImportData": false,
        "hideImportExport": false,
        "hideRequired": false,
        "hideStudyPropertyTypes": true,
        "hideTextOptions": false,
        "hideValidators": false,
        "isDragDisabled": false,
        "phiLevelDisabled": false,
        "showScannableOption": true,
        "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
      }
    }
    domainIndex={0}
    headerTitle="Fields"
    helpTopic={null}
    initCollapsed={true}
    key="0"
    newFieldConfig={
      {
        "derivationDataScope": "ParentOnly",
      }
    }
    onChange={[Function]}
    onToggle={[Function]}
    panelStatus="TODO"
    testMode={true}
    validate={false}
  />
  <NameExpressionValidationModal
    onConfirm={[Function]}
    onHide={[Function]}
    show={false}
  />
</BaseDomainDesigner>
`;

exports[`SampleTypeDesigner default properties 1`] = `
<BaseDomainDesigner
  domains={
    Immutable.List [
      Immutable.Record {
        "name": undefined,
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      },
    ]
  }
  hasValidProperties={false}
  onCancel={[MockFunction]}
  onFinish={[Function]}
  submitting={false}
  visitedPanels={Immutable.List []}
>
  <ComponentWithDomainPropertiesPanelCollapse
    api={
      {
        "assay": {
          "clearAssayDefinitionCache": [MockFunction],
          "getAssayDefinitions": [MockFunction],
          "getProtocol": [MockFunction],
          "importAssayRun": [MockFunction],
        },
        "domain": {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [Function],
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        },
        "entity": {
          "getDataOperationConfirmationData": [MockFunction],
          "getDeleteConfirmationData": [MockFunction],
          "getEntityTypeData": [MockFunction],
          "getMoveConfirmationData": [MockFunction],
          "getOriginalParentsFromLineage": [MockFunction],
          "handleEntityFileImport": [MockFunction],
          "initParentOptionsSelects": [Function],
          "loadNameExpressionOptions": [MockFunction],
          "moveEntities": [MockFunction],
        },
        "folder": {
          "createProject": [MockFunction],
          "getAuditSettings": [MockFunction],
          "getDataTypeExcludedProjects": [MockFunction],
          "getFolderDataTypeExclusions": [MockFunction],
          "getProjects": [Function],
          "renameProject": [MockFunction],
          "setAuditCommentsRequired": [MockFunction],
          "updateProjectDataExclusions": [MockFunction],
          "updateProjectLookAndFeelSettings": [MockFunction],
        },
        "labelprinting": {
          "createLabelTemplateList": [MockFunction],
          "ensureLabelTemplatesList": [Function],
          "fetchBarTenderConfiguration": [Function],
          "getLabelTemplates": [Function],
          "printBarTenderLabels": [MockFunction],
          "printGridLabels": [MockFunction],
          "saveBarTenderURLConfiguration": [MockFunction],
          "saveDefaultLabelConfiguration": [MockFunction],
        },
        "navigation": {
          "initMenuModel": [MockFunction],
          "loadUserMenu": [MockFunction],
        },
        "picklist": {
          "getPicklistCountsBySampleType": [Function],
          "getPicklistDeleteData": [MockFunction],
          "getPicklistFromId": [MockFunction],
        },
        "query": {
          "deleteRows": [MockFunction],
          "deleteRowsByContainer": [MockFunction],
          "deleteView": [MockFunction],
          "getDataTypeProjectDataCount": [MockFunction],
          "getEntityTypeOptions": [MockFunction],
          "getGridViews": [MockFunction],
          "getProjectConfigurableEntityTypeOptions": [MockFunction],
          "getProjectDataTypeDataCount": [MockFunction],
          "getQueryDetails": [MockFunction],
          "getSnapshotSelections": [MockFunction],
          "incrementClientSideMetricCount": [MockFunction],
          "insertRows": [MockFunction],
          "renameGridView": [MockFunction],
          "saveGridView": [MockFunction],
          "saveSessionView": [MockFunction],
          "selectDistinctRows": [MockFunction],
          "selectRows": [MockFunction],
          "setSnapshotSelections": [MockFunction],
          "updateRows": [MockFunction],
        },
        "samples": {
          "createSessionAssayRunSummaryQuery": [MockFunction],
          "getDistinctAssaysPerSample": [MockFunction],
          "getFieldLookupFromSelection": [MockFunction],
          "getGroupedSampleDomainFields": [MockFunction],
          "getSampleAliquotRows": [MockFunction],
          "getSampleAssayResultViewConfigs": [MockFunction],
          "getSampleCounter": [MockFunction],
          "getSampleOperationConfirmationData": [MockFunction],
          "getSampleStatuses": [MockFunction],
          "getSampleStorageId": [MockFunction],
          "getSampleTypeDetails": [MockFunction],
          "getSelectionLineageData": [MockFunction],
          "getTimelineEvents": [MockFunction],
          "hasExistingSamples": [MockFunction],
          "saveSampleCounter": [MockFunction],
        },
        "search": {
          "search": [MockFunction],
        },
        "security": {
          "addGroupMembers": [MockFunction],
          "createApiKey": [MockFunction],
          "createGroup": [MockFunction],
          "deleteApiKeys": [MockFunction],
          "deleteContainer": [MockFunction],
          "deleteGroup": [MockFunction],
          "deletePolicy": [MockFunction],
          "fetchContainers": [MockFunction],
          "fetchGroups": [MockFunction],
          "fetchPolicy": [MockFunction],
          "fetchRoles": [MockFunction],
          "getAuditLogDate": [MockFunction],
          "getDeletionSummaries": [MockFunction],
          "getGroupMemberships": [MockFunction],
          "getInheritedProjects": [MockFunction],
          "getUserLimitSettings": [MockFunction],
          "getUserPermissions": [MockFunction],
          "getUserProperties": [MockFunction],
          "getUserPropertiesForOther": [MockFunction],
          "getUsersWithPermissions": [MockFunction],
          "removeGroupMembers": [MockFunction],
          "savePolicy": [MockFunction],
          "updateUserDetails": [MockFunction],
        },
      }
    }
    appPropertiesOnly={true}
    controlledCollapse={true}
    helpTopic="createSampleType"
    includeDataClasses={false}
    initCollapsed={false}
    model={
      Immutable.Record {
        "rowId": undefined,
        "name": undefined,
        "nameReadOnly": undefined,
        "nameExpression": undefined,
        "aliquotNameExpression": "\${\${AliquotedFrom}-:withCounter}",
        "description": undefined,
        "labelColor": undefined,
        "metricUnit": undefined,
        "parentAliases": Immutable.Map {},
        "importAliases": Immutable.Map {},
        "domainId": undefined,
        "domain": Immutable.Record {
          "name": undefined,
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [
            "sampleid",
          ],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        },
        "autoLinkTargetContainerId": undefined,
        "autoLinkCategory": undefined,
        "excludedContainerIds": undefined,
        "excludedDashboardContainerIds": undefined,
        "exception": undefined,
      }
    }
    nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
    nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
    namePreviewsLoading={false}
    onAddParentAlias={[Function]}
    onAddUniqueIdField={[Function]}
    onNameFieldHover={[Function]}
    onParentAliasChange={[Function]}
    onRemoveParentAlias={[Function]}
    onToggle={[Function]}
    panelStatus="NONE"
    parentOptions={
      [
        {
          "label": "(Current Sample Type)",
          "schema": "samples",
          "value": "{{this_sample_set}}",
        },
        {
          "label": "Fruits",
          "query": "Fruits",
          "schema": "samples",
          "value": "materialInputs/Fruits",
        },
        {
          "label": "Name Expression Set",
          "query": "Name Expression Set",
          "schema": "samples",
          "value": "materialInputs/Name Expression Set",
        },
        {
          "label": "Sample Set 2",
          "query": "Sample Set 2",
          "schema": "samples",
          "value": "materialInputs/Sample Set 2",
        },
        {
          "label": "Sample Set Error",
          "query": "Sample Set Error",
          "schema": "samples",
          "value": "materialInputs/Sample Set Error",
        },
      ]
    }
    showLinkToStudy={false}
    updateDupeParentAliases={[Function]}
    updateModel={[Function]}
    useSeparateDataClassesAliasMenu={false}
    validate={true}
  />
  <DomainForm
    api={
      {
        "fetchDomainDetails": [MockFunction],
        "fetchOntologies": [MockFunction],
        "getDataClassDetails": [MockFunction],
        "getDomainNamePreviews": [MockFunction],
        "getGenId": [MockFunction],
        "getMaxPhiLevel": [Function],
        "getValidPublishTargets": [MockFunction],
        "hasExistingDomainData": [MockFunction],
        "saveDomain": [MockFunction],
        "setGenId": [MockFunction],
        "validateDomainNameExpressions": [MockFunction],
      }
    }
    appDomainHeaderRenderer={[Function]}
    appPropertiesOnly={true}
    controlledCollapse={true}
    domain={
      Immutable.Record {
        "name": undefined,
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      }
    }
    domainFormDisplayOptions={
      {
        "derivationDataScopeConfig": {
          "dataTypeFilter": [Function],
          "helpLinkNode": <Memo
            helpTopic="createSampleType#ali"
          />,
          "labelAll": "Separately editable for samples and aliquots",
          "labelChild": "Editable for aliquots only",
          "labelParent": "Editable for samples only (default)",
          "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
          "sectionTitle": "Sample/Aliquot Options",
          "show": undefined,
        },
        "disableMvEnabled": false,
        "domainKindDisplayName": "sample type",
        "hideAddFieldsButton": false,
        "hideConditionalFormatting": false,
        "hideFilePropertyType": false,
        "hideImportData": false,
        "hideImportExport": false,
        "hideRequired": false,
        "hideStudyPropertyTypes": true,
        "hideTextOptions": false,
        "hideValidators": false,
        "isDragDisabled": false,
        "phiLevelDisabled": false,
        "showScannableOption": true,
        "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
      }
    }
    domainIndex={0}
    headerTitle="Fields"
    helpTopic={null}
    initCollapsed={true}
    key="0"
    newFieldConfig={
      {
        "derivationDataScope": "ParentOnly",
      }
    }
    onChange={[Function]}
    onToggle={[Function]}
    panelStatus="TODO"
    testMode={true}
    validate={false}
  />
  <ComponentWithDomainPropertiesPanelCollapse
    controlledCollapse={true}
    entityDataType={
      {
        "ancestorColumnName": "Ancestors/Samples",
        "appUrlPrefixParts": [
          "samples",
        ],
        "deleteHelpLinkTopic": "viewSampleSets#delete",
        "dependencyText": [Function],
        "descriptionPlural": "parent sample types",
        "descriptionSingular": "parent sample type",
        "editTypeAppUrlPrefix": "sampleType",
        "exprColumnsWithSubSelect": [
          "SourceProtocolLSID",
          "StorageStatus",
          "SampleTypeUnits",
          "FreezeThawCount",
          "CheckedOutBy",
          "StorageRow",
          "StorageCol",
          "CheckedOut",
        ],
        "filterCardHeaderClass": "filter-card__header-success",
        "importFileAction": "importSamples",
        "inputColumnName": "Inputs/Materials/First",
        "inputTypeValueField": "lsid",
        "insertColumnNamePrefix": "MaterialInputs/",
        "instanceKey": "samples",
        "instanceSchemaName": "samples",
        "labelColorCol": "labelcolor",
        "listingSchemaQuery": SchemaQuery {
          "queryName": "Materials",
          "schemaName": "exp",
          "viewName": undefined,
        },
        "nounAsParentPlural": "Parents",
        "nounAsParentSingular": "Parent",
        "nounPlural": "samples",
        "nounSingular": "sample",
        "operationConfirmationActionName": "getMaterialOperationConfirmationData.api",
        "operationConfirmationControllerName": "experiment",
        "projectConfigurableDataType": "SampleType",
        "sampleFinderCardType": "sampleparent",
        "supportsCrossTypeImport": true,
        "typeIcon": "sample_set",
        "typeListingSchemaQuery": SchemaQuery {
          "queryName": "SampleSets",
          "schemaName": "exp",
          "viewName": undefined,
        },
        "typeNounAsParentSingular": "Parent Type",
        "typeNounSingular": "Sample Type",
        "uniqueFieldKey": "Name",
      }
    }
    initCollapsed={true}
    onToggle={[Function]}
    onUpdateExcludedProjects={[Function]}
    relatedDataTypeLabel="Include in Dashboard Insights graphs"
    relatedProjectConfigurableDataType="DashboardSampleType"
  />
  <NameExpressionValidationModal
    onConfirm={[Function]}
    onHide={[Function]}
    show={false}
  />
</BaseDomainDesigner>
`;

exports[`SampleTypeDesigner initModel with name URL props 1`] = `
<BaseDomainDesigner
  domains={
    Immutable.List [
      Immutable.Record {
        "name": "Test Name",
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [
          Immutable.Record {
            "conceptURI": undefined,
            "conditionalFormats": Immutable.List [],
            "defaultScale": undefined,
            "defaultValueType": undefined,
            "defaultValue": undefined,
            "defaultDisplayValue": undefined,
            "description": undefined,
            "dimension": undefined,
            "excludeFromShifting": false,
            "format": undefined,
            "hidden": false,
            "importAliases": undefined,
            "label": undefined,
            "lookupContainer": undefined,
            "lookupQuery": undefined,
            "lookupSchema": undefined,
            "lookupValidator": undefined,
            "lookupIsValid": undefined,
            "measure": undefined,
            "mvEnabled": false,
            "name": "testfield",
            "PHI": undefined,
            "propertyId": undefined,
            "propertyURI": undefined,
            "propertyValidators": Immutable.List [],
            "rangeValidators": Immutable.List [],
            "rangeURI": undefined,
            "regexValidators": Immutable.List [],
            "textChoiceValidator": undefined,
            "recommendedVariable": false,
            "uniqueConstraint": false,
            "required": false,
            "scale": 4000,
            "URL": undefined,
            "shownInDetailsView": true,
            "shownInInsertView": true,
            "shownInUpdateView": true,
            "visible": true,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "lookupQueryValue": undefined,
            "lookupType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Lookup",
              "name": "lookup",
              "rangeURI": undefined,
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "original": {
              "conceptURI": undefined,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "name": "testfield",
              "rangeURI": undefined,
            },
            "updatedField": false,
            "isPrimaryKey": false,
            "lockType": "NotLocked",
            "wrappedColumnName": undefined,
            "disablePhiLevel": false,
            "lockExistingField": false,
            "sourceOntology": undefined,
            "conceptSubtree": undefined,
            "conceptLabelColumn": undefined,
            "conceptImportColumn": undefined,
            "principalConceptCode": undefined,
            "derivationDataScope": undefined,
            "selected": false,
            "scannable": false,
          },
        ],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      },
    ]
  }
  hasValidProperties={true}
  name="Test Name"
  onCancel={[MockFunction]}
  onFinish={[Function]}
  submitting={false}
  visitedPanels={Immutable.List []}
>
  <ComponentWithDomainPropertiesPanelCollapse
    api={
      {
        "assay": {
          "clearAssayDefinitionCache": [MockFunction],
          "getAssayDefinitions": [MockFunction],
          "getProtocol": [MockFunction],
          "importAssayRun": [MockFunction],
        },
        "domain": {
          "fetchDomainDetails": [MockFunction],
          "fetchOntologies": [MockFunction],
          "getDataClassDetails": [MockFunction],
          "getDomainNamePreviews": [MockFunction],
          "getGenId": [MockFunction],
          "getMaxPhiLevel": [Function],
          "getValidPublishTargets": [MockFunction],
          "hasExistingDomainData": [MockFunction],
          "saveDomain": [MockFunction],
          "setGenId": [MockFunction],
          "validateDomainNameExpressions": [MockFunction],
        },
        "entity": {
          "getDataOperationConfirmationData": [MockFunction],
          "getDeleteConfirmationData": [MockFunction],
          "getEntityTypeData": [MockFunction],
          "getMoveConfirmationData": [MockFunction],
          "getOriginalParentsFromLineage": [MockFunction],
          "handleEntityFileImport": [MockFunction],
          "initParentOptionsSelects": [Function],
          "loadNameExpressionOptions": [MockFunction],
          "moveEntities": [MockFunction],
        },
        "folder": {
          "createProject": [MockFunction],
          "getAuditSettings": [MockFunction],
          "getDataTypeExcludedProjects": [MockFunction],
          "getFolderDataTypeExclusions": [MockFunction],
          "getProjects": [Function],
          "renameProject": [MockFunction],
          "setAuditCommentsRequired": [MockFunction],
          "updateProjectDataExclusions": [MockFunction],
          "updateProjectLookAndFeelSettings": [MockFunction],
        },
        "labelprinting": {
          "createLabelTemplateList": [MockFunction],
          "ensureLabelTemplatesList": [Function],
          "fetchBarTenderConfiguration": [Function],
          "getLabelTemplates": [Function],
          "printBarTenderLabels": [MockFunction],
          "printGridLabels": [MockFunction],
          "saveBarTenderURLConfiguration": [MockFunction],
          "saveDefaultLabelConfiguration": [MockFunction],
        },
        "navigation": {
          "initMenuModel": [MockFunction],
          "loadUserMenu": [MockFunction],
        },
        "picklist": {
          "getPicklistCountsBySampleType": [Function],
          "getPicklistDeleteData": [MockFunction],
          "getPicklistFromId": [MockFunction],
        },
        "query": {
          "deleteRows": [MockFunction],
          "deleteRowsByContainer": [MockFunction],
          "deleteView": [MockFunction],
          "getDataTypeProjectDataCount": [MockFunction],
          "getEntityTypeOptions": [MockFunction],
          "getGridViews": [MockFunction],
          "getProjectConfigurableEntityTypeOptions": [MockFunction],
          "getProjectDataTypeDataCount": [MockFunction],
          "getQueryDetails": [MockFunction],
          "getSnapshotSelections": [MockFunction],
          "incrementClientSideMetricCount": [MockFunction],
          "insertRows": [MockFunction],
          "renameGridView": [MockFunction],
          "saveGridView": [MockFunction],
          "saveSessionView": [MockFunction],
          "selectDistinctRows": [MockFunction],
          "selectRows": [MockFunction],
          "setSnapshotSelections": [MockFunction],
          "updateRows": [MockFunction],
        },
        "samples": {
          "createSessionAssayRunSummaryQuery": [MockFunction],
          "getDistinctAssaysPerSample": [MockFunction],
          "getFieldLookupFromSelection": [MockFunction],
          "getGroupedSampleDomainFields": [MockFunction],
          "getSampleAliquotRows": [MockFunction],
          "getSampleAssayResultViewConfigs": [MockFunction],
          "getSampleCounter": [MockFunction],
          "getSampleOperationConfirmationData": [MockFunction],
          "getSampleStatuses": [MockFunction],
          "getSampleStorageId": [MockFunction],
          "getSampleTypeDetails": [MockFunction],
          "getSelectionLineageData": [MockFunction],
          "getTimelineEvents": [MockFunction],
          "hasExistingSamples": [MockFunction],
          "saveSampleCounter": [MockFunction],
        },
        "search": {
          "search": [MockFunction],
        },
        "security": {
          "addGroupMembers": [MockFunction],
          "createApiKey": [MockFunction],
          "createGroup": [MockFunction],
          "deleteApiKeys": [MockFunction],
          "deleteContainer": [MockFunction],
          "deleteGroup": [MockFunction],
          "deletePolicy": [MockFunction],
          "fetchContainers": [MockFunction],
          "fetchGroups": [MockFunction],
          "fetchPolicy": [MockFunction],
          "fetchRoles": [MockFunction],
          "getAuditLogDate": [MockFunction],
          "getDeletionSummaries": [MockFunction],
          "getGroupMemberships": [MockFunction],
          "getInheritedProjects": [MockFunction],
          "getUserLimitSettings": [MockFunction],
          "getUserPermissions": [MockFunction],
          "getUserProperties": [MockFunction],
          "getUserPropertiesForOther": [MockFunction],
          "getUsersWithPermissions": [MockFunction],
          "removeGroupMembers": [MockFunction],
          "savePolicy": [MockFunction],
          "updateUserDetails": [MockFunction],
        },
      }
    }
    appPropertiesOnly={true}
    controlledCollapse={true}
    helpTopic="createSampleType"
    includeDataClasses={false}
    initCollapsed={false}
    model={
      Immutable.Record {
        "rowId": undefined,
        "name": "Test Name",
        "nameReadOnly": true,
        "nameExpression": undefined,
        "aliquotNameExpression": "\${\${AliquotedFrom}-:withCounter}",
        "description": undefined,
        "labelColor": undefined,
        "metricUnit": undefined,
        "parentAliases": Immutable.Map {},
        "importAliases": Immutable.Map {},
        "domainId": undefined,
        "domain": Immutable.Record {
          "name": "Test Name",
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "allowUniqueConstraintProperties": false,
          "allowUserProperties": true,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "lookupIsValid": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "testfield",
              "PHI": undefined,
              "propertyId": undefined,
              "propertyURI": undefined,
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": undefined,
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "uniqueConstraint": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": undefined,
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "testfield",
                "rangeURI": undefined,
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [
            "sampleid",
          ],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        },
        "autoLinkTargetContainerId": undefined,
        "autoLinkCategory": undefined,
        "excludedContainerIds": undefined,
        "excludedDashboardContainerIds": undefined,
        "exception": undefined,
      }
    }
    nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
    nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
    namePreviewsLoading={false}
    onAddParentAlias={[Function]}
    onAddUniqueIdField={[Function]}
    onNameFieldHover={[Function]}
    onParentAliasChange={[Function]}
    onRemoveParentAlias={[Function]}
    onToggle={[Function]}
    panelStatus="NONE"
    parentOptions={
      [
        {
          "label": "(Current Sample Type)",
          "schema": "samples",
          "value": "{{this_sample_set}}",
        },
        {
          "label": "Fruits",
          "query": "Fruits",
          "schema": "samples",
          "value": "materialInputs/Fruits",
        },
        {
          "label": "Name Expression Set",
          "query": "Name Expression Set",
          "schema": "samples",
          "value": "materialInputs/Name Expression Set",
        },
        {
          "label": "Sample Set 2",
          "query": "Sample Set 2",
          "schema": "samples",
          "value": "materialInputs/Sample Set 2",
        },
        {
          "label": "Sample Set Error",
          "query": "Sample Set Error",
          "schema": "samples",
          "value": "materialInputs/Sample Set Error",
        },
      ]
    }
    showLinkToStudy={false}
    updateDupeParentAliases={[Function]}
    updateModel={[Function]}
    useSeparateDataClassesAliasMenu={false}
    validate={true}
  />
  <DomainForm
    api={
      {
        "fetchDomainDetails": [MockFunction],
        "fetchOntologies": [MockFunction],
        "getDataClassDetails": [MockFunction],
        "getDomainNamePreviews": [MockFunction],
        "getGenId": [MockFunction],
        "getMaxPhiLevel": [Function],
        "getValidPublishTargets": [MockFunction],
        "hasExistingDomainData": [MockFunction],
        "saveDomain": [MockFunction],
        "setGenId": [MockFunction],
        "validateDomainNameExpressions": [MockFunction],
      }
    }
    appDomainHeaderRenderer={[Function]}
    appPropertiesOnly={true}
    controlledCollapse={true}
    domain={
      Immutable.Record {
        "name": "Test Name",
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "allowUniqueConstraintProperties": false,
        "allowUserProperties": true,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [
          Immutable.Record {
            "conceptURI": undefined,
            "conditionalFormats": Immutable.List [],
            "defaultScale": undefined,
            "defaultValueType": undefined,
            "defaultValue": undefined,
            "defaultDisplayValue": undefined,
            "description": undefined,
            "dimension": undefined,
            "excludeFromShifting": false,
            "format": undefined,
            "hidden": false,
            "importAliases": undefined,
            "label": undefined,
            "lookupContainer": undefined,
            "lookupQuery": undefined,
            "lookupSchema": undefined,
            "lookupValidator": undefined,
            "lookupIsValid": undefined,
            "measure": undefined,
            "mvEnabled": false,
            "name": "testfield",
            "PHI": undefined,
            "propertyId": undefined,
            "propertyURI": undefined,
            "propertyValidators": Immutable.List [],
            "rangeValidators": Immutable.List [],
            "rangeURI": undefined,
            "regexValidators": Immutable.List [],
            "textChoiceValidator": undefined,
            "recommendedVariable": false,
            "uniqueConstraint": false,
            "required": false,
            "scale": 4000,
            "URL": undefined,
            "shownInDetailsView": true,
            "shownInInsertView": true,
            "shownInUpdateView": true,
            "visible": true,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "lookupQueryValue": undefined,
            "lookupType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Lookup",
              "name": "lookup",
              "rangeURI": undefined,
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "original": {
              "conceptURI": undefined,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "name": "testfield",
              "rangeURI": undefined,
            },
            "updatedField": false,
            "isPrimaryKey": false,
            "lockType": "NotLocked",
            "wrappedColumnName": undefined,
            "disablePhiLevel": false,
            "lockExistingField": false,
            "sourceOntology": undefined,
            "conceptSubtree": undefined,
            "conceptLabelColumn": undefined,
            "conceptImportColumn": undefined,
            "principalConceptCode": undefined,
            "derivationDataScope": undefined,
            "selected": false,
            "scannable": false,
          },
        ],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [
          "sampleid",
        ],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      }
    }
    domainFormDisplayOptions={
      {
        "derivationDataScopeConfig": {
          "dataTypeFilter": [Function],
          "helpLinkNode": <Memo
            helpTopic="createSampleType#ali"
          />,
          "labelAll": "Separately editable for samples and aliquots",
          "labelChild": "Editable for aliquots only",
          "labelParent": "Editable for samples only (default)",
          "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
          "sectionTitle": "Sample/Aliquot Options",
          "show": undefined,
        },
        "hideConditionalFormatting": true,
        "hideStudyPropertyTypes": true,
        "showScannableOption": true,
        "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
      }
    }
    domainIndex={0}
    headerTitle="Fields"
    helpTopic={null}
    initCollapsed={true}
    key="0"
    newFieldConfig={
      {
        "derivationDataScope": "ParentOnly",
      }
    }
    onChange={[Function]}
    onToggle={[Function]}
    panelStatus="TODO"
    testMode={true}
    validate={false}
  />
  <ComponentWithDomainPropertiesPanelCollapse
    controlledCollapse={true}
    dataTypeName="Test Name"
    entityDataType={
      {
        "ancestorColumnName": "Ancestors/Samples",
        "appUrlPrefixParts": [
          "samples",
        ],
        "deleteHelpLinkTopic": "viewSampleSets#delete",
        "dependencyText": [Function],
        "descriptionPlural": "parent sample types",
        "descriptionSingular": "parent sample type",
        "editTypeAppUrlPrefix": "sampleType",
        "exprColumnsWithSubSelect": [
          "SourceProtocolLSID",
          "StorageStatus",
          "SampleTypeUnits",
          "FreezeThawCount",
          "CheckedOutBy",
          "StorageRow",
          "StorageCol",
          "CheckedOut",
        ],
        "filterCardHeaderClass": "filter-card__header-success",
        "importFileAction": "importSamples",
        "inputColumnName": "Inputs/Materials/First",
        "inputTypeValueField": "lsid",
        "insertColumnNamePrefix": "MaterialInputs/",
        "instanceKey": "samples",
        "instanceSchemaName": "samples",
        "labelColorCol": "labelcolor",
        "listingSchemaQuery": SchemaQuery {
          "queryName": "Materials",
          "schemaName": "exp",
          "viewName": undefined,
        },
        "nounAsParentPlural": "Parents",
        "nounAsParentSingular": "Parent",
        "nounPlural": "samples",
        "nounSingular": "sample",
        "operationConfirmationActionName": "getMaterialOperationConfirmationData.api",
        "operationConfirmationControllerName": "experiment",
        "projectConfigurableDataType": "SampleType",
        "sampleFinderCardType": "sampleparent",
        "supportsCrossTypeImport": true,
        "typeIcon": "sample_set",
        "typeListingSchemaQuery": SchemaQuery {
          "queryName": "SampleSets",
          "schemaName": "exp",
          "viewName": undefined,
        },
        "typeNounAsParentSingular": "Parent Type",
        "typeNounSingular": "Sample Type",
        "uniqueFieldKey": "Name",
      }
    }
    initCollapsed={true}
    onToggle={[Function]}
    onUpdateExcludedProjects={[Function]}
    relatedDataTypeLabel="Include in Dashboard Insights graphs"
    relatedProjectConfigurableDataType="DashboardSampleType"
  />
  <NameExpressionValidationModal
    onConfirm={[Function]}
    onHide={[Function]}
    show={false}
  />
</BaseDomainDesigner>
`;
