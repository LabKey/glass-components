// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SampleTypeDesigner custom properties 1`] = `
[
  <div
    className="domain-form-panel lk-border-theme-light panel panel-default"
  >
    <div
      className="domain-panel-header domain-heading-collapsible domain-panel-header-expanded labkey-page-nav panel-heading"
      id="sample-type-properties-hdr"
      onClick={[Function]}
    >
      <span
        className="domain-panel-title"
      >
        Sample Type Properties
      </span>
      <span
        className="pull-right"
      >
        <span
          className="fa fa-lg fa-minus-square domain-form-collapse-btn"
        />
      </span>
    </div>
    <div
      aria-expanded={null}
      className="panel-collapse collapse in"
    >
      <div
        className="panel-body"
      >
        <div
          className="margin-bottom row"
        >
          <div
            className="col-xs-9"
          >
            <div
              className="entity-form--headerhelp"
            >
              header text test
            </div>
          </div>
          <div
            className="col-xs-3"
          >
            <div
              className="row"
            >
              <div
                className="col-xs-12"
              >
                <a
                  className="domain-field-float-right"
                  href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=createSampleType"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  Learn more about designing some samples
                </a>
              </div>
            </div>
          </div>
        </div>
        <form
          className=""
        >
          <div
            className="margin-bottom margin-top row"
          >
            <div
              className="col-xs-2"
            >
              <span
                className="domain-no-wrap"
              >
                Name
                 *
              </span>
            </div>
            <div
              className="col-xs-10"
            >
              <input
                className="form-control"
                id="entity-name"
                onChange={[Function]}
                placeholder="Enter a name for this some sample"
                type="text"
                value=""
              />
            </div>
          </div>
          <div
            className="margin-bottom row"
          >
            <div
              className="col-xs-2"
            >
              <span
                className="domain-no-wrap"
              >
                Description
                <span
                  className="label-help-target"
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                >
                  <span
                    className="label-help-icon fa fa-question-circle"
                  />
                </span>
                
              </span>
            </div>
            <div
              className="col-xs-10"
            >
              <textarea
                className="form-control"
                id="entity-description"
                onChange={[Function]}
                value=""
              />
            </div>
          </div>
          <div
            className="margin-bottom row"
          >
            <div
              className="col-xs-2"
            >
              <div
                className="name-expression-label-div"
                onMouseEnter={[Function]}
              >
                Naming 
                <span
                  className="domain-no-wrap"
                >
                  Pattern
                  <span
                    className="label-help-target"
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                  >
                    <span
                      className="label-help-icon fa fa-question-circle"
                    />
                  </span>
                  
                </span>
              </div>
            </div>
            <div
              className="col-xs-10"
            >
              <input
                className="form-control"
                id="entity-nameExpression"
                onChange={[Function]}
                placeholder="name expression placeholder test"
                type="text"
                value=""
              />
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>,
  <div
    className="domain-form-panel panel panel-default"
  >
    <div
      className="domain-panel-header domain-heading-collapsible domain-panel-header-collapsed panel-heading"
      id="domain-header"
      onClick={[Function]}
    >
      <span
        className="label-help-target"
        onMouseOut={[Function]}
        onMouseOver={[Function]}
      >
        <span
          className="domain-panel-status-icon domain-panel-status-icon-blue"
        >
          <span
            className="fa fa-exclamation-circle"
          />
        </span>
      </span>
      <span
        className="domain-panel-title"
      >
        Fields
      </span>
      <span
        className="pull-right"
      >
        <span
          className="fa fa-lg fa-plus-square domain-form-expand-btn"
        />
      </span>
    </div>
    <div
      aria-expanded={null}
      className="panel-collapse collapse"
    >
      <div
        className="panel-body"
      >
        <div
          className="row"
        >
          <div
            className="col-xs-12"
          />
        </div>
        <span
          className="translator--toggle__wizard"
        >
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <label
                className="control-label text-left"
              >
                <strong>
                  Import or infer fields from file
                </strong>
              </label>
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <div
                className="wizard-row--container"
              >
                <div
                  className=""
                >
                  <div
                    className="file-upload--container block"
                  >
                    <label
                      className="file-upload--label"
                      htmlFor="fileUpload"
                      onDragEnter={[Function]}
                      onDragLeave={[Function]}
                      onDragOver={[Function]}
                      onDrop={[Function]}
                    >
                      <i
                        aria-hidden="true"
                        className="fa fa-cloud-upload fa-2x cloud-logo"
                      />
                      Select file or drag and drop here.
                    </label>
                    <input
                      accept=".csv, .tsv, .txt, .xls, .xlsx, .json"
                      className="file-upload--input"
                      id="fileUpload"
                      multiple={false}
                      name="fileUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </span>
        <div
          className="row"
        >
          <div
            className="col-md-9"
          >
            <div
              className="file-form-formats"
            >
              <strong>
                Supported formats include: 
              </strong>
              .csv, .tsv, .txt, .xls, .xlsx, .json
            </div>
          </div>
          <div
            className="col-md-3"
          >
            <div
              className="pull-right"
            />
          </div>
        </div>
        <div
          className="margin-top domain-form-manual-section"
        >
          <p>
            Or
          </p>
          <div
            className="form-group"
          >
            <div
              className="domain-form-manual-btn"
            >
              <span
                className="container--action-button btn btn-default"
                onClick={[Function]}
              >
                Manually Define Fields
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
  <div
    className="domain-form-panel domain-designer-buttons"
  >
    <button
      className="btn btn-default"
      disabled={false}
      onClick={[MockFunction]}
      type="button"
    >
      Cancel
    </button>
    <button
      className="pull-right btn btn-primary"
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Finish it up
    </button>
  </div>,
]
`;

exports[`SampleTypeDesigner default properties 1`] = `
[
  <div
    className="domain-form-panel domain-panel-no-theme panel panel-default"
  >
    <div
      className="domain-panel-header domain-heading-collapsible domain-panel-header-expanded domain-panel-header-no-theme panel-heading"
      id="sample-type-properties-hdr"
      onClick={[Function]}
    >
      <span
        className="domain-panel-title"
      >
        Sample Type Properties
      </span>
      <span
        className="pull-right"
      >
        <span
          className="fa fa-lg fa-minus-square domain-form-collapse-btn"
        />
      </span>
    </div>
    <div
      aria-expanded={null}
      className="panel-collapse collapse in"
    >
      <div
        className="panel-body"
      >
        <div
          className="margin-bottom row"
        >
          <div
            className="col-xs-12"
          >
            <div
              className="row"
            >
              <div
                className="col-xs-12"
              >
                <a
                  className="domain-field-float-right"
                  href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=createSampleType"
                  rel="noopener noreferrer"
                  target="_blank"
                >
                  Learn more about designing sample types
                </a>
              </div>
            </div>
          </div>
        </div>
        <div
          className="domain-field-section-heading"
        >
          General Properties
        </div>
        <form
          className=""
        >
          <div
            className="margin-bottom margin-top row"
          >
            <div
              className="col-xs-2"
            >
              <span
                className="domain-no-wrap"
              >
                Name
                 *
              </span>
            </div>
            <div
              className="col-xs-10"
            >
              <input
                className="form-control"
                id="entity-name"
                onChange={[Function]}
                placeholder="Enter a name for this sample type"
                type="text"
                value=""
              />
            </div>
          </div>
          <div
            className="margin-bottom row"
          >
            <div
              className="col-xs-2"
            >
              <span
                className="domain-no-wrap"
              >
                Description
                <span
                  className="label-help-target"
                  onMouseOut={[Function]}
                  onMouseOver={[Function]}
                >
                  <span
                    className="label-help-icon fa fa-question-circle"
                  />
                </span>
                
              </span>
            </div>
            <div
              className="col-xs-10"
            >
              <textarea
                className="form-control"
                id="entity-description"
                onChange={[Function]}
                value=""
              />
            </div>
          </div>
          <div
            className="margin-bottom row"
          >
            <div
              className="col-xs-2"
            >
              <div
                className="name-expression-label-div"
                onMouseEnter={[Function]}
              >
                Naming 
                <span
                  className="domain-no-wrap"
                >
                  Pattern
                  <span
                    className="label-help-target"
                    onMouseOut={[Function]}
                    onMouseOver={[Function]}
                  >
                    <span
                      className="label-help-icon fa fa-question-circle"
                    />
                  </span>
                  
                </span>
              </div>
            </div>
            <div
              className="col-xs-10"
            >
              <input
                className="form-control"
                id="entity-nameExpression"
                onChange={[Function]}
                placeholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
                type="text"
                value=""
              />
            </div>
          </div>
        </form>
        <div
          className="domain-field-section-heading top-spacing"
        >
          Storage Settings
        </div>
        <div
          className="margin-top row"
        >
          <div
            className="col-xs-2"
          >
            Label 
            <span
              className="domain-no-wrap"
            >
              Color
              <span
                className="label-help-target"
                onMouseOut={[Function]}
                onMouseOver={[Function]}
              >
                <span
                  className="label-help-icon fa fa-question-circle"
                />
              </span>
              
            </span>
          </div>
          <div
            className="col-xs-10"
          >
            <div
              className="color-picker"
            >
              <button
                className="color-picker__button btn btn-default"
                onClick={[Function]}
                type="button"
              >
                None
                <i
                  className="fa fa-caret-down"
                />
              </button>
              <div
                className="color-picker__picker"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
  <div
    className="domain-form-panel panel panel-default"
  >
    <div
      className="domain-panel-header domain-heading-collapsible domain-panel-header-collapsed panel-heading"
      id="domain-header"
      onClick={[Function]}
    >
      <span
        className="label-help-target"
        onMouseOut={[Function]}
        onMouseOver={[Function]}
      >
        <span
          className="domain-panel-status-icon domain-panel-status-icon-blue"
        >
          <span
            className="fa fa-exclamation-circle"
          />
        </span>
      </span>
      <span
        className="domain-panel-title"
      >
        Fields
      </span>
      <span
        className="pull-right"
      >
        <span
          className="fa fa-lg fa-plus-square domain-form-expand-btn"
        />
      </span>
    </div>
    <div
      aria-expanded={null}
      className="panel-collapse collapse"
    >
      <div
        className="panel-body"
      >
        <div
          className="row"
        >
          <div
            className="col-xs-12"
          />
        </div>
        <span
          className="translator--toggle__wizard"
        >
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <label
                className="control-label text-left"
              >
                <strong>
                  Import or infer fields from file
                </strong>
              </label>
            </div>
          </div>
          <div
            className="row"
          >
            <div
              className="col-sm-12"
            >
              <div
                className="wizard-row--container"
              >
                <div
                  className=""
                >
                  <div
                    className="file-upload--container block"
                  >
                    <label
                      className="file-upload--label"
                      htmlFor="fileUpload"
                      onDragEnter={[Function]}
                      onDragLeave={[Function]}
                      onDragOver={[Function]}
                      onDrop={[Function]}
                    >
                      <i
                        aria-hidden="true"
                        className="fa fa-cloud-upload fa-2x cloud-logo"
                      />
                      Select file or drag and drop here.
                    </label>
                    <input
                      accept=".csv, .tsv, .txt, .xls, .xlsx, .json"
                      className="file-upload--input"
                      id="fileUpload"
                      multiple={false}
                      name="fileUpload"
                      onChange={[Function]}
                      type="file"
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </span>
        <div
          className="row"
        >
          <div
            className="col-md-9"
          >
            <div
              className="file-form-formats"
            >
              <strong>
                Supported formats include: 
              </strong>
              .csv, .tsv, .txt, .xls, .xlsx, .json
            </div>
          </div>
          <div
            className="col-md-3"
          >
            <div
              className="pull-right"
            />
          </div>
        </div>
        <div
          className="margin-top domain-form-manual-section"
        >
          <p>
            Or
          </p>
          <div
            className="form-group"
          >
            <div
              className="domain-form-manual-btn"
            >
              <span
                className="container--action-button btn btn-default"
                onClick={[Function]}
              >
                Manually Define Fields
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
  <div
    className="domain-form-panel domain-designer-buttons"
  >
    <button
      className="btn btn-default"
      disabled={false}
      onClick={[MockFunction]}
      type="button"
    >
      Cancel
    </button>
    <button
      className="pull-right btn btn-success"
      disabled={false}
      onClick={[Function]}
      type="button"
    >
      Save
    </button>
  </div>,
]
`;

exports[`SampleTypeDesigner initModel with name URL props 1`] = `
<ComponentWithBaseDomainDesigner
  appPropertiesOnly={true}
  domainFormDisplayOptions={
    {
      "hideConditionalFormatting": true,
    }
  }
  initModel={
    Immutable.Record {
      "domainDesign": Immutable.Record {
        "name": "Test Name",
        "container": undefined,
        "description": undefined,
        "domainURI": undefined,
        "domainId": null,
        "allowFileLinkProperties": false,
        "allowAttachmentProperties": false,
        "allowFlagProperties": true,
        "allowSampleSubjectProperties": true,
        "allowTextChoiceProperties": true,
        "allowTimepointProperties": false,
        "showDefaultValueSettings": false,
        "defaultDefaultValueType": undefined,
        "defaultValueOptions": Immutable.List [],
        "fields": Immutable.List [
          Immutable.Record {
            "conceptURI": undefined,
            "conditionalFormats": Immutable.List [],
            "defaultScale": undefined,
            "defaultValueType": undefined,
            "defaultValue": undefined,
            "defaultDisplayValue": undefined,
            "description": undefined,
            "dimension": undefined,
            "excludeFromShifting": false,
            "format": undefined,
            "hidden": false,
            "importAliases": undefined,
            "label": undefined,
            "lookupContainer": undefined,
            "lookupQuery": undefined,
            "lookupSchema": undefined,
            "lookupValidator": undefined,
            "measure": undefined,
            "mvEnabled": false,
            "name": "testfield",
            "PHI": undefined,
            "propertyId": undefined,
            "propertyURI": undefined,
            "propertyValidators": Immutable.List [],
            "rangeValidators": Immutable.List [],
            "rangeURI": undefined,
            "regexValidators": Immutable.List [],
            "textChoiceValidator": undefined,
            "recommendedVariable": false,
            "required": false,
            "scale": 4000,
            "URL": undefined,
            "shownInDetailsView": true,
            "shownInInsertView": true,
            "shownInUpdateView": true,
            "visible": true,
            "dataType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Text",
              "name": "string",
              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
              "alternateRangeURI": "xsd:string",
              "shortDisplay": "String",
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "lookupQueryValue": undefined,
            "lookupType": Immutable.Record {
              "conceptURI": undefined,
              "display": "Lookup",
              "name": "lookup",
              "rangeURI": undefined,
              "alternateRangeURI": undefined,
              "shortDisplay": undefined,
              "lookupSchema": undefined,
              "lookupQuery": undefined,
            },
            "original": {
              "conceptURI": undefined,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "name": "testfield",
              "rangeURI": undefined,
            },
            "updatedField": false,
            "isPrimaryKey": false,
            "lockType": "NotLocked",
            "wrappedColumnName": undefined,
            "disablePhiLevel": false,
            "lockExistingField": false,
            "sourceOntology": undefined,
            "conceptSubtree": undefined,
            "conceptLabelColumn": undefined,
            "conceptImportColumn": undefined,
            "principalConceptCode": undefined,
            "derivationDataScope": undefined,
            "selected": false,
            "scannable": false,
          },
        ],
        "indices": Immutable.List [],
        "domainException": undefined,
        "mandatoryFieldNames": Immutable.List [],
        "reservedFieldNames": Immutable.List [],
        "newDesignFields": undefined,
        "instructions": undefined,
        "domainKindName": undefined,
        "schemaName": undefined,
        "queryName": undefined,
        "disabledSystemFields": undefined,
      },
      "options": Immutable.Map {},
      "domainKindName": "Unknown",
      "nameReadOnly": true,
      "namePreviews": undefined,
    }
  }
  onCancel={[MockFunction]}
  onComplete={[MockFunction]}
  testMode={true}
>
  <SampleTypeDesignerImpl
    api={
      {
        "domain": DomainPropertiesAPIWrapper {
          "getDomainNamePreviews": [Function],
          "getGenId": [Function],
          "hasExistingDomainData": [Function],
          "setGenId": [Function],
          "validateDomainNameExpressions": [Function],
        },
        "entity": EntityServerAPIWrapper {
          "getDataOperationConfirmationData": [Function],
          "loadNameExpressionOptions": [Function],
        },
        "folder": ServerFolderAPIWrapper {
          "createProject": [Function],
          "renameProject": [Function],
        },
        "labelprinting": LabelPrintingServerAPIWrapper {
          "ensureLabelTemplatesList": [Function],
          "fetchBarTenderConfiguration": [Function],
          "getLabelTemplates": [Function],
          "printBarTenderLabels": [Function],
          "printGridLabels": [Function],
          "saveBarTenderConfiguration": [Function],
        },
        "navigation": ServerNavigationAPIWrapper {
          "initMenuModel": [Function],
          "loadUserMenu": [Function],
        },
        "picklist": PicklistServerAPIWrapper {
          "getPicklistCountsBySampleType": [Function],
          "getPicklistDeleteData": [Function],
          "getPicklistFromId": [Function],
        },
        "query": QueryServerAPIWrapper {
          "getEntityTypeOptions": [Function],
          "getGridViews": [Function],
          "getQueryDetails": [Function],
          "incrementClientSideMetricCount": [Function],
          "selectDistinctRows": [Function],
          "selectRows": [Function],
        },
        "samples": SamplesServerAPIWrapper {
          "createSessionAssayRunSummaryQuery": [Function],
          "getFieldLookupFromSelection": [Function],
          "getSampleAliquotRows": [Function],
          "getSampleAssayResultViewConfigs": [Function],
          "getSampleOperationConfirmationData": [Function],
          "getSampleStatuses": [Function],
          "getSampleStorageId": [Function],
          "getSampleTypeDetails": [Function],
          "getSelectionLineageData": [Function],
          "getTimelineEvents": [Function],
          "loadFinderSearches": [Function],
        },
        "security": ServerSecurityAPIWrapper {
          "addGroupMembers": [Function],
          "createGroup": [Function],
          "deleteGroup": [Function],
          "fetchContainers": [Function],
          "fetchGroups": [Function],
          "fetchPolicy": [Function],
          "getAuditLogData": [Function],
          "getGroupMemberships": [Function],
          "getUserLimitSettings": [Function],
          "removeGroupMembers": [Function],
        },
      }
    }
    appPropertiesOnly={true}
    currentPanelIndex={0}
    defaultSampleFieldConfig={
      {
        "conceptURI": "http://www.labkey.org/exp/xml#sample",
        "dataType": Immutable.Record {
          "conceptURI": "http://www.labkey.org/exp/xml#sample",
          "display": "Sample",
          "name": "sample",
          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
          "alternateRangeURI": undefined,
          "shortDisplay": undefined,
          "lookupSchema": undefined,
          "lookupQuery": undefined,
        },
        "label": "Sample ID",
        "lookupQuery": "Materials",
        "lookupSchema": "exp",
        "lookupType": {
          "_map": Immutable.Map {
            "name": "sample",
            "display": "Sample",
            "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
            "conceptURI": "http://www.labkey.org/exp/xml#sample",
          },
        },
        "name": "SampleID",
        "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
        "required": true,
      }
    }
    domainFormDisplayOptions={
      {
        "hideConditionalFormatting": true,
      }
    }
    firstState={true}
    helpTopic="createSampleType"
    includeDataClasses={false}
    initModel={
      Immutable.Record {
        "domainDesign": Immutable.Record {
          "name": "Test Name",
          "container": undefined,
          "description": undefined,
          "domainURI": undefined,
          "domainId": null,
          "allowFileLinkProperties": false,
          "allowAttachmentProperties": false,
          "allowFlagProperties": true,
          "allowSampleSubjectProperties": true,
          "allowTextChoiceProperties": true,
          "allowTimepointProperties": false,
          "showDefaultValueSettings": false,
          "defaultDefaultValueType": undefined,
          "defaultValueOptions": Immutable.List [],
          "fields": Immutable.List [
            Immutable.Record {
              "conceptURI": undefined,
              "conditionalFormats": Immutable.List [],
              "defaultScale": undefined,
              "defaultValueType": undefined,
              "defaultValue": undefined,
              "defaultDisplayValue": undefined,
              "description": undefined,
              "dimension": undefined,
              "excludeFromShifting": false,
              "format": undefined,
              "hidden": false,
              "importAliases": undefined,
              "label": undefined,
              "lookupContainer": undefined,
              "lookupQuery": undefined,
              "lookupSchema": undefined,
              "lookupValidator": undefined,
              "measure": undefined,
              "mvEnabled": false,
              "name": "testfield",
              "PHI": undefined,
              "propertyId": undefined,
              "propertyURI": undefined,
              "propertyValidators": Immutable.List [],
              "rangeValidators": Immutable.List [],
              "rangeURI": undefined,
              "regexValidators": Immutable.List [],
              "textChoiceValidator": undefined,
              "recommendedVariable": false,
              "required": false,
              "scale": 4000,
              "URL": undefined,
              "shownInDetailsView": true,
              "shownInInsertView": true,
              "shownInUpdateView": true,
              "visible": true,
              "dataType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Text",
                "name": "string",
                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                "alternateRangeURI": "xsd:string",
                "shortDisplay": "String",
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "lookupQueryValue": undefined,
              "lookupType": Immutable.Record {
                "conceptURI": undefined,
                "display": "Lookup",
                "name": "lookup",
                "rangeURI": undefined,
                "alternateRangeURI": undefined,
                "shortDisplay": undefined,
                "lookupSchema": undefined,
                "lookupQuery": undefined,
              },
              "original": {
                "conceptURI": undefined,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "name": "testfield",
                "rangeURI": undefined,
              },
              "updatedField": false,
              "isPrimaryKey": false,
              "lockType": "NotLocked",
              "wrappedColumnName": undefined,
              "disablePhiLevel": false,
              "lockExistingField": false,
              "sourceOntology": undefined,
              "conceptSubtree": undefined,
              "conceptLabelColumn": undefined,
              "conceptImportColumn": undefined,
              "principalConceptCode": undefined,
              "derivationDataScope": undefined,
              "selected": false,
              "scannable": false,
            },
          ],
          "indices": Immutable.List [],
          "domainException": undefined,
          "mandatoryFieldNames": Immutable.List [],
          "reservedFieldNames": Immutable.List [],
          "newDesignFields": undefined,
          "instructions": undefined,
          "domainKindName": undefined,
          "schemaName": undefined,
          "queryName": undefined,
          "disabledSystemFields": undefined,
        },
        "options": Immutable.Map {},
        "domainKindName": "Unknown",
        "nameReadOnly": true,
        "namePreviews": undefined,
      }
    }
    nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
    nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
    onCancel={[MockFunction]}
    onComplete={[MockFunction]}
    onFinish={[Function]}
    onTogglePanel={[Function]}
    setSubmitting={[Function]}
    showLinkToStudy={false}
    showParentLabelPrefix={true}
    submitting={false}
    testMode={true}
    useSeparateDataClassesAliasMenu={false}
    useTheme={false}
    validateNameExpressions={true}
    visitedPanels={Immutable.List []}
  >
    <BaseDomainDesigner
      domains={
        Immutable.List [
          Immutable.Record {
            "name": "Test Name",
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "testfield",
                "PHI": undefined,
                "propertyId": undefined,
                "propertyURI": undefined,
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": undefined,
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": undefined,
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "testfield",
                  "rangeURI": undefined,
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [
              "sampleid",
            ],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          },
        ]
      }
      hasValidProperties={true}
      name="Test Name"
      onCancel={[MockFunction]}
      onFinish={[Function]}
      saveBtnText="Save"
      submitting={false}
      visitedPanels={Immutable.List []}
    >
      <ComponentWithDomainPropertiesPanelCollapse
        appPropertiesOnly={true}
        controlledCollapse={true}
        helpTopic="createSampleType"
        includeDataClasses={false}
        initCollapsed={false}
        model={
          Immutable.Record {
            "rowId": undefined,
            "name": "Test Name",
            "nameReadOnly": true,
            "nameExpression": undefined,
            "aliquotNameExpression": "",
            "description": undefined,
            "labelColor": undefined,
            "metricUnit": undefined,
            "parentAliases": undefined,
            "importAliases": Immutable.Map {},
            "domainId": undefined,
            "domain": Immutable.Record {
              "name": "Test Name",
              "container": undefined,
              "description": undefined,
              "domainURI": undefined,
              "domainId": null,
              "allowFileLinkProperties": false,
              "allowAttachmentProperties": false,
              "allowFlagProperties": true,
              "allowSampleSubjectProperties": true,
              "allowTextChoiceProperties": true,
              "allowTimepointProperties": false,
              "showDefaultValueSettings": false,
              "defaultDefaultValueType": undefined,
              "defaultValueOptions": Immutable.List [],
              "fields": Immutable.List [
                Immutable.Record {
                  "conceptURI": undefined,
                  "conditionalFormats": Immutable.List [],
                  "defaultScale": undefined,
                  "defaultValueType": undefined,
                  "defaultValue": undefined,
                  "defaultDisplayValue": undefined,
                  "description": undefined,
                  "dimension": undefined,
                  "excludeFromShifting": false,
                  "format": undefined,
                  "hidden": false,
                  "importAliases": undefined,
                  "label": undefined,
                  "lookupContainer": undefined,
                  "lookupQuery": undefined,
                  "lookupSchema": undefined,
                  "lookupValidator": undefined,
                  "measure": undefined,
                  "mvEnabled": false,
                  "name": "testfield",
                  "PHI": undefined,
                  "propertyId": undefined,
                  "propertyURI": undefined,
                  "propertyValidators": Immutable.List [],
                  "rangeValidators": Immutable.List [],
                  "rangeURI": undefined,
                  "regexValidators": Immutable.List [],
                  "textChoiceValidator": undefined,
                  "recommendedVariable": false,
                  "required": false,
                  "scale": 4000,
                  "URL": undefined,
                  "shownInDetailsView": true,
                  "shownInInsertView": true,
                  "shownInUpdateView": true,
                  "visible": true,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "lookupQueryValue": undefined,
                  "lookupType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Lookup",
                    "name": "lookup",
                    "rangeURI": undefined,
                    "alternateRangeURI": undefined,
                    "shortDisplay": undefined,
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "original": {
                    "conceptURI": undefined,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "name": "testfield",
                    "rangeURI": undefined,
                  },
                  "updatedField": false,
                  "isPrimaryKey": false,
                  "lockType": "NotLocked",
                  "wrappedColumnName": undefined,
                  "disablePhiLevel": false,
                  "lockExistingField": false,
                  "sourceOntology": undefined,
                  "conceptSubtree": undefined,
                  "conceptLabelColumn": undefined,
                  "conceptImportColumn": undefined,
                  "principalConceptCode": undefined,
                  "derivationDataScope": undefined,
                  "selected": false,
                  "scannable": false,
                },
              ],
              "indices": Immutable.List [],
              "domainException": undefined,
              "mandatoryFieldNames": Immutable.List [],
              "reservedFieldNames": Immutable.List [
                "sampleid",
              ],
              "newDesignFields": undefined,
              "instructions": undefined,
              "domainKindName": undefined,
              "schemaName": undefined,
              "queryName": undefined,
              "disabledSystemFields": undefined,
            },
            "autoLinkTargetContainerId": undefined,
            "autoLinkCategory": undefined,
            "exception": undefined,
          }
        }
        nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
        nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
        namePreviewsLoading={false}
        onAddParentAlias={[Function]}
        onAddUniqueIdField={[Function]}
        onNameFieldHover={[Function]}
        onParentAliasChange={[Function]}
        onRemoveParentAlias={[Function]}
        onToggle={[Function]}
        panelStatus="NONE"
        showLinkToStudy={false}
        updateDupeParentAliases={[Function]}
        updateModel={[Function]}
        useSeparateDataClassesAliasMenu={false}
        useTheme={false}
        validate={false}
      >
        <SampleTypePropertiesPanelImpl
          appPropertiesOnly={true}
          collapsed={false}
          controlledCollapse={true}
          dataClassAliasCaption="Data Class Alias"
          dataClassParentageLabel="data class"
          dataClassTypeCaption="Data Class"
          helpTopic="createSampleType"
          includeDataClasses={false}
          metricUnitProps={
            {
              "metricUnitHelpMsg": "The unit of measurement used for the sample type.",
              "metricUnitLabel": "Metric Unit",
            }
          }
          model={
            Immutable.Record {
              "rowId": undefined,
              "name": "Test Name",
              "nameReadOnly": true,
              "nameExpression": undefined,
              "aliquotNameExpression": "",
              "description": undefined,
              "labelColor": undefined,
              "metricUnit": undefined,
              "parentAliases": undefined,
              "importAliases": Immutable.Map {},
              "domainId": undefined,
              "domain": Immutable.Record {
                "name": "Test Name",
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "testfield",
                    "PHI": undefined,
                    "propertyId": undefined,
                    "propertyURI": undefined,
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": undefined,
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "testfield",
                      "rangeURI": undefined,
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [
                  "sampleid",
                ],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              },
              "autoLinkTargetContainerId": undefined,
              "autoLinkCategory": undefined,
              "exception": undefined,
            }
          }
          nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
          nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
          namePreviewsLoading={false}
          nounPlural="Sample Types"
          nounSingular="Sample Type"
          onAddParentAlias={[Function]}
          onAddUniqueIdField={[Function]}
          onNameFieldHover={[Function]}
          onParentAliasChange={[Function]}
          onRemoveParentAlias={[Function]}
          panelStatus="NONE"
          sampleAliasCaption="Sample Alias"
          sampleTypeCaption="Sample Type"
          showLinkToStudy={false}
          togglePanel={[Function]}
          updateDupeParentAliases={[Function]}
          updateModel={[Function]}
          useSeparateDataClassesAliasMenu={false}
          useTheme={false}
          validate={false}
        >
          <BasePropertiesPanel
            appPropertiesOnly={true}
            collapsed={false}
            controlledCollapse={true}
            dataClassAliasCaption="Data Class Alias"
            dataClassParentageLabel="data class"
            dataClassTypeCaption="Data Class"
            headerId="sample-type-properties-hdr"
            helpTopic="createSampleType"
            includeDataClasses={false}
            isValid={true}
            metricUnitProps={
              {
                "metricUnitHelpMsg": "The unit of measurement used for the sample type.",
                "metricUnitLabel": "Metric Unit",
              }
            }
            model={
              Immutable.Record {
                "rowId": undefined,
                "name": "Test Name",
                "nameReadOnly": true,
                "nameExpression": undefined,
                "aliquotNameExpression": "",
                "description": undefined,
                "labelColor": undefined,
                "metricUnit": undefined,
                "parentAliases": undefined,
                "importAliases": Immutable.Map {},
                "domainId": undefined,
                "domain": Immutable.Record {
                  "name": "Test Name",
                  "container": undefined,
                  "description": undefined,
                  "domainURI": undefined,
                  "domainId": null,
                  "allowFileLinkProperties": false,
                  "allowAttachmentProperties": false,
                  "allowFlagProperties": true,
                  "allowSampleSubjectProperties": true,
                  "allowTextChoiceProperties": true,
                  "allowTimepointProperties": false,
                  "showDefaultValueSettings": false,
                  "defaultDefaultValueType": undefined,
                  "defaultValueOptions": Immutable.List [],
                  "fields": Immutable.List [
                    Immutable.Record {
                      "conceptURI": undefined,
                      "conditionalFormats": Immutable.List [],
                      "defaultScale": undefined,
                      "defaultValueType": undefined,
                      "defaultValue": undefined,
                      "defaultDisplayValue": undefined,
                      "description": undefined,
                      "dimension": undefined,
                      "excludeFromShifting": false,
                      "format": undefined,
                      "hidden": false,
                      "importAliases": undefined,
                      "label": undefined,
                      "lookupContainer": undefined,
                      "lookupQuery": undefined,
                      "lookupSchema": undefined,
                      "lookupValidator": undefined,
                      "measure": undefined,
                      "mvEnabled": false,
                      "name": "testfield",
                      "PHI": undefined,
                      "propertyId": undefined,
                      "propertyURI": undefined,
                      "propertyValidators": Immutable.List [],
                      "rangeValidators": Immutable.List [],
                      "rangeURI": undefined,
                      "regexValidators": Immutable.List [],
                      "textChoiceValidator": undefined,
                      "recommendedVariable": false,
                      "required": false,
                      "scale": 4000,
                      "URL": undefined,
                      "shownInDetailsView": true,
                      "shownInInsertView": true,
                      "shownInUpdateView": true,
                      "visible": true,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "lookupQueryValue": undefined,
                      "lookupType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Lookup",
                        "name": "lookup",
                        "rangeURI": undefined,
                        "alternateRangeURI": undefined,
                        "shortDisplay": undefined,
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "original": {
                        "conceptURI": undefined,
                        "dataType": Immutable.Record {
                          "conceptURI": undefined,
                          "display": "Text",
                          "name": "string",
                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                          "alternateRangeURI": "xsd:string",
                          "shortDisplay": "String",
                          "lookupSchema": undefined,
                          "lookupQuery": undefined,
                        },
                        "name": "testfield",
                        "rangeURI": undefined,
                      },
                      "updatedField": false,
                      "isPrimaryKey": false,
                      "lockType": "NotLocked",
                      "wrappedColumnName": undefined,
                      "disablePhiLevel": false,
                      "lockExistingField": false,
                      "sourceOntology": undefined,
                      "conceptSubtree": undefined,
                      "conceptLabelColumn": undefined,
                      "conceptImportColumn": undefined,
                      "principalConceptCode": undefined,
                      "derivationDataScope": undefined,
                      "selected": false,
                      "scannable": false,
                    },
                  ],
                  "indices": Immutable.List [],
                  "domainException": undefined,
                  "mandatoryFieldNames": Immutable.List [],
                  "reservedFieldNames": Immutable.List [
                    "sampleid",
                  ],
                  "newDesignFields": undefined,
                  "instructions": undefined,
                  "domainKindName": undefined,
                  "schemaName": undefined,
                  "queryName": undefined,
                  "disabledSystemFields": undefined,
                },
                "autoLinkTargetContainerId": undefined,
                "autoLinkCategory": undefined,
                "exception": undefined,
              }
            }
            nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
            nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
            namePreviewsLoading={false}
            nounPlural="Sample Types"
            nounSingular="Sample Type"
            onAddParentAlias={[Function]}
            onAddUniqueIdField={[Function]}
            onNameFieldHover={[Function]}
            onParentAliasChange={[Function]}
            onRemoveParentAlias={[Function]}
            panelStatus="NONE"
            sampleAliasCaption="Sample Alias"
            sampleTypeCaption="Sample Type"
            showLinkToStudy={false}
            title="Sample Type Properties"
            togglePanel={[Function]}
            updateDupeParentAliases={[Function]}
            updateModel={[Function]}
            updateValidStatus={[Function]}
            useSeparateDataClassesAliasMenu={false}
            useTheme={false}
            validate={false}
          >
            <ForwardRef
              className="domain-form-panel domain-panel-no-theme"
              expanded={true}
              onToggle={[Function]}
            >
              <Uncontrolled(Panel)
                className="domain-form-panel domain-panel-no-theme"
                expanded={true}
                innerRef={null}
                onToggle={[Function]}
              >
                <Panel
                  bsClass="panel"
                  bsStyle="default"
                  className="domain-form-panel domain-panel-no-theme"
                  expanded={true}
                  onToggle={[Function]}
                >
                  <div
                    className="domain-form-panel domain-panel-no-theme panel panel-default"
                  >
                    <CollapsiblePanelHeader
                      collapsed={false}
                      controlledCollapse={true}
                      iconHelpMsg="Contains errors or is missing required values."
                      id="sample-type-properties-hdr"
                      isValid={true}
                      panelStatus="NONE"
                      title="Sample Type Properties"
                      togglePanel={[Function]}
                      useTheme={false}
                    >
                      <PanelHeading
                        bsClass="panel"
                        className="domain-panel-header domain-heading-collapsible domain-panel-header-expanded domain-panel-header-no-theme"
                        componentClass="div"
                        id="sample-type-properties-hdr"
                        onClick={[Function]}
                      >
                        <div
                          className="domain-panel-header domain-heading-collapsible domain-panel-header-expanded domain-panel-header-no-theme panel-heading"
                          id="sample-type-properties-hdr"
                          onClick={[Function]}
                        >
                          <span
                            className="domain-panel-title"
                          >
                            Sample Type Properties
                          </span>
                          <span
                            className="pull-right"
                          >
                            <span
                              className="fa fa-lg fa-minus-square domain-form-collapse-btn"
                            />
                          </span>
                        </div>
                      </PanelHeading>
                    </CollapsiblePanelHeader>
                    <PanelBody
                      bsClass="panel"
                      collapsible={true}
                    >
                      <PanelCollapse
                        bsClass="panel"
                      >
                        <Collapse
                          appear={false}
                          dimension="height"
                          getDimensionValue={[Function]}
                          in={true}
                          mountOnEnter={false}
                          timeout={300}
                          unmountOnExit={false}
                        >
                          <Transition
                            appear={false}
                            aria-expanded={null}
                            enter={true}
                            exit={true}
                            in={true}
                            mountOnEnter={false}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onEntering={[Function]}
                            onExit={[Function]}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <div
                              aria-expanded={null}
                              className="panel-collapse collapse in"
                            >
                              <div
                                className="panel-body"
                              >
                                <Row
                                  bsClass="row"
                                  className="margin-bottom"
                                  componentClass="div"
                                >
                                  <div
                                    className="margin-bottom row"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={12}
                                    >
                                      <div
                                        className="col-xs-12"
                                      >
                                        <HelpTopicURL
                                          helpTopic="createSampleType"
                                          nounPlural="Sample Types"
                                        >
                                          <Row
                                            bsClass="row"
                                            componentClass="div"
                                          >
                                            <div
                                              className="row"
                                            >
                                              <Col
                                                bsClass="col"
                                                componentClass="div"
                                                xs={12}
                                              >
                                                <div
                                                  className="col-xs-12"
                                                >
                                                  <HelpLink
                                                    className="domain-field-float-right"
                                                    topic="createSampleType"
                                                  >
                                                    <a
                                                      className="domain-field-float-right"
                                                      href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=createSampleType"
                                                      rel="noopener noreferrer"
                                                      target="_blank"
                                                    >
                                                      Learn more about designing sample types
                                                    </a>
                                                  </HelpLink>
                                                </div>
                                              </Col>
                                            </div>
                                          </Row>
                                        </HelpTopicURL>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                                <SectionHeading
                                  title="General Properties"
                                >
                                  <div
                                    className="domain-field-section-heading"
                                  >
                                    General Properties
                                  </div>
                                </SectionHeading>
                                <EntityDetailsForm
                                  data={
                                    Immutable.Record {
                                      "rowId": undefined,
                                      "name": "Test Name",
                                      "nameReadOnly": true,
                                      "nameExpression": undefined,
                                      "aliquotNameExpression": "",
                                      "description": undefined,
                                      "labelColor": undefined,
                                      "metricUnit": undefined,
                                      "parentAliases": undefined,
                                      "importAliases": Immutable.Map {},
                                      "domainId": undefined,
                                      "domain": Immutable.Record {
                                        "name": "Test Name",
                                        "container": undefined,
                                        "description": undefined,
                                        "domainURI": undefined,
                                        "domainId": null,
                                        "allowFileLinkProperties": false,
                                        "allowAttachmentProperties": false,
                                        "allowFlagProperties": true,
                                        "allowSampleSubjectProperties": true,
                                        "allowTextChoiceProperties": true,
                                        "allowTimepointProperties": false,
                                        "showDefaultValueSettings": false,
                                        "defaultDefaultValueType": undefined,
                                        "defaultValueOptions": Immutable.List [],
                                        "fields": Immutable.List [
                                          Immutable.Record {
                                            "conceptURI": undefined,
                                            "conditionalFormats": Immutable.List [],
                                            "defaultScale": undefined,
                                            "defaultValueType": undefined,
                                            "defaultValue": undefined,
                                            "defaultDisplayValue": undefined,
                                            "description": undefined,
                                            "dimension": undefined,
                                            "excludeFromShifting": false,
                                            "format": undefined,
                                            "hidden": false,
                                            "importAliases": undefined,
                                            "label": undefined,
                                            "lookupContainer": undefined,
                                            "lookupQuery": undefined,
                                            "lookupSchema": undefined,
                                            "lookupValidator": undefined,
                                            "measure": undefined,
                                            "mvEnabled": false,
                                            "name": "testfield",
                                            "PHI": undefined,
                                            "propertyId": undefined,
                                            "propertyURI": undefined,
                                            "propertyValidators": Immutable.List [],
                                            "rangeValidators": Immutable.List [],
                                            "rangeURI": undefined,
                                            "regexValidators": Immutable.List [],
                                            "textChoiceValidator": undefined,
                                            "recommendedVariable": false,
                                            "required": false,
                                            "scale": 4000,
                                            "URL": undefined,
                                            "shownInDetailsView": true,
                                            "shownInInsertView": true,
                                            "shownInUpdateView": true,
                                            "visible": true,
                                            "dataType": Immutable.Record {
                                              "conceptURI": undefined,
                                              "display": "Text",
                                              "name": "string",
                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                              "alternateRangeURI": "xsd:string",
                                              "shortDisplay": "String",
                                              "lookupSchema": undefined,
                                              "lookupQuery": undefined,
                                            },
                                            "lookupQueryValue": undefined,
                                            "lookupType": Immutable.Record {
                                              "conceptURI": undefined,
                                              "display": "Lookup",
                                              "name": "lookup",
                                              "rangeURI": undefined,
                                              "alternateRangeURI": undefined,
                                              "shortDisplay": undefined,
                                              "lookupSchema": undefined,
                                              "lookupQuery": undefined,
                                            },
                                            "original": {
                                              "conceptURI": undefined,
                                              "dataType": Immutable.Record {
                                                "conceptURI": undefined,
                                                "display": "Text",
                                                "name": "string",
                                                "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                "alternateRangeURI": "xsd:string",
                                                "shortDisplay": "String",
                                                "lookupSchema": undefined,
                                                "lookupQuery": undefined,
                                              },
                                              "name": "testfield",
                                              "rangeURI": undefined,
                                            },
                                            "updatedField": false,
                                            "isPrimaryKey": false,
                                            "lockType": "NotLocked",
                                            "wrappedColumnName": undefined,
                                            "disablePhiLevel": false,
                                            "lockExistingField": false,
                                            "sourceOntology": undefined,
                                            "conceptSubtree": undefined,
                                            "conceptLabelColumn": undefined,
                                            "conceptImportColumn": undefined,
                                            "principalConceptCode": undefined,
                                            "derivationDataScope": undefined,
                                            "selected": false,
                                            "scannable": false,
                                          },
                                        ],
                                        "indices": Immutable.List [],
                                        "domainException": undefined,
                                        "mandatoryFieldNames": Immutable.List [],
                                        "reservedFieldNames": Immutable.List [
                                          "sampleid",
                                        ],
                                        "newDesignFields": undefined,
                                        "instructions": undefined,
                                        "domainKindName": undefined,
                                        "schemaName": undefined,
                                        "queryName": undefined,
                                        "disabledSystemFields": undefined,
                                      },
                                      "autoLinkTargetContainerId": undefined,
                                      "autoLinkCategory": undefined,
                                      "exception": undefined,
                                    }
                                  }
                                  nameExpressionInfoUrl="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
                                  nameExpressionPlaceholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
                                  namePreviewsLoading={false}
                                  nameReadOnly={true}
                                  noun="Sample Type"
                                  onFormChange={[Function]}
                                  onNameFieldHover={[Function]}
                                  showPreviewName={false}
                                >
                                  <Form
                                    bsClass="form"
                                    componentClass="form"
                                    horizontal={false}
                                    inline={false}
                                  >
                                    <form
                                      className=""
                                    >
                                      <Row
                                        bsClass="row"
                                        className="margin-bottom margin-top"
                                        componentClass="div"
                                      >
                                        <div
                                          className="margin-bottom margin-top row"
                                        >
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={2}
                                          >
                                            <div
                                              className="col-xs-2"
                                            >
                                              <DomainFieldLabel
                                                label="Name"
                                                required={true}
                                              >
                                                <span
                                                  className="domain-no-wrap"
                                                >
                                                  Name
                                                   *
                                                </span>
                                              </DomainFieldLabel>
                                            </div>
                                          </Col>
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={10}
                                          >
                                            <div
                                              className="col-xs-10"
                                            >
                                              <FormControl
                                                bsClass="form-control"
                                                componentClass="input"
                                                disabled={true}
                                                id="entity-name"
                                                onChange={[Function]}
                                                placeholder="Enter a name for this sample type"
                                                type="text"
                                                value="Test Name"
                                              >
                                                <input
                                                  className="form-control"
                                                  disabled={true}
                                                  id="entity-name"
                                                  onChange={[Function]}
                                                  placeholder="Enter a name for this sample type"
                                                  type="text"
                                                  value="Test Name"
                                                />
                                              </FormControl>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                      <Row
                                        bsClass="row"
                                        className="margin-bottom"
                                        componentClass="div"
                                      >
                                        <div
                                          className="margin-bottom row"
                                        >
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={2}
                                          >
                                            <div
                                              className="col-xs-2"
                                            >
                                              <DomainFieldLabel
                                                helpTipBody="A short description for this sample type."
                                                label="Description"
                                              >
                                                <span
                                                  className="domain-no-wrap"
                                                >
                                                  Description
                                                  <Component
                                                    id="tooltip"
                                                    title="Description"
                                                  >
                                                    <span
                                                      className="label-help-target"
                                                      onMouseOut={[Function]}
                                                      onMouseOver={[Function]}
                                                    >
                                                      <span
                                                        className="label-help-icon fa fa-question-circle"
                                                      />
                                                      <Overlay
                                                        animation={[Function]}
                                                        placement="right"
                                                        rootClose={false}
                                                        show={false}
                                                      >
                                                        <Overlay
                                                          placement="right"
                                                          rootClose={false}
                                                          show={false}
                                                          transition={[Function]}
                                                        />
                                                      </Overlay>
                                                    </span>
                                                  </Component>
                                                </span>
                                              </DomainFieldLabel>
                                            </div>
                                          </Col>
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={10}
                                          >
                                            <div
                                              className="col-xs-10"
                                            >
                                              <textarea
                                                className="form-control"
                                                id="entity-description"
                                                onChange={[Function]}
                                                value=""
                                              />
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                      <Row
                                        bsClass="row"
                                        className="margin-bottom"
                                        componentClass="div"
                                      >
                                        <div
                                          className="margin-bottom row"
                                        >
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={2}
                                          >
                                            <div
                                              className="col-xs-2"
                                            >
                                              <div
                                                className="name-expression-label-div"
                                                onMouseEnter={[Function]}
                                              >
                                                <DomainFieldLabel
                                                  helpTipBody={
                                                    <React.Fragment>
                                                      <p>
                                                        Pattern used for generating unique IDs for this 
                                                        sample type
                                                        .
                                                      </p>
                                                      <p>
                                                        <a
                                                          href="https://www.labkey.org/Documentation/wiki-page.view?referrer=inPage&name=sampleIDs#patterns"
                                                          rel="noopener noreferrer"
                                                          target="_blank"
                                                        >
                                                          More info
                                                        </a>
                                                      </p>
                                                    </React.Fragment>
                                                  }
                                                  label="Naming Pattern"
                                                >
                                                  Naming 
                                                  <span
                                                    className="domain-no-wrap"
                                                  >
                                                    Pattern
                                                    <Component
                                                      id="tooltip"
                                                      title="Naming Pattern"
                                                    >
                                                      <span
                                                        className="label-help-target"
                                                        onMouseOut={[Function]}
                                                        onMouseOver={[Function]}
                                                      >
                                                        <span
                                                          className="label-help-icon fa fa-question-circle"
                                                        />
                                                        <Overlay
                                                          animation={[Function]}
                                                          placement="right"
                                                          rootClose={false}
                                                          show={false}
                                                        >
                                                          <Overlay
                                                            placement="right"
                                                            rootClose={false}
                                                            show={false}
                                                            transition={[Function]}
                                                          />
                                                        </Overlay>
                                                      </span>
                                                    </Component>
                                                  </span>
                                                </DomainFieldLabel>
                                              </div>
                                            </div>
                                          </Col>
                                          <Col
                                            bsClass="col"
                                            componentClass="div"
                                            xs={10}
                                          >
                                            <div
                                              className="col-xs-10"
                                            >
                                              <FormControl
                                                bsClass="form-control"
                                                className=""
                                                componentClass="input"
                                                id="entity-nameExpression"
                                                onChange={[Function]}
                                                placeholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
                                                type="text"
                                                value=""
                                              >
                                                <input
                                                  className="form-control"
                                                  id="entity-nameExpression"
                                                  onChange={[Function]}
                                                  placeholder="Enter a naming pattern (e.g., S-\${now:date}-\${dailySampleCount})"
                                                  type="text"
                                                  value=""
                                                />
                                              </FormControl>
                                            </div>
                                          </Col>
                                        </div>
                                      </Row>
                                    </form>
                                  </Form>
                                </EntityDetailsForm>
                                <SectionHeading
                                  cls="top-spacing"
                                  title="Storage Settings"
                                >
                                  <div
                                    className="domain-field-section-heading top-spacing"
                                  >
                                    Storage Settings
                                  </div>
                                </SectionHeading>
                                <Row
                                  bsClass="row"
                                  className="margin-top"
                                  componentClass="div"
                                >
                                  <div
                                    className="margin-top row"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={2}
                                    >
                                      <div
                                        className="col-xs-2"
                                      >
                                        <DomainFieldLabel
                                          helpTipBody="The label color will be used to distinguish this sample type in various views in the application."
                                          label="Label Color"
                                        >
                                          Label 
                                          <span
                                            className="domain-no-wrap"
                                          >
                                            Color
                                            <Component
                                              id="tooltip"
                                              title="Label Color"
                                            >
                                              <span
                                                className="label-help-target"
                                                onMouseOut={[Function]}
                                                onMouseOver={[Function]}
                                              >
                                                <span
                                                  className="label-help-icon fa fa-question-circle"
                                                />
                                                <Overlay
                                                  animation={[Function]}
                                                  placement="right"
                                                  rootClose={false}
                                                  show={false}
                                                >
                                                  <Overlay
                                                    placement="right"
                                                    rootClose={false}
                                                    show={false}
                                                    transition={[Function]}
                                                  />
                                                </Overlay>
                                              </span>
                                            </Component>
                                          </span>
                                        </DomainFieldLabel>
                                      </div>
                                    </Col>
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={10}
                                    >
                                      <div
                                        className="col-xs-10"
                                      >
                                        <ColorPickerInput
                                          allowRemove={true}
                                          name="labelColor"
                                          onChange={[Function]}
                                        >
                                          <div
                                            className="color-picker"
                                          >
                                            <button
                                              className="color-picker__button btn btn-default"
                                              onClick={[Function]}
                                              type="button"
                                            >
                                              None
                                              <i
                                                className="fa fa-caret-down"
                                              />
                                            </button>
                                            <div
                                              className="color-picker__picker"
                                            />
                                          </div>
                                        </ColorPickerInput>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                              </div>
                            </div>
                          </Transition>
                        </Collapse>
                      </PanelCollapse>
                    </PanelBody>
                  </div>
                </Panel>
              </Uncontrolled(Panel)>
            </ForwardRef>
          </BasePropertiesPanel>
        </SampleTypePropertiesPanelImpl>
      </ComponentWithDomainPropertiesPanelCollapse>
      <DomainForm
        appDomainHeaderRenderer={[Function]}
        appPropertiesOnly={true}
        controlledCollapse={true}
        domain={
          Immutable.Record {
            "name": "Test Name",
            "container": undefined,
            "description": undefined,
            "domainURI": undefined,
            "domainId": null,
            "allowFileLinkProperties": false,
            "allowAttachmentProperties": false,
            "allowFlagProperties": true,
            "allowSampleSubjectProperties": true,
            "allowTextChoiceProperties": true,
            "allowTimepointProperties": false,
            "showDefaultValueSettings": false,
            "defaultDefaultValueType": undefined,
            "defaultValueOptions": Immutable.List [],
            "fields": Immutable.List [
              Immutable.Record {
                "conceptURI": undefined,
                "conditionalFormats": Immutable.List [],
                "defaultScale": undefined,
                "defaultValueType": undefined,
                "defaultValue": undefined,
                "defaultDisplayValue": undefined,
                "description": undefined,
                "dimension": undefined,
                "excludeFromShifting": false,
                "format": undefined,
                "hidden": false,
                "importAliases": undefined,
                "label": undefined,
                "lookupContainer": undefined,
                "lookupQuery": undefined,
                "lookupSchema": undefined,
                "lookupValidator": undefined,
                "measure": undefined,
                "mvEnabled": false,
                "name": "testfield",
                "PHI": undefined,
                "propertyId": undefined,
                "propertyURI": undefined,
                "propertyValidators": Immutable.List [],
                "rangeValidators": Immutable.List [],
                "rangeURI": undefined,
                "regexValidators": Immutable.List [],
                "textChoiceValidator": undefined,
                "recommendedVariable": false,
                "required": false,
                "scale": 4000,
                "URL": undefined,
                "shownInDetailsView": true,
                "shownInInsertView": true,
                "shownInUpdateView": true,
                "visible": true,
                "dataType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Text",
                  "name": "string",
                  "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                  "alternateRangeURI": "xsd:string",
                  "shortDisplay": "String",
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "lookupQueryValue": undefined,
                "lookupType": Immutable.Record {
                  "conceptURI": undefined,
                  "display": "Lookup",
                  "name": "lookup",
                  "rangeURI": undefined,
                  "alternateRangeURI": undefined,
                  "shortDisplay": undefined,
                  "lookupSchema": undefined,
                  "lookupQuery": undefined,
                },
                "original": {
                  "conceptURI": undefined,
                  "dataType": Immutable.Record {
                    "conceptURI": undefined,
                    "display": "Text",
                    "name": "string",
                    "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                    "alternateRangeURI": "xsd:string",
                    "shortDisplay": "String",
                    "lookupSchema": undefined,
                    "lookupQuery": undefined,
                  },
                  "name": "testfield",
                  "rangeURI": undefined,
                },
                "updatedField": false,
                "isPrimaryKey": false,
                "lockType": "NotLocked",
                "wrappedColumnName": undefined,
                "disablePhiLevel": false,
                "lockExistingField": false,
                "sourceOntology": undefined,
                "conceptSubtree": undefined,
                "conceptLabelColumn": undefined,
                "conceptImportColumn": undefined,
                "principalConceptCode": undefined,
                "derivationDataScope": undefined,
                "selected": false,
                "scannable": false,
              },
            ],
            "indices": Immutable.List [],
            "domainException": undefined,
            "mandatoryFieldNames": Immutable.List [],
            "reservedFieldNames": Immutable.List [
              "sampleid",
            ],
            "newDesignFields": undefined,
            "instructions": undefined,
            "domainKindName": undefined,
            "schemaName": undefined,
            "queryName": undefined,
            "disabledSystemFields": undefined,
          }
        }
        domainFormDisplayOptions={
          {
            "derivationDataScopeConfig": {
              "dataTypeFilter": [Function],
              "helpLinkNode": <Memo
                helpTopic="createSampleType#ali"
              />,
              "labelAll": "Separately editable for samples and aliquots",
              "labelChild": "Editable for aliquots only",
              "labelParent": "Editable for samples only (default)",
              "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
              "sectionTitle": "Sample/Aliquot Options",
              "show": undefined,
            },
            "hideConditionalFormatting": true,
            "hideStudyPropertyTypes": true,
            "showScannableOption": true,
            "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
          }
        }
        domainIndex={0}
        headerTitle="Fields"
        helpTopic={null}
        initCollapsed={true}
        key="0"
        newFieldConfig={
          {
            "derivationDataScope": "ParentOnly",
          }
        }
        onChange={[Function]}
        onToggle={[Function]}
        panelStatus="TODO"
        testMode={true}
        useTheme={false}
        validate={false}
      >
        <LookupProvider>
          <DomainFormImpl
            appDomainHeaderRenderer={[Function]}
            appPropertiesOnly={true}
            controlledCollapse={true}
            domain={
              Immutable.Record {
                "name": "Test Name",
                "container": undefined,
                "description": undefined,
                "domainURI": undefined,
                "domainId": null,
                "allowFileLinkProperties": false,
                "allowAttachmentProperties": false,
                "allowFlagProperties": true,
                "allowSampleSubjectProperties": true,
                "allowTextChoiceProperties": true,
                "allowTimepointProperties": false,
                "showDefaultValueSettings": false,
                "defaultDefaultValueType": undefined,
                "defaultValueOptions": Immutable.List [],
                "fields": Immutable.List [
                  Immutable.Record {
                    "conceptURI": undefined,
                    "conditionalFormats": Immutable.List [],
                    "defaultScale": undefined,
                    "defaultValueType": undefined,
                    "defaultValue": undefined,
                    "defaultDisplayValue": undefined,
                    "description": undefined,
                    "dimension": undefined,
                    "excludeFromShifting": false,
                    "format": undefined,
                    "hidden": false,
                    "importAliases": undefined,
                    "label": undefined,
                    "lookupContainer": undefined,
                    "lookupQuery": undefined,
                    "lookupSchema": undefined,
                    "lookupValidator": undefined,
                    "measure": undefined,
                    "mvEnabled": false,
                    "name": "testfield",
                    "PHI": undefined,
                    "propertyId": undefined,
                    "propertyURI": undefined,
                    "propertyValidators": Immutable.List [],
                    "rangeValidators": Immutable.List [],
                    "rangeURI": undefined,
                    "regexValidators": Immutable.List [],
                    "textChoiceValidator": undefined,
                    "recommendedVariable": false,
                    "required": false,
                    "scale": 4000,
                    "URL": undefined,
                    "shownInDetailsView": true,
                    "shownInInsertView": true,
                    "shownInUpdateView": true,
                    "visible": true,
                    "dataType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Text",
                      "name": "string",
                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                      "alternateRangeURI": "xsd:string",
                      "shortDisplay": "String",
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "lookupQueryValue": undefined,
                    "lookupType": Immutable.Record {
                      "conceptURI": undefined,
                      "display": "Lookup",
                      "name": "lookup",
                      "rangeURI": undefined,
                      "alternateRangeURI": undefined,
                      "shortDisplay": undefined,
                      "lookupSchema": undefined,
                      "lookupQuery": undefined,
                    },
                    "original": {
                      "conceptURI": undefined,
                      "dataType": Immutable.Record {
                        "conceptURI": undefined,
                        "display": "Text",
                        "name": "string",
                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                        "alternateRangeURI": "xsd:string",
                        "shortDisplay": "String",
                        "lookupSchema": undefined,
                        "lookupQuery": undefined,
                      },
                      "name": "testfield",
                      "rangeURI": undefined,
                    },
                    "updatedField": false,
                    "isPrimaryKey": false,
                    "lockType": "NotLocked",
                    "wrappedColumnName": undefined,
                    "disablePhiLevel": false,
                    "lockExistingField": false,
                    "sourceOntology": undefined,
                    "conceptSubtree": undefined,
                    "conceptLabelColumn": undefined,
                    "conceptImportColumn": undefined,
                    "principalConceptCode": undefined,
                    "derivationDataScope": undefined,
                    "selected": false,
                    "scannable": false,
                  },
                ],
                "indices": Immutable.List [],
                "domainException": undefined,
                "mandatoryFieldNames": Immutable.List [],
                "reservedFieldNames": Immutable.List [
                  "sampleid",
                ],
                "newDesignFields": undefined,
                "instructions": undefined,
                "domainKindName": undefined,
                "schemaName": undefined,
                "queryName": undefined,
                "disabledSystemFields": undefined,
              }
            }
            domainFormDisplayOptions={
              {
                "derivationDataScopeConfig": {
                  "dataTypeFilter": [Function],
                  "helpLinkNode": <Memo
                    helpTopic="createSampleType#ali"
                  />,
                  "labelAll": "Separately editable for samples and aliquots",
                  "labelChild": "Editable for aliquots only",
                  "labelParent": "Editable for samples only (default)",
                  "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                  "sectionTitle": "Sample/Aliquot Options",
                  "show": undefined,
                },
                "hideConditionalFormatting": true,
                "hideStudyPropertyTypes": true,
                "showScannableOption": true,
                "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
              }
            }
            domainIndex={0}
            headerTitle="Fields"
            helpNoun="field designer"
            helpTopic={null}
            initCollapsed={true}
            isNew={false}
            newFieldConfig={
              {
                "derivationDataScope": "ParentOnly",
              }
            }
            onChange={[Function]}
            onToggle={[Function]}
            panelStatus="TODO"
            showHeader={true}
            successBsStyle="success"
            testMode={true}
            useTheme={false}
            validate={false}
          >
            <ForwardRef
              className="domain-form-panel"
              expanded={false}
              onToggle={[Function]}
            >
              <Uncontrolled(Panel)
                className="domain-form-panel"
                expanded={false}
                innerRef={null}
                onToggle={[Function]}
              >
                <Panel
                  bsClass="panel"
                  bsStyle="default"
                  className="domain-form-panel"
                  expanded={false}
                  onToggle={[Function]}
                >
                  <div
                    className="domain-form-panel panel panel-default"
                  >
                    <CollapsiblePanelHeader
                      collapsed={true}
                      controlledCollapse={true}
                      headerDetails="1 Field Defined"
                      id="domainpropertiesrow-Test-Name-hdr"
                      isValid={true}
                      panelStatus="TODO"
                      title="Fields"
                      togglePanel={[Function]}
                      useTheme={false}
                    >
                      <PanelHeading
                        bsClass="panel"
                        className="domain-panel-header domain-heading-collapsible domain-panel-header-collapsed"
                        componentClass="div"
                        id="domainpropertiesrow-Test-Name-hdr"
                        onClick={[Function]}
                      >
                        <div
                          className="domain-panel-header domain-heading-collapsible domain-panel-header-collapsed panel-heading"
                          id="domainpropertiesrow-Test-Name-hdr"
                          onClick={[Function]}
                        >
                          <Component
                            iconComponent={
                              <span
                                className="domain-panel-status-icon domain-panel-status-icon-blue"
                              >
                                <span
                                  className="fa fa-exclamation-circle"
                                />
                              </span>
                            }
                            id="tooltip"
                            placement="top"
                            title="Fields"
                          >
                            <span
                              className="label-help-target"
                              onMouseOut={[Function]}
                              onMouseOver={[Function]}
                            >
                              <span
                                className="domain-panel-status-icon domain-panel-status-icon-blue"
                              >
                                <span
                                  className="fa fa-exclamation-circle"
                                />
                              </span>
                              <Overlay
                                animation={[Function]}
                                placement="top"
                                rootClose={false}
                                show={false}
                              >
                                <Overlay
                                  placement="top"
                                  rootClose={false}
                                  show={false}
                                  transition={[Function]}
                                />
                              </Overlay>
                            </span>
                          </Component>
                          <span
                            className="domain-panel-title"
                          >
                            Fields
                          </span>
                          <span
                            className="pull-right"
                          >
                            <span
                              className="fa fa-lg fa-plus-square domain-form-expand-btn"
                            />
                          </span>
                          <span
                            className="domain-panel-header-fields-defined"
                          >
                            1 Field Defined
                          </span>
                        </div>
                      </PanelHeading>
                    </CollapsiblePanelHeader>
                    <PanelBody
                      bsClass="panel"
                      className="domain-field-top-noBuffer"
                      collapsible={true}
                    >
                      <PanelCollapse
                        bsClass="panel"
                      >
                        <Collapse
                          appear={false}
                          dimension="height"
                          getDimensionValue={[Function]}
                          in={false}
                          mountOnEnter={false}
                          timeout={300}
                          unmountOnExit={false}
                        >
                          <Transition
                            appear={false}
                            aria-expanded={null}
                            enter={true}
                            exit={true}
                            in={false}
                            mountOnEnter={false}
                            onEnter={[Function]}
                            onEntered={[Function]}
                            onEntering={[Function]}
                            onExit={[Function]}
                            onExited={[Function]}
                            onExiting={[Function]}
                            timeout={300}
                            unmountOnExit={false}
                          >
                            <div
                              aria-expanded={null}
                              className="panel-collapse collapse"
                            >
                              <div
                                className="domain-field-top-noBuffer panel-body"
                              >
                                <Row
                                  bsClass="row"
                                  className="domain-field-toolbar"
                                  componentClass="div"
                                >
                                  <div
                                    className="domain-field-toolbar row"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={4}
                                    >
                                      <div
                                        className="col-xs-4"
                                      >
                                        <AddEntityButton
                                          buttonClass="domain-toolbar-add-btn"
                                          containerClass="container--toolbar-button"
                                          entity="Field"
                                          onClick={[Function]}
                                        >
                                          <ActionButton
                                            buttonClass="domain-toolbar-add-btn"
                                            containerClass="container--toolbar-button"
                                            helperTitle="More Info"
                                            onClick={[Function]}
                                          >
                                            <div
                                              className="container--toolbar-button"
                                            >
                                              <div
                                                className="domain-toolbar-add-btn"
                                              >
                                                <span
                                                  className="container--action-button btn btn-default"
                                                  onClick={[Function]}
                                                >
                                                  <i
                                                    className="fa fa-plus-circle container--addition-icon"
                                                  />
                                                   Add 
                                                  Field
                                                </span>
                                              </div>
                                            </div>
                                          </ActionButton>
                                        </AddEntityButton>
                                        <ActionButton
                                          buttonClass="domain-toolbar-delete-btn"
                                          containerClass="container--toolbar-button"
                                          disabled={true}
                                          helperTitle="More Info"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="container--toolbar-button"
                                          >
                                            <div
                                              className="domain-toolbar-delete-btn"
                                            >
                                              <span
                                                className="container--action-button btn btn-default disabled"
                                              >
                                                <i
                                                  className="fa fa-trash domain-toolbar-export-btn-icon"
                                                />
                                                 Delete
                                              </span>
                                            </div>
                                          </div>
                                        </ActionButton>
                                        <ActionButton
                                          buttonClass="domain-toolbar-export-btn"
                                          containerClass="container--toolbar-button"
                                          disabled={false}
                                          helperTitle="More Info"
                                          onClick={[Function]}
                                        >
                                          <div
                                            className="container--toolbar-button"
                                          >
                                            <div
                                              className="domain-toolbar-export-btn"
                                            >
                                              <span
                                                className="container--action-button btn btn-default"
                                                onClick={[Function]}
                                              >
                                                <i
                                                  className="fa fa-download domain-toolbar-export-btn-icon"
                                                />
                                                 Export
                                              </span>
                                            </div>
                                          </div>
                                        </ActionButton>
                                      </div>
                                    </Col>
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={8}
                                    >
                                      <div
                                        className="col-xs-8"
                                      >
                                        <div
                                          className="pull-right domain-field-toolbar-right-aligned"
                                        >
                                          <FormControl
                                            bsClass="form-control"
                                            className="domain-search-input"
                                            componentClass="input"
                                            id="domain-search-name-0"
                                            onChange={[Function]}
                                            placeholder="Search Fields"
                                            type="text"
                                          >
                                            <input
                                              className="domain-search-input form-control"
                                              id="domain-search-name-0"
                                              onChange={[Function]}
                                              placeholder="Search Fields"
                                              type="text"
                                            />
                                          </FormControl>
                                        </div>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                                <Row
                                  bsClass="row"
                                  className=""
                                  componentClass="div"
                                >
                                  <div
                                    className="row"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={12}
                                    >
                                      <div
                                        className="col-xs-12"
                                      />
                                    </Col>
                                  </div>
                                </Row>
                                <DragDropContext
                                  onBeforeDragStart={[Function]}
                                  onDragEnd={[Function]}
                                >
                                  <ErrorBoundary>
                                    <App
                                      contextId="0"
                                      dragHandleUsageInstructions="
  Press space bar to start a drag.
  When dragging you can use the arrow keys to move the item around and escape to cancel.
  Some screen readers may require you to be in focus mode or to use your pass through key
"
                                      onBeforeDragStart={[Function]}
                                      onDragEnd={[Function]}
                                      setCallbacks={[Function]}
                                    >
                                      <Provider
                                        context={
                                          {
                                            "$$typeof": Symbol(react.context),
                                            "Consumer": {
                                              "$$typeof": Symbol(react.context),
                                              "_calculateChangedBits": null,
                                              "_context": [Circular],
                                            },
                                            "Provider": {
                                              "$$typeof": Symbol(react.provider),
                                              "_context": [Circular],
                                            },
                                            "_calculateChangedBits": null,
                                            "_currentRenderer": {},
                                            "_currentRenderer2": null,
                                            "_currentValue": null,
                                            "_currentValue2": null,
                                            "_threadCount": 0,
                                          }
                                        }
                                        store={
                                          {
                                            "@@observable": [Function],
                                            "dispatch": [Function],
                                            "getState": [Function],
                                            "replaceReducer": [Function],
                                            "subscribe": [Function],
                                          }
                                        }
                                      >
                                        <div
                                          className="domain-field-row domain-row-border-default domain-floating-hdr"
                                        >
                                          <Alert
                                            bsStyle="info"
                                          />
                                          <Row
                                            bsClass="row"
                                            componentClass="div"
                                          >
                                            <div
                                              className="row"
                                            >
                                              <div
                                                className="domain-field-header"
                                              >
                                                0
                                                 
                                                fields
                                                 selected
                                                <Button
                                                  active={false}
                                                  block={false}
                                                  bsClass="btn"
                                                  bsStyle="default"
                                                  className="domain-panel-header-clear-all"
                                                  disabled={true}
                                                  onClick={[Function]}
                                                >
                                                  <button
                                                    className="domain-panel-header-clear-all btn btn-default"
                                                    disabled={true}
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    Clear
                                                  </button>
                                                </Button>
                                              </div>
                                            </div>
                                          </Row>
                                          <Row
                                            bsClass="row"
                                            className="domain-row-container"
                                            componentClass="div"
                                          >
                                            <div
                                              className="domain-row-container row"
                                            >
                                              <div
                                                className="domain-row-handle"
                                              />
                                              <div
                                                className="domain-row-action-section"
                                              >
                                                <Checkbox
                                                  bsClass="checkbox"
                                                  checked={false}
                                                  className="domain-field-check-icon"
                                                  disabled={false}
                                                  id="domain-select-all-checkbox"
                                                  inline={false}
                                                  name="domain-select-all-checkbox"
                                                  onChange={[Function]}
                                                  title=""
                                                >
                                                  <div
                                                    className="domain-field-check-icon checkbox"
                                                  >
                                                    <label
                                                      title=""
                                                    >
                                                      <input
                                                        checked={false}
                                                        disabled={false}
                                                        id="domain-select-all-checkbox"
                                                        name="domain-select-all-checkbox"
                                                        onChange={[Function]}
                                                        type="checkbox"
                                                      />
                                                    </label>
                                                  </div>
                                                </Checkbox>
                                              </div>
                                              <div>
                                                <Col
                                                  bsClass="col"
                                                  className="domain-row-base-fields"
                                                  componentClass="div"
                                                  xs={6}
                                                >
                                                  <div
                                                    className="domain-row-base-fields col-xs-6"
                                                  >
                                                    <Col
                                                      bsClass="col"
                                                      componentClass="div"
                                                      xs={6}
                                                    >
                                                      <div
                                                        className="col-xs-6"
                                                      >
                                                        <b>
                                                          Name *
                                                        </b>
                                                      </div>
                                                    </Col>
                                                    <Col
                                                      bsClass="col"
                                                      componentClass="div"
                                                      xs={4}
                                                    >
                                                      <div
                                                        className="col-xs-4"
                                                      >
                                                        <b>
                                                          Data Type *
                                                        </b>
                                                      </div>
                                                    </Col>
                                                    <Col
                                                      bsClass="col"
                                                      componentClass="div"
                                                      xs={2}
                                                    >
                                                      <div
                                                        className="col-xs-2"
                                                      >
                                                        <b>
                                                          Required
                                                        </b>
                                                      </div>
                                                    </Col>
                                                  </div>
                                                </Col>
                                                <Col
                                                  bsClass="col"
                                                  componentClass="div"
                                                  xs={6}
                                                >
                                                  <div
                                                    className="col-xs-6"
                                                  >
                                                    <b>
                                                      Details
                                                    </b>
                                                  </div>
                                                </Col>
                                              </div>
                                            </div>
                                          </Row>
                                        </div>
                                        <Connect(Droppable)
                                          direction="vertical"
                                          droppableId="domain-form-droppable"
                                          getContainerForClone={[Function]}
                                          ignoreContainerClipping={false}
                                          isCombineEnabled={false}
                                          isDropDisabled={false}
                                          mode="standard"
                                          renderClone={null}
                                          type="DEFAULT"
                                        >
                                          <Droppable
                                            direction="vertical"
                                            droppableId="domain-form-droppable"
                                            getContainerForClone={[Function]}
                                            ignoreContainerClipping={false}
                                            isCombineEnabled={false}
                                            isDropDisabled={false}
                                            mode="standard"
                                            placeholder={null}
                                            renderClone={null}
                                            shouldAnimatePlaceholder={false}
                                            snapshot={
                                              {
                                                "draggingFromThisWith": null,
                                                "draggingOverWith": null,
                                                "isDraggingOver": false,
                                                "isUsingPlaceholder": false,
                                              }
                                            }
                                            type="DEFAULT"
                                            updateViewportMaxScroll={[Function]}
                                            useClone={null}
                                          >
                                            <div
                                              data-rbd-droppable-context-id="0"
                                              data-rbd-droppable-id="domain-form-droppable"
                                            >
                                              <Form
                                                bsClass="form"
                                                className="domain-form"
                                                componentClass="form"
                                                horizontal={false}
                                                inline={false}
                                              >
                                                <form
                                                  className="domain-form"
                                                >
                                                  <DomainRow
                                                    appPropertiesOnly={true}
                                                    availableTypes={
                                                      Immutable.List [
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Text",
                                                          "name": "string",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "alternateRangeURI": "xsd:string",
                                                          "shortDisplay": "String",
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Multi-Line Text",
                                                          "name": "multiLine",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#multiLine",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Boolean",
                                                          "name": "boolean",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#boolean",
                                                          "alternateRangeURI": "xsd:boolean",
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Integer",
                                                          "name": "int",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "alternateRangeURI": "xsd:int",
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Decimal (floating point)",
                                                          "name": "double",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#double",
                                                          "alternateRangeURI": "xsd:double",
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Date Time",
                                                          "name": "dateTime",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#dateTime",
                                                          "alternateRangeURI": "xsd:dateTime",
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/exp/xml#flag",
                                                          "display": "Flag",
                                                          "name": "flag",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "User",
                                                          "name": "users",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": "core",
                                                          "lookupQuery": "users",
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": "http://cpas.labkey.com/Study#ParticipantId",
                                                          "display": "Subject/Participant",
                                                          "name": "ParticipantId",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Lookup",
                                                          "name": "lookup",
                                                          "rangeURI": undefined,
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/exp/xml#sample",
                                                          "display": "Sample",
                                                          "name": "sample",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#int",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        Immutable.Record {
                                                          "conceptURI": "http://www.labkey.org/types#textChoice",
                                                          "display": "Text Choice",
                                                          "name": "textChoice",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                      ]
                                                    }
                                                    defaultValueOptions={Immutable.List []}
                                                    domainFormDisplayOptions={
                                                      {
                                                        "derivationDataScopeConfig": {
                                                          "dataTypeFilter": [Function],
                                                          "helpLinkNode": <Memo
                                                            helpTopic="createSampleType#ali"
                                                          />,
                                                          "labelAll": "Separately editable for samples and aliquots",
                                                          "labelChild": "Editable for aliquots only",
                                                          "labelParent": "Editable for samples only (default)",
                                                          "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                                                          "sectionTitle": "Sample/Aliquot Options",
                                                          "show": undefined,
                                                        },
                                                        "hideConditionalFormatting": true,
                                                        "hideStudyPropertyTypes": true,
                                                        "showScannableOption": true,
                                                        "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
                                                      }
                                                    }
                                                    domainId={null}
                                                    domainIndex={0}
                                                    dragging={false}
                                                    expandTransition={300}
                                                    expanded={false}
                                                    field={
                                                      Immutable.Record {
                                                        "conceptURI": undefined,
                                                        "conditionalFormats": Immutable.List [],
                                                        "defaultScale": undefined,
                                                        "defaultValueType": undefined,
                                                        "defaultValue": undefined,
                                                        "defaultDisplayValue": undefined,
                                                        "description": undefined,
                                                        "dimension": undefined,
                                                        "excludeFromShifting": false,
                                                        "format": undefined,
                                                        "hidden": false,
                                                        "importAliases": undefined,
                                                        "label": undefined,
                                                        "lookupContainer": undefined,
                                                        "lookupQuery": undefined,
                                                        "lookupSchema": undefined,
                                                        "lookupValidator": undefined,
                                                        "measure": undefined,
                                                        "mvEnabled": false,
                                                        "name": "testfield",
                                                        "PHI": undefined,
                                                        "propertyId": undefined,
                                                        "propertyURI": undefined,
                                                        "propertyValidators": Immutable.List [],
                                                        "rangeValidators": Immutable.List [],
                                                        "rangeURI": undefined,
                                                        "regexValidators": Immutable.List [],
                                                        "textChoiceValidator": undefined,
                                                        "recommendedVariable": false,
                                                        "required": false,
                                                        "scale": 4000,
                                                        "URL": undefined,
                                                        "shownInDetailsView": true,
                                                        "shownInInsertView": true,
                                                        "shownInUpdateView": true,
                                                        "visible": true,
                                                        "dataType": Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Text",
                                                          "name": "string",
                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                          "alternateRangeURI": "xsd:string",
                                                          "shortDisplay": "String",
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        "lookupQueryValue": undefined,
                                                        "lookupType": Immutable.Record {
                                                          "conceptURI": undefined,
                                                          "display": "Lookup",
                                                          "name": "lookup",
                                                          "rangeURI": undefined,
                                                          "alternateRangeURI": undefined,
                                                          "shortDisplay": undefined,
                                                          "lookupSchema": undefined,
                                                          "lookupQuery": undefined,
                                                        },
                                                        "original": {
                                                          "conceptURI": undefined,
                                                          "dataType": Immutable.Record {
                                                            "conceptURI": undefined,
                                                            "display": "Text",
                                                            "name": "string",
                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                            "alternateRangeURI": "xsd:string",
                                                            "shortDisplay": "String",
                                                            "lookupSchema": undefined,
                                                            "lookupQuery": undefined,
                                                          },
                                                          "name": "testfield",
                                                          "rangeURI": undefined,
                                                        },
                                                        "updatedField": false,
                                                        "isPrimaryKey": false,
                                                        "lockType": "NotLocked",
                                                        "wrappedColumnName": undefined,
                                                        "disablePhiLevel": false,
                                                        "lockExistingField": false,
                                                        "sourceOntology": undefined,
                                                        "conceptSubtree": undefined,
                                                        "conceptLabelColumn": undefined,
                                                        "conceptImportColumn": undefined,
                                                        "principalConceptCode": undefined,
                                                        "derivationDataScope": undefined,
                                                        "selected": false,
                                                        "scannable": false,
                                                      }
                                                    }
                                                    fieldDetailsInfo={{}}
                                                    getDomainFields={[Function]}
                                                    helpNoun="field designer"
                                                    index={0}
                                                    key="domain-row-key-0"
                                                    maxPhiLevel="NotPHI"
                                                    onChange={[Function]}
                                                    onDelete={[Function]}
                                                    onExpand={[Function]}
                                                    showDefaultValueSettings={false}
                                                    successBsStyle="success"
                                                  >
                                                    <PublicDraggable
                                                      draggableId="domainpropertiesrow-domaindrag-0-0"
                                                      index={0}
                                                    >
                                                      <PrivateDraggable
                                                        canDragInteractiveElements={false}
                                                        draggableId="domainpropertiesrow-domaindrag-0-0"
                                                        index={0}
                                                        isClone={false}
                                                        isEnabled={true}
                                                        shouldRespectForcePress={false}
                                                      >
                                                        <Connect(Draggable)
                                                          canDragInteractiveElements={false}
                                                          draggableId="domainpropertiesrow-domaindrag-0-0"
                                                          index={0}
                                                          isClone={false}
                                                          isEnabled={true}
                                                          shouldRespectForcePress={false}
                                                        >
                                                          <Draggable
                                                            canDragInteractiveElements={false}
                                                            draggableId="domainpropertiesrow-domaindrag-0-0"
                                                            dropAnimationFinished={[Function]}
                                                            index={0}
                                                            isClone={false}
                                                            isEnabled={true}
                                                            mapped={
                                                              {
                                                                "combineTargetFor": null,
                                                                "offset": {
                                                                  "x": 0,
                                                                  "y": 0,
                                                                },
                                                                "shouldAnimateDisplacement": true,
                                                                "snapshot": {
                                                                  "combineTargetFor": null,
                                                                  "combineWith": null,
                                                                  "draggingOver": null,
                                                                  "dropAnimation": null,
                                                                  "isClone": false,
                                                                  "isDragging": false,
                                                                  "isDropAnimating": false,
                                                                  "mode": null,
                                                                },
                                                                "type": "SECONDARY",
                                                              }
                                                            }
                                                            shouldRespectForcePress={false}
                                                          >
                                                            <div
                                                              className="domain-field-row domain-row-border-default"
                                                              data-rbd-draggable-context-id="0"
                                                              data-rbd-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                              onTransitionEnd={null}
                                                              style={
                                                                {
                                                                  "transform": null,
                                                                  "transition": null,
                                                                }
                                                              }
                                                              tabIndex={0}
                                                            >
                                                              <Row
                                                                bsClass="row"
                                                                className="domain-row-container"
                                                                componentClass="div"
                                                                key="domainpropertiesrow-domainrow-0-0"
                                                              >
                                                                <div
                                                                  className="domain-row-container row"
                                                                >
                                                                  <AdvancedSettings
                                                                    defaultValueOptions={Immutable.List []}
                                                                    domainFormDisplayOptions={
                                                                      {
                                                                        "derivationDataScopeConfig": {
                                                                          "dataTypeFilter": [Function],
                                                                          "helpLinkNode": <Memo
                                                                            helpTopic="createSampleType#ali"
                                                                          />,
                                                                          "labelAll": "Separately editable for samples and aliquots",
                                                                          "labelChild": "Editable for aliquots only",
                                                                          "labelParent": "Editable for samples only (default)",
                                                                          "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                                                                          "sectionTitle": "Sample/Aliquot Options",
                                                                          "show": undefined,
                                                                        },
                                                                        "hideConditionalFormatting": true,
                                                                        "hideStudyPropertyTypes": true,
                                                                        "showScannableOption": true,
                                                                        "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
                                                                      }
                                                                    }
                                                                    domainId={null}
                                                                    domainIndex={0}
                                                                    field={
                                                                      Immutable.Record {
                                                                        "conceptURI": undefined,
                                                                        "conditionalFormats": Immutable.List [],
                                                                        "defaultScale": undefined,
                                                                        "defaultValueType": undefined,
                                                                        "defaultValue": undefined,
                                                                        "defaultDisplayValue": undefined,
                                                                        "description": undefined,
                                                                        "dimension": undefined,
                                                                        "excludeFromShifting": false,
                                                                        "format": undefined,
                                                                        "hidden": false,
                                                                        "importAliases": undefined,
                                                                        "label": undefined,
                                                                        "lookupContainer": undefined,
                                                                        "lookupQuery": undefined,
                                                                        "lookupSchema": undefined,
                                                                        "lookupValidator": undefined,
                                                                        "measure": undefined,
                                                                        "mvEnabled": false,
                                                                        "name": "testfield",
                                                                        "PHI": undefined,
                                                                        "propertyId": undefined,
                                                                        "propertyURI": undefined,
                                                                        "propertyValidators": Immutable.List [],
                                                                        "rangeValidators": Immutable.List [],
                                                                        "rangeURI": undefined,
                                                                        "regexValidators": Immutable.List [],
                                                                        "textChoiceValidator": undefined,
                                                                        "recommendedVariable": false,
                                                                        "required": false,
                                                                        "scale": 4000,
                                                                        "URL": undefined,
                                                                        "shownInDetailsView": true,
                                                                        "shownInInsertView": true,
                                                                        "shownInUpdateView": true,
                                                                        "visible": true,
                                                                        "dataType": Immutable.Record {
                                                                          "conceptURI": undefined,
                                                                          "display": "Text",
                                                                          "name": "string",
                                                                          "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                          "alternateRangeURI": "xsd:string",
                                                                          "shortDisplay": "String",
                                                                          "lookupSchema": undefined,
                                                                          "lookupQuery": undefined,
                                                                        },
                                                                        "lookupQueryValue": undefined,
                                                                        "lookupType": Immutable.Record {
                                                                          "conceptURI": undefined,
                                                                          "display": "Lookup",
                                                                          "name": "lookup",
                                                                          "rangeURI": undefined,
                                                                          "alternateRangeURI": undefined,
                                                                          "shortDisplay": undefined,
                                                                          "lookupSchema": undefined,
                                                                          "lookupQuery": undefined,
                                                                        },
                                                                        "original": {
                                                                          "conceptURI": undefined,
                                                                          "dataType": Immutable.Record {
                                                                            "conceptURI": undefined,
                                                                            "display": "Text",
                                                                            "name": "string",
                                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                            "alternateRangeURI": "xsd:string",
                                                                            "shortDisplay": "String",
                                                                            "lookupSchema": undefined,
                                                                            "lookupQuery": undefined,
                                                                          },
                                                                          "name": "testfield",
                                                                          "rangeURI": undefined,
                                                                        },
                                                                        "updatedField": false,
                                                                        "isPrimaryKey": false,
                                                                        "lockType": "NotLocked",
                                                                        "wrappedColumnName": undefined,
                                                                        "disablePhiLevel": false,
                                                                        "lockExistingField": false,
                                                                        "sourceOntology": undefined,
                                                                        "conceptSubtree": undefined,
                                                                        "conceptLabelColumn": undefined,
                                                                        "conceptImportColumn": undefined,
                                                                        "principalConceptCode": undefined,
                                                                        "derivationDataScope": undefined,
                                                                        "selected": false,
                                                                        "scannable": false,
                                                                      }
                                                                    }
                                                                    helpNoun="field designer"
                                                                    index={0}
                                                                    label="testfield"
                                                                    maxPhiLevel="NotPHI"
                                                                    onApply={[Function]}
                                                                    onHide={[Function]}
                                                                    show={false}
                                                                    showDefaultValueSettings={false}
                                                                    successBsStyle="success"
                                                                  >
                                                                    <Modal
                                                                      animation={true}
                                                                      autoFocus={true}
                                                                      backdrop={true}
                                                                      bsClass="modal"
                                                                      dialogComponentClass={[Function]}
                                                                      enforceFocus={true}
                                                                      keyboard={true}
                                                                      manager={
                                                                        ModalManager {
                                                                          "add": [Function],
                                                                          "containers": [],
                                                                          "data": [],
                                                                          "handleContainerOverflow": true,
                                                                          "hideSiblingNodes": true,
                                                                          "isTopModal": [Function],
                                                                          "modals": [],
                                                                          "remove": [Function],
                                                                        }
                                                                      }
                                                                      onEnter={[Function]}
                                                                      onHide={[Function]}
                                                                      renderBackdrop={[Function]}
                                                                      restoreFocus={true}
                                                                      show={false}
                                                                    >
                                                                      <Modal
                                                                        autoFocus={true}
                                                                        backdrop={true}
                                                                        backdropClassName="modal-backdrop"
                                                                        backdropTransition={[Function]}
                                                                        containerClassName="modal-open"
                                                                        enforceFocus={true}
                                                                        keyboard={true}
                                                                        manager={
                                                                          ModalManager {
                                                                            "add": [Function],
                                                                            "containers": [],
                                                                            "data": [],
                                                                            "handleContainerOverflow": true,
                                                                            "hideSiblingNodes": true,
                                                                            "isTopModal": [Function],
                                                                            "modals": [],
                                                                            "remove": [Function],
                                                                          }
                                                                        }
                                                                        onEnter={[Function]}
                                                                        onEntering={[Function]}
                                                                        onExited={[Function]}
                                                                        onHide={[Function]}
                                                                        onMouseUp={[Function]}
                                                                        renderBackdrop={[Function]}
                                                                        restoreFocus={true}
                                                                        show={false}
                                                                        transition={[Function]}
                                                                      />
                                                                    </Modal>
                                                                  </AdvancedSettings>
                                                                  <div
                                                                    aria-describedby="rbd-hidden-text-0-hidden-text-0"
                                                                    className="domain-row-handle"
                                                                    data-rbd-drag-handle-context-id="0"
                                                                    data-rbd-drag-handle-draggable-id="domainpropertiesrow-domaindrag-0-0"
                                                                    draggable={false}
                                                                    onDragStart={[Function]}
                                                                    role="button"
                                                                    tabIndex={0}
                                                                  >
                                                                    <DragDropHandle>
                                                                      <div
                                                                        className="drag-drop-handle"
                                                                      >
                                                                        <span
                                                                          className="fa fa-ellipsis-v"
                                                                        />
                                                                        <span
                                                                          className="fa fa-ellipsis-v"
                                                                        />
                                                                      </div>
                                                                    </DragDropHandle>
                                                                  </div>
                                                                  <div
                                                                    className="domain-row-action-section"
                                                                  >
                                                                    <Checkbox
                                                                      bsClass="checkbox"
                                                                      checked={false}
                                                                      className="domain-field-check-icon"
                                                                      disabled={false}
                                                                      id="domainpropertiesrow-selected-0-0"
                                                                      inline={false}
                                                                      name="domainpropertiesrow-selected"
                                                                      onChange={[Function]}
                                                                      title=""
                                                                    >
                                                                      <div
                                                                        className="domain-field-check-icon checkbox"
                                                                      >
                                                                        <label
                                                                          title=""
                                                                        >
                                                                          <input
                                                                            checked={false}
                                                                            disabled={false}
                                                                            id="domainpropertiesrow-selected-0-0"
                                                                            name="domainpropertiesrow-selected"
                                                                            onChange={[Function]}
                                                                            type="checkbox"
                                                                          />
                                                                        </label>
                                                                      </div>
                                                                    </Checkbox>
                                                                    <FieldExpansionToggle
                                                                      cls="domain-field-expand-icon"
                                                                      collapsedTitle="Show additional field properties"
                                                                      expanded={false}
                                                                      expandedTitle="Hide additional field properties"
                                                                      id="domainpropertiesrow-expand-0-0"
                                                                      onClick={[Function]}
                                                                    >
                                                                      <div
                                                                        className="field-icon domain-field-expand-icon"
                                                                        id="domainpropertiesrow-expand-0-0"
                                                                        onClick={[Function]}
                                                                        title="Show additional field properties"
                                                                      >
                                                                        <span
                                                                          className="fa fa-lg fa-plus-square"
                                                                        />
                                                                      </div>
                                                                    </FieldExpansionToggle>
                                                                  </div>
                                                                  <div
                                                                    className="domain-row-main"
                                                                  >
                                                                    <Col
                                                                      bsClass="col"
                                                                      className="domain-row-base-fields domain-row-base-fields-position"
                                                                      componentClass="div"
                                                                      xs={6}
                                                                    >
                                                                      <div
                                                                        className="domain-row-base-fields domain-row-base-fields-position col-xs-6"
                                                                      >
                                                                        <div
                                                                          id="domainpropertiesrow-row-0-0"
                                                                        >
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={6}
                                                                          >
                                                                            <div
                                                                              className="col-xs-6"
                                                                            >
                                                                              <FormControl
                                                                                bsClass="form-control"
                                                                                componentClass="input"
                                                                                disabled={false}
                                                                                id="domainpropertiesrow-name-0-0"
                                                                                name="domainpropertiesrow-name"
                                                                                onChange={[Function]}
                                                                                type="text"
                                                                                value="testfield"
                                                                              >
                                                                                <input
                                                                                  className="form-control"
                                                                                  disabled={false}
                                                                                  id="domainpropertiesrow-name-0-0"
                                                                                  name="domainpropertiesrow-name"
                                                                                  onChange={[Function]}
                                                                                  type="text"
                                                                                  value="testfield"
                                                                                />
                                                                              </FormControl>
                                                                            </div>
                                                                          </Col>
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={4}
                                                                          >
                                                                            <div
                                                                              className="col-xs-4"
                                                                            >
                                                                              <FormControl
                                                                                bsClass="form-control"
                                                                                componentClass="select"
                                                                                disabled={false}
                                                                                id="domainpropertiesrow-type-0-0"
                                                                                name="domainpropertiesrow-type"
                                                                                onChange={[Function]}
                                                                                value="string"
                                                                              >
                                                                                <select
                                                                                  className="form-control"
                                                                                  disabled={false}
                                                                                  id="domainpropertiesrow-type-0-0"
                                                                                  name="domainpropertiesrow-type"
                                                                                  onChange={[Function]}
                                                                                  value="string"
                                                                                >
                                                                                  <option
                                                                                    key="boolean"
                                                                                    value="boolean"
                                                                                  >
                                                                                    Boolean
                                                                                  </option>
                                                                                  <option
                                                                                    key="dateTime"
                                                                                    value="dateTime"
                                                                                  >
                                                                                    Date Time
                                                                                  </option>
                                                                                  <option
                                                                                    key="double"
                                                                                    value="double"
                                                                                  >
                                                                                    Decimal (floating point)
                                                                                  </option>
                                                                                  <option
                                                                                    key="int"
                                                                                    value="int"
                                                                                  >
                                                                                    Integer
                                                                                  </option>
                                                                                  <option
                                                                                    key="multiLine"
                                                                                    value="multiLine"
                                                                                  >
                                                                                    Multi-Line Text
                                                                                  </option>
                                                                                  <option
                                                                                    key="sample"
                                                                                    value="sample"
                                                                                  >
                                                                                    Sample
                                                                                  </option>
                                                                                  <option
                                                                                    key="string"
                                                                                    value="string"
                                                                                  >
                                                                                    Text
                                                                                  </option>
                                                                                  <option
                                                                                    key="textChoice"
                                                                                    value="textChoice"
                                                                                  >
                                                                                    Text Choice
                                                                                  </option>
                                                                                  <option
                                                                                    key="users"
                                                                                    value="users"
                                                                                  >
                                                                                    User
                                                                                  </option>
                                                                                </select>
                                                                              </FormControl>
                                                                            </div>
                                                                          </Col>
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={2}
                                                                          >
                                                                            <div
                                                                              className="col-xs-2"
                                                                            >
                                                                              <div
                                                                                className="domain-field-checkbox-container"
                                                                              >
                                                                                <Checkbox
                                                                                  bsClass="checkbox"
                                                                                  checked={false}
                                                                                  className="domain-field-checkbox"
                                                                                  disabled={false}
                                                                                  id="domainpropertiesrow-required-0-0"
                                                                                  inline={false}
                                                                                  name="domainpropertiesrow-required"
                                                                                  onChange={[Function]}
                                                                                  title=""
                                                                                >
                                                                                  <div
                                                                                    className="domain-field-checkbox checkbox"
                                                                                  >
                                                                                    <label
                                                                                      title=""
                                                                                    >
                                                                                      <input
                                                                                        checked={false}
                                                                                        disabled={false}
                                                                                        id="domainpropertiesrow-required-0-0"
                                                                                        name="domainpropertiesrow-required"
                                                                                        onChange={[Function]}
                                                                                        type="checkbox"
                                                                                      />
                                                                                    </label>
                                                                                  </div>
                                                                                </Checkbox>
                                                                              </div>
                                                                            </div>
                                                                          </Col>
                                                                        </div>
                                                                      </div>
                                                                    </Col>
                                                                    <Col
                                                                      bsClass="col"
                                                                      className="domain-row-details-container"
                                                                      componentClass="div"
                                                                      xs={6}
                                                                    >
                                                                      <div
                                                                        className="domain-row-details-container col-xs-6"
                                                                      >
                                                                        <div
                                                                          className="domain-field-details"
                                                                          id="domainpropertiesrow-details-0-0"
                                                                        >
                                                                          New Field
                                                                        </div>
                                                                        <div
                                                                          className="domain-field-buttons"
                                                                        >
                                                                          <Memo()
                                                                            iconCls="domain-field-delete-icon"
                                                                            id="domainpropertiesrow-delete-0-0"
                                                                            onDelete={[Function]}
                                                                            title="Remove field"
                                                                          >
                                                                            <span
                                                                              className="field-icon"
                                                                              id="domainpropertiesrow-delete-0-0"
                                                                              onClick={[Function]}
                                                                              title="Remove field"
                                                                            >
                                                                              <span
                                                                                className="fa fa-times-circle domain-field-delete-icon"
                                                                              />
                                                                            </span>
                                                                          </Memo()>
                                                                        </div>
                                                                      </div>
                                                                    </Col>
                                                                  </div>
                                                                </div>
                                                              </Row>
                                                              <Collapse
                                                                appear={false}
                                                                dimension="height"
                                                                getDimensionValue={[Function]}
                                                                in={false}
                                                                mountOnEnter={false}
                                                                onExited={[Function]}
                                                                onExiting={[Function]}
                                                                timeout={300}
                                                                unmountOnExit={false}
                                                              >
                                                                <Transition
                                                                  appear={false}
                                                                  aria-expanded={null}
                                                                  enter={true}
                                                                  exit={true}
                                                                  in={false}
                                                                  mountOnEnter={false}
                                                                  onEnter={[Function]}
                                                                  onEntered={[Function]}
                                                                  onEntering={[Function]}
                                                                  onExit={[Function]}
                                                                  onExited={[Function]}
                                                                  onExiting={[Function]}
                                                                  timeout={300}
                                                                  unmountOnExit={false}
                                                                >
                                                                  <div
                                                                    aria-expanded={null}
                                                                    className="collapse"
                                                                  >
                                                                    <DomainRowExpandedOptions
                                                                      appPropertiesOnly={true}
                                                                      domainFormDisplayOptions={
                                                                        {
                                                                          "derivationDataScopeConfig": {
                                                                            "dataTypeFilter": [Function],
                                                                            "helpLinkNode": <Memo
                                                                              helpTopic="createSampleType#ali"
                                                                            />,
                                                                            "labelAll": "Separately editable for samples and aliquots",
                                                                            "labelChild": "Editable for aliquots only",
                                                                            "labelParent": "Editable for samples only (default)",
                                                                            "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                                                                            "sectionTitle": "Sample/Aliquot Options",
                                                                            "show": undefined,
                                                                          },
                                                                          "hideConditionalFormatting": true,
                                                                          "hideStudyPropertyTypes": true,
                                                                          "showScannableOption": true,
                                                                          "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
                                                                        }
                                                                      }
                                                                      domainIndex={0}
                                                                      field={
                                                                        Immutable.Record {
                                                                          "conceptURI": undefined,
                                                                          "conditionalFormats": Immutable.List [],
                                                                          "defaultScale": undefined,
                                                                          "defaultValueType": undefined,
                                                                          "defaultValue": undefined,
                                                                          "defaultDisplayValue": undefined,
                                                                          "description": undefined,
                                                                          "dimension": undefined,
                                                                          "excludeFromShifting": false,
                                                                          "format": undefined,
                                                                          "hidden": false,
                                                                          "importAliases": undefined,
                                                                          "label": undefined,
                                                                          "lookupContainer": undefined,
                                                                          "lookupQuery": undefined,
                                                                          "lookupSchema": undefined,
                                                                          "lookupValidator": undefined,
                                                                          "measure": undefined,
                                                                          "mvEnabled": false,
                                                                          "name": "testfield",
                                                                          "PHI": undefined,
                                                                          "propertyId": undefined,
                                                                          "propertyURI": undefined,
                                                                          "propertyValidators": Immutable.List [],
                                                                          "rangeValidators": Immutable.List [],
                                                                          "rangeURI": undefined,
                                                                          "regexValidators": Immutable.List [],
                                                                          "textChoiceValidator": undefined,
                                                                          "recommendedVariable": false,
                                                                          "required": false,
                                                                          "scale": 4000,
                                                                          "URL": undefined,
                                                                          "shownInDetailsView": true,
                                                                          "shownInInsertView": true,
                                                                          "shownInUpdateView": true,
                                                                          "visible": true,
                                                                          "dataType": Immutable.Record {
                                                                            "conceptURI": undefined,
                                                                            "display": "Text",
                                                                            "name": "string",
                                                                            "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                            "alternateRangeURI": "xsd:string",
                                                                            "shortDisplay": "String",
                                                                            "lookupSchema": undefined,
                                                                            "lookupQuery": undefined,
                                                                          },
                                                                          "lookupQueryValue": undefined,
                                                                          "lookupType": Immutable.Record {
                                                                            "conceptURI": undefined,
                                                                            "display": "Lookup",
                                                                            "name": "lookup",
                                                                            "rangeURI": undefined,
                                                                            "alternateRangeURI": undefined,
                                                                            "shortDisplay": undefined,
                                                                            "lookupSchema": undefined,
                                                                            "lookupQuery": undefined,
                                                                          },
                                                                          "original": {
                                                                            "conceptURI": undefined,
                                                                            "dataType": Immutable.Record {
                                                                              "conceptURI": undefined,
                                                                              "display": "Text",
                                                                              "name": "string",
                                                                              "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                              "alternateRangeURI": "xsd:string",
                                                                              "shortDisplay": "String",
                                                                              "lookupSchema": undefined,
                                                                              "lookupQuery": undefined,
                                                                            },
                                                                            "name": "testfield",
                                                                            "rangeURI": undefined,
                                                                          },
                                                                          "updatedField": false,
                                                                          "isPrimaryKey": false,
                                                                          "lockType": "NotLocked",
                                                                          "wrappedColumnName": undefined,
                                                                          "disablePhiLevel": false,
                                                                          "lockExistingField": false,
                                                                          "sourceOntology": undefined,
                                                                          "conceptSubtree": undefined,
                                                                          "conceptLabelColumn": undefined,
                                                                          "conceptImportColumn": undefined,
                                                                          "principalConceptCode": undefined,
                                                                          "derivationDataScope": undefined,
                                                                          "selected": false,
                                                                          "scannable": false,
                                                                        }
                                                                      }
                                                                      getDomainFields={[Function]}
                                                                      index={0}
                                                                      onChange={[Function]}
                                                                      onMultiChange={[Function]}
                                                                      showingModal={[Function]}
                                                                      successBsStyle="success"
                                                                    >
                                                                      <div
                                                                        className="domain-row-container"
                                                                      >
                                                                        <div
                                                                          className="domain-row-container-expand-spacer"
                                                                        />
                                                                        <div
                                                                          className="domain-row-container-expanded"
                                                                        >
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={12}
                                                                          >
                                                                            <div
                                                                              className="col-xs-12"
                                                                            >
                                                                              <TextFieldOptions
                                                                                appPropertiesOnly={true}
                                                                                domainIndex={0}
                                                                                index={0}
                                                                                label="Text Options"
                                                                                lockType="NotLocked"
                                                                                onChange={[Function]}
                                                                                scale={4000}
                                                                                scannable={false}
                                                                                showScannableOption={true}
                                                                              >
                                                                                <div>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <SectionHeading
                                                                                            title="Text Options"
                                                                                          >
                                                                                            <div
                                                                                              className="domain-field-section-heading"
                                                                                            >
                                                                                              Text Options
                                                                                            </div>
                                                                                          </SectionHeading>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <div
                                                                                            className="domain-field-label"
                                                                                          >
                                                                                            <DomainFieldLabel
                                                                                              helpTipBody={
                                                                                                <React.Fragment>
                                                                                                  <p>
                                                                                                    Sets the maximum character count for a text field.
                                                                                                  </p>
                                                                                                  <p>
                                                                                                    Anything over 4,000 characters will use the 'Unlimited' designation.
                                                                                                  </p>
                                                                                                </React.Fragment>
                                                                                              }
                                                                                              label="Maximum Text Length"
                                                                                            >
                                                                                              Maximum Text 
                                                                                              <span
                                                                                                className="domain-no-wrap"
                                                                                              >
                                                                                                Length
                                                                                                <Component
                                                                                                  id="tooltip"
                                                                                                  title="Maximum Text Length"
                                                                                                >
                                                                                                  <span
                                                                                                    className="label-help-target"
                                                                                                    onMouseOut={[Function]}
                                                                                                    onMouseOver={[Function]}
                                                                                                  >
                                                                                                    <span
                                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                                    />
                                                                                                    <Overlay
                                                                                                      animation={[Function]}
                                                                                                      placement="right"
                                                                                                      rootClose={false}
                                                                                                      show={false}
                                                                                                      target={
                                                                                                        <span
                                                                                                          class="label-help-target"
                                                                                                        >
                                                                                                          <span
                                                                                                            class="label-help-icon fa fa-question-circle"
                                                                                                          />
                                                                                                        </span>
                                                                                                      }
                                                                                                    >
                                                                                                      <Overlay
                                                                                                        placement="right"
                                                                                                        rootClose={false}
                                                                                                        show={false}
                                                                                                        target={
                                                                                                          <span
                                                                                                            class="label-help-target"
                                                                                                          >
                                                                                                            <span
                                                                                                              class="label-help-icon fa fa-question-circle"
                                                                                                            />
                                                                                                          </span>
                                                                                                        }
                                                                                                        transition={[Function]}
                                                                                                      />
                                                                                                    </Overlay>
                                                                                                  </span>
                                                                                                </Component>
                                                                                              </span>
                                                                                            </DomainFieldLabel>
                                                                                          </div>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        className="domain-text-options-col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="domain-text-options-col col-xs-12"
                                                                                        >
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            checked={false}
                                                                                            className="domain-text-options-radio1 domain-field-float-left"
                                                                                            componentClass="input"
                                                                                            disabled={false}
                                                                                            id="domainpropertiesrow-maxLength-0-0"
                                                                                            onChange={[Function]}
                                                                                            type="radio"
                                                                                            value="maxLength"
                                                                                          >
                                                                                            <input
                                                                                              checked={false}
                                                                                              className="domain-text-options-radio1 domain-field-float-left form-control"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-maxLength-0-0"
                                                                                              onChange={[Function]}
                                                                                              type="radio"
                                                                                              value="maxLength"
                                                                                            />
                                                                                          </FormControl>
                                                                                          <div>
                                                                                            Unlimited
                                                                                          </div>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            checked={true}
                                                                                            className="domain-text-options-radio2 domain-field-float-left"
                                                                                            componentClass="input"
                                                                                            id="domainpropertiesrow-customLength-0-0"
                                                                                            onChange={[Function]}
                                                                                            type="radio"
                                                                                            value="customLength"
                                                                                          >
                                                                                            <input
                                                                                              checked={true}
                                                                                              className="domain-text-options-radio2 domain-field-float-left form-control"
                                                                                              id="domainpropertiesrow-customLength-0-0"
                                                                                              onChange={[Function]}
                                                                                              type="radio"
                                                                                              value="customLength"
                                                                                            />
                                                                                          </FormControl>
                                                                                          <span
                                                                                            className="domain-text-options-length domain-field-float-left"
                                                                                          >
                                                                                            No longer than 
                                                                                            <FormControl
                                                                                              bsClass="form-control"
                                                                                              className="domain-text-length-field"
                                                                                              componentClass="input"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-scale-0-0"
                                                                                              name="domainpropertiesrow-scale"
                                                                                              onChange={[Function]}
                                                                                              type="number"
                                                                                              value={4000}
                                                                                            >
                                                                                              <input
                                                                                                className="domain-text-length-field form-control"
                                                                                                disabled={false}
                                                                                                id="domainpropertiesrow-scale-0-0"
                                                                                                name="domainpropertiesrow-scale"
                                                                                                onChange={[Function]}
                                                                                                type="number"
                                                                                                value={4000}
                                                                                              />
                                                                                            </FormControl>
                                                                                             characters
                                                                                          </span>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Memo()
                                                                                    appPropertiesOnly={true}
                                                                                    domainIndex={0}
                                                                                    index={0}
                                                                                    label="Text Options"
                                                                                    lockType="NotLocked"
                                                                                    onChange={[Function]}
                                                                                    scale={4000}
                                                                                    scannable={false}
                                                                                    showScannableOption={true}
                                                                                  >
                                                                                    <Row
                                                                                      bsClass="row"
                                                                                      componentClass="div"
                                                                                    >
                                                                                      <div
                                                                                        className="row"
                                                                                      >
                                                                                        <Col
                                                                                          bsClass="col"
                                                                                          componentClass="div"
                                                                                          xs={3}
                                                                                        >
                                                                                          <div
                                                                                            className="col-xs-3"
                                                                                          >
                                                                                            <div
                                                                                              className="domain-field-label"
                                                                                            >
                                                                                              <DomainFieldLabel
                                                                                                helpTipBody="When using the Find Samples dialog from the search bar and choosing the
                                        "Barcodes" option, fields
                                        that are designated as Barcode fields will be queried
                                        along with any UniqueId fields for this sample type."
                                                                                                label="Barcode Field"
                                                                                              >
                                                                                                Barcode 
                                                                                                <span
                                                                                                  className="domain-no-wrap"
                                                                                                >
                                                                                                  Field
                                                                                                  <Component
                                                                                                    id="tooltip"
                                                                                                    title="Barcode Field"
                                                                                                  >
                                                                                                    <span
                                                                                                      className="label-help-target"
                                                                                                      onMouseOut={[Function]}
                                                                                                      onMouseOver={[Function]}
                                                                                                    >
                                                                                                      <span
                                                                                                        className="label-help-icon fa fa-question-circle"
                                                                                                      />
                                                                                                      <Overlay
                                                                                                        animation={[Function]}
                                                                                                        placement="right"
                                                                                                        rootClose={false}
                                                                                                        show={false}
                                                                                                      >
                                                                                                        <Overlay
                                                                                                          placement="right"
                                                                                                          rootClose={false}
                                                                                                          show={false}
                                                                                                          transition={[Function]}
                                                                                                        />
                                                                                                      </Overlay>
                                                                                                    </span>
                                                                                                  </Component>
                                                                                                </span>
                                                                                              </DomainFieldLabel>
                                                                                            </div>
                                                                                          </div>
                                                                                        </Col>
                                                                                      </div>
                                                                                    </Row>
                                                                                    <Row
                                                                                      bsClass="row"
                                                                                      componentClass="div"
                                                                                    >
                                                                                      <div
                                                                                        className="row"
                                                                                      >
                                                                                        <Col
                                                                                          bsClass="col"
                                                                                          className="domain-text-options-col"
                                                                                          componentClass="div"
                                                                                          xs={12}
                                                                                        >
                                                                                          <div
                                                                                            className="domain-text-options-col col-xs-12"
                                                                                          >
                                                                                            <FormControl
                                                                                              bsClass="form-control"
                                                                                              checked={false}
                                                                                              className="domain-text-option-scannable"
                                                                                              componentClass="input"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-scannable-0-0"
                                                                                              name="domainpropertiesrow-scannable"
                                                                                              onChange={[Function]}
                                                                                              type="checkbox"
                                                                                            >
                                                                                              <input
                                                                                                checked={false}
                                                                                                className="domain-text-option-scannable form-control"
                                                                                                disabled={false}
                                                                                                id="domainpropertiesrow-scannable-0-0"
                                                                                                name="domainpropertiesrow-scannable"
                                                                                                onChange={[Function]}
                                                                                                type="checkbox"
                                                                                              />
                                                                                            </FormControl>
                                                                                            <span>
                                                                                              Search this field when scanning samples
                                                                                            </span>
                                                                                          </div>
                                                                                        </Col>
                                                                                      </div>
                                                                                    </Row>
                                                                                  </Memo()>
                                                                                </div>
                                                                              </TextFieldOptions>
                                                                            </div>
                                                                          </Col>
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={12}
                                                                          >
                                                                            <div
                                                                              className="col-xs-12"
                                                                            >
                                                                              <NameAndLinkingOptions
                                                                                appPropertiesOnly={true}
                                                                                domainFormDisplayOptions={
                                                                                  {
                                                                                    "derivationDataScopeConfig": {
                                                                                      "dataTypeFilter": [Function],
                                                                                      "helpLinkNode": <Memo
                                                                                        helpTopic="createSampleType#ali"
                                                                                      />,
                                                                                      "labelAll": "Separately editable for samples and aliquots",
                                                                                      "labelChild": "Editable for aliquots only",
                                                                                      "labelParent": "Editable for samples only (default)",
                                                                                      "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                                                                                      "sectionTitle": "Sample/Aliquot Options",
                                                                                      "show": undefined,
                                                                                    },
                                                                                    "hideConditionalFormatting": true,
                                                                                    "hideStudyPropertyTypes": true,
                                                                                    "showScannableOption": true,
                                                                                    "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
                                                                                  }
                                                                                }
                                                                                domainIndex={0}
                                                                                field={
                                                                                  Immutable.Record {
                                                                                    "conceptURI": undefined,
                                                                                    "conditionalFormats": Immutable.List [],
                                                                                    "defaultScale": undefined,
                                                                                    "defaultValueType": undefined,
                                                                                    "defaultValue": undefined,
                                                                                    "defaultDisplayValue": undefined,
                                                                                    "description": undefined,
                                                                                    "dimension": undefined,
                                                                                    "excludeFromShifting": false,
                                                                                    "format": undefined,
                                                                                    "hidden": false,
                                                                                    "importAliases": undefined,
                                                                                    "label": undefined,
                                                                                    "lookupContainer": undefined,
                                                                                    "lookupQuery": undefined,
                                                                                    "lookupSchema": undefined,
                                                                                    "lookupValidator": undefined,
                                                                                    "measure": undefined,
                                                                                    "mvEnabled": false,
                                                                                    "name": "testfield",
                                                                                    "PHI": undefined,
                                                                                    "propertyId": undefined,
                                                                                    "propertyURI": undefined,
                                                                                    "propertyValidators": Immutable.List [],
                                                                                    "rangeValidators": Immutable.List [],
                                                                                    "rangeURI": undefined,
                                                                                    "regexValidators": Immutable.List [],
                                                                                    "textChoiceValidator": undefined,
                                                                                    "recommendedVariable": false,
                                                                                    "required": false,
                                                                                    "scale": 4000,
                                                                                    "URL": undefined,
                                                                                    "shownInDetailsView": true,
                                                                                    "shownInInsertView": true,
                                                                                    "shownInUpdateView": true,
                                                                                    "visible": true,
                                                                                    "dataType": Immutable.Record {
                                                                                      "conceptURI": undefined,
                                                                                      "display": "Text",
                                                                                      "name": "string",
                                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                                      "alternateRangeURI": "xsd:string",
                                                                                      "shortDisplay": "String",
                                                                                      "lookupSchema": undefined,
                                                                                      "lookupQuery": undefined,
                                                                                    },
                                                                                    "lookupQueryValue": undefined,
                                                                                    "lookupType": Immutable.Record {
                                                                                      "conceptURI": undefined,
                                                                                      "display": "Lookup",
                                                                                      "name": "lookup",
                                                                                      "rangeURI": undefined,
                                                                                      "alternateRangeURI": undefined,
                                                                                      "shortDisplay": undefined,
                                                                                      "lookupSchema": undefined,
                                                                                      "lookupQuery": undefined,
                                                                                    },
                                                                                    "original": {
                                                                                      "conceptURI": undefined,
                                                                                      "dataType": Immutable.Record {
                                                                                        "conceptURI": undefined,
                                                                                        "display": "Text",
                                                                                        "name": "string",
                                                                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                                        "alternateRangeURI": "xsd:string",
                                                                                        "shortDisplay": "String",
                                                                                        "lookupSchema": undefined,
                                                                                        "lookupQuery": undefined,
                                                                                      },
                                                                                      "name": "testfield",
                                                                                      "rangeURI": undefined,
                                                                                    },
                                                                                    "updatedField": false,
                                                                                    "isPrimaryKey": false,
                                                                                    "lockType": "NotLocked",
                                                                                    "wrappedColumnName": undefined,
                                                                                    "disablePhiLevel": false,
                                                                                    "lockExistingField": false,
                                                                                    "sourceOntology": undefined,
                                                                                    "conceptSubtree": undefined,
                                                                                    "conceptLabelColumn": undefined,
                                                                                    "conceptImportColumn": undefined,
                                                                                    "principalConceptCode": undefined,
                                                                                    "derivationDataScope": undefined,
                                                                                    "selected": false,
                                                                                    "scannable": false,
                                                                                  }
                                                                                }
                                                                                index={0}
                                                                                onChange={[Function]}
                                                                              >
                                                                                <div>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <SectionHeading
                                                                                            cls="domain-field-section-hdr"
                                                                                            title="Name and Linking Options"
                                                                                          >
                                                                                            <div
                                                                                              className="domain-field-section-heading domain-field-section-hdr"
                                                                                            >
                                                                                              Name and Linking Options
                                                                                            </div>
                                                                                          </SectionHeading>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={5}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-5"
                                                                                        >
                                                                                          <div
                                                                                            className="domain-field-label"
                                                                                          >
                                                                                            Description
                                                                                          </div>
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            componentClass="textarea"
                                                                                            disabled={false}
                                                                                            id="domainpropertiesrow-description-0-0"
                                                                                            name="domainpropertiesrow-description"
                                                                                            onChange={[Function]}
                                                                                            rows={4}
                                                                                            value=""
                                                                                          >
                                                                                            <textarea
                                                                                              className="form-control"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-description-0-0"
                                                                                              name="domainpropertiesrow-description"
                                                                                              onChange={[Function]}
                                                                                              rows={4}
                                                                                              value=""
                                                                                            />
                                                                                          </FormControl>
                                                                                        </div>
                                                                                      </Col>
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={3}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-3"
                                                                                        >
                                                                                          <div
                                                                                            className="domain-field-label"
                                                                                          >
                                                                                            Label
                                                                                          </div>
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            componentClass="input"
                                                                                            disabled={false}
                                                                                            id="domainpropertiesrow-label-0-0"
                                                                                            name="domainpropertiesrow-label"
                                                                                            onChange={[Function]}
                                                                                            type="text"
                                                                                            value=""
                                                                                          >
                                                                                            <input
                                                                                              className="form-control"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-label-0-0"
                                                                                              name="domainpropertiesrow-label"
                                                                                              onChange={[Function]}
                                                                                              type="text"
                                                                                              value=""
                                                                                            />
                                                                                          </FormControl>
                                                                                          <div
                                                                                            className="domain-field-label"
                                                                                          >
                                                                                            <DomainFieldLabel
                                                                                              helpTipBody={
                                                                                                <React.Fragment>
                                                                                                  Define alternate field names to be used when importing from a file.
                                                                                                  <br />
                                                                                                  <br />
                                                                                                  Multiple aliases may be separated by spaces or commas. To define an alias that contains spaces, use double-quotes (") around it.
                                                                                                </React.Fragment>
                                                                                              }
                                                                                              label="Import Aliases"
                                                                                            >
                                                                                              Import 
                                                                                              <span
                                                                                                className="domain-no-wrap"
                                                                                              >
                                                                                                Aliases
                                                                                                <Component
                                                                                                  id="tooltip"
                                                                                                  title="Import Aliases"
                                                                                                >
                                                                                                  <span
                                                                                                    className="label-help-target"
                                                                                                    onMouseOut={[Function]}
                                                                                                    onMouseOver={[Function]}
                                                                                                  >
                                                                                                    <span
                                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                                    />
                                                                                                    <Overlay
                                                                                                      animation={[Function]}
                                                                                                      placement="right"
                                                                                                      rootClose={false}
                                                                                                      show={false}
                                                                                                    >
                                                                                                      <Overlay
                                                                                                        placement="right"
                                                                                                        rootClose={false}
                                                                                                        show={false}
                                                                                                        transition={[Function]}
                                                                                                      />
                                                                                                    </Overlay>
                                                                                                  </span>
                                                                                                </Component>
                                                                                              </span>
                                                                                            </DomainFieldLabel>
                                                                                          </div>
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            componentClass="input"
                                                                                            disabled={false}
                                                                                            id="domainpropertiesrow-importAliases-0-0"
                                                                                            name="domainpropertiesrow-importAliases"
                                                                                            onChange={[Function]}
                                                                                            type="text"
                                                                                            value=""
                                                                                          >
                                                                                            <input
                                                                                              className="form-control"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-importAliases-0-0"
                                                                                              name="domainpropertiesrow-importAliases"
                                                                                              onChange={[Function]}
                                                                                              type="text"
                                                                                              value=""
                                                                                            />
                                                                                          </FormControl>
                                                                                        </div>
                                                                                      </Col>
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={4}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-4"
                                                                                        >
                                                                                          <div
                                                                                            className="domain-field-label"
                                                                                          >
                                                                                            <DomainFieldLabel
                                                                                              helpTipBody={
                                                                                                <React.Fragment>
                                                                                                  Use this to change the display of the field value within a data grid into a link. Multiple formats are supported, which allows ways to easily substitute and link to other locations in LabKey.
                                                                                                  <br />
                                                                                                  <br />
                                                                                                  Learn more about using 
                                                                                                  <HelpLink
                                                                                                    topic="urlEncoding"
                                                                                                  >
                                                                                                    URL Formatting Options
                                                                                                  </HelpLink>
                                                                                                  .
                                                                                                </React.Fragment>
                                                                                              }
                                                                                              label="URL"
                                                                                            >
                                                                                              <span
                                                                                                className="domain-no-wrap"
                                                                                              >
                                                                                                URL
                                                                                                <Component
                                                                                                  id="tooltip"
                                                                                                  title="URL"
                                                                                                >
                                                                                                  <span
                                                                                                    className="label-help-target"
                                                                                                    onMouseOut={[Function]}
                                                                                                    onMouseOver={[Function]}
                                                                                                  >
                                                                                                    <span
                                                                                                      className="label-help-icon fa fa-question-circle"
                                                                                                    />
                                                                                                    <Overlay
                                                                                                      animation={[Function]}
                                                                                                      placement="right"
                                                                                                      rootClose={false}
                                                                                                      show={false}
                                                                                                    >
                                                                                                      <Overlay
                                                                                                        placement="right"
                                                                                                        rootClose={false}
                                                                                                        show={false}
                                                                                                        transition={[Function]}
                                                                                                      />
                                                                                                    </Overlay>
                                                                                                  </span>
                                                                                                </Component>
                                                                                              </span>
                                                                                            </DomainFieldLabel>
                                                                                          </div>
                                                                                          <FormControl
                                                                                            bsClass="form-control"
                                                                                            componentClass="input"
                                                                                            disabled={false}
                                                                                            id="domainpropertiesrow-URL-0-0"
                                                                                            name="domainpropertiesrow-URL"
                                                                                            onChange={[Function]}
                                                                                            type="text"
                                                                                            value=""
                                                                                          >
                                                                                            <input
                                                                                              className="form-control"
                                                                                              disabled={false}
                                                                                              id="domainpropertiesrow-URL-0-0"
                                                                                              name="domainpropertiesrow-URL"
                                                                                              onChange={[Function]}
                                                                                              type="text"
                                                                                              value=""
                                                                                            />
                                                                                          </FormControl>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                </div>
                                                                              </NameAndLinkingOptions>
                                                                            </div>
                                                                          </Col>
                                                                          <Col
                                                                            bsClass="col"
                                                                            componentClass="div"
                                                                            xs={12}
                                                                          >
                                                                            <div
                                                                              className="col-xs-12"
                                                                            >
                                                                              <ConditionalFormattingAndValidation
                                                                                domainFormDisplayOptions={
                                                                                  {
                                                                                    "derivationDataScopeConfig": {
                                                                                      "dataTypeFilter": [Function],
                                                                                      "helpLinkNode": <Memo
                                                                                        helpTopic="createSampleType#ali"
                                                                                      />,
                                                                                      "labelAll": "Separately editable for samples and aliquots",
                                                                                      "labelChild": "Editable for aliquots only",
                                                                                      "labelParent": "Editable for samples only (default)",
                                                                                      "scopeChangeWarning": "Updating a 'Samples Only' field to be 'Samples and Aliquots' will blank out the field values for all aliquots. This action cannot be undone. ",
                                                                                      "sectionTitle": "Sample/Aliquot Options",
                                                                                      "show": undefined,
                                                                                    },
                                                                                    "hideConditionalFormatting": true,
                                                                                    "hideStudyPropertyTypes": true,
                                                                                    "showScannableOption": true,
                                                                                    "textChoiceLockedSqlFragment": "MAX(CASE WHEN SampleState.StatusType = 'Locked' THEN 1 ELSE 0 END)",
                                                                                  }
                                                                                }
                                                                                domainIndex={0}
                                                                                field={
                                                                                  Immutable.Record {
                                                                                    "conceptURI": undefined,
                                                                                    "conditionalFormats": Immutable.List [],
                                                                                    "defaultScale": undefined,
                                                                                    "defaultValueType": undefined,
                                                                                    "defaultValue": undefined,
                                                                                    "defaultDisplayValue": undefined,
                                                                                    "description": undefined,
                                                                                    "dimension": undefined,
                                                                                    "excludeFromShifting": false,
                                                                                    "format": undefined,
                                                                                    "hidden": false,
                                                                                    "importAliases": undefined,
                                                                                    "label": undefined,
                                                                                    "lookupContainer": undefined,
                                                                                    "lookupQuery": undefined,
                                                                                    "lookupSchema": undefined,
                                                                                    "lookupValidator": undefined,
                                                                                    "measure": undefined,
                                                                                    "mvEnabled": false,
                                                                                    "name": "testfield",
                                                                                    "PHI": undefined,
                                                                                    "propertyId": undefined,
                                                                                    "propertyURI": undefined,
                                                                                    "propertyValidators": Immutable.List [],
                                                                                    "rangeValidators": Immutable.List [],
                                                                                    "rangeURI": undefined,
                                                                                    "regexValidators": Immutable.List [],
                                                                                    "textChoiceValidator": undefined,
                                                                                    "recommendedVariable": false,
                                                                                    "required": false,
                                                                                    "scale": 4000,
                                                                                    "URL": undefined,
                                                                                    "shownInDetailsView": true,
                                                                                    "shownInInsertView": true,
                                                                                    "shownInUpdateView": true,
                                                                                    "visible": true,
                                                                                    "dataType": Immutable.Record {
                                                                                      "conceptURI": undefined,
                                                                                      "display": "Text",
                                                                                      "name": "string",
                                                                                      "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                                      "alternateRangeURI": "xsd:string",
                                                                                      "shortDisplay": "String",
                                                                                      "lookupSchema": undefined,
                                                                                      "lookupQuery": undefined,
                                                                                    },
                                                                                    "lookupQueryValue": undefined,
                                                                                    "lookupType": Immutable.Record {
                                                                                      "conceptURI": undefined,
                                                                                      "display": "Lookup",
                                                                                      "name": "lookup",
                                                                                      "rangeURI": undefined,
                                                                                      "alternateRangeURI": undefined,
                                                                                      "shortDisplay": undefined,
                                                                                      "lookupSchema": undefined,
                                                                                      "lookupQuery": undefined,
                                                                                    },
                                                                                    "original": {
                                                                                      "conceptURI": undefined,
                                                                                      "dataType": Immutable.Record {
                                                                                        "conceptURI": undefined,
                                                                                        "display": "Text",
                                                                                        "name": "string",
                                                                                        "rangeURI": "http://www.w3.org/2001/XMLSchema#string",
                                                                                        "alternateRangeURI": "xsd:string",
                                                                                        "shortDisplay": "String",
                                                                                        "lookupSchema": undefined,
                                                                                        "lookupQuery": undefined,
                                                                                      },
                                                                                      "name": "testfield",
                                                                                      "rangeURI": undefined,
                                                                                    },
                                                                                    "updatedField": false,
                                                                                    "isPrimaryKey": false,
                                                                                    "lockType": "NotLocked",
                                                                                    "wrappedColumnName": undefined,
                                                                                    "disablePhiLevel": false,
                                                                                    "lockExistingField": false,
                                                                                    "sourceOntology": undefined,
                                                                                    "conceptSubtree": undefined,
                                                                                    "conceptLabelColumn": undefined,
                                                                                    "conceptImportColumn": undefined,
                                                                                    "principalConceptCode": undefined,
                                                                                    "derivationDataScope": undefined,
                                                                                    "selected": false,
                                                                                    "scannable": false,
                                                                                  }
                                                                                }
                                                                                index={0}
                                                                                onChange={[Function]}
                                                                                showingModal={[Function]}
                                                                                successBsStyle="success"
                                                                              >
                                                                                <div>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <SectionHeading
                                                                                            cls="domain-field-section-hdr"
                                                                                            title="Validation Options"
                                                                                          >
                                                                                            <div
                                                                                              className="domain-field-section-heading domain-field-section-hdr"
                                                                                            >
                                                                                              Validation Options
                                                                                            </div>
                                                                                          </SectionHeading>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                  <Row
                                                                                    bsClass="row"
                                                                                    componentClass="div"
                                                                                  >
                                                                                    <div
                                                                                      className="row"
                                                                                    >
                                                                                      <Col
                                                                                        bsClass="col"
                                                                                        componentClass="div"
                                                                                        xs={12}
                                                                                      >
                                                                                        <div
                                                                                          className="col-xs-12"
                                                                                        >
                                                                                          <div
                                                                                            className="domain-validation-group"
                                                                                          >
                                                                                            <div
                                                                                              className="domain-field-label domain-no-wrap"
                                                                                            >
                                                                                              <DomainFieldLabel
                                                                                                helpTipBody={<RegexValidatorHelpText />}
                                                                                                label="Create Regular Expression Validator"
                                                                                              >
                                                                                                Create Regular Expression 
                                                                                                <span
                                                                                                  className="domain-no-wrap"
                                                                                                >
                                                                                                  Validator
                                                                                                  <Component
                                                                                                    id="tooltip"
                                                                                                    title="Create Regular Expression Validator"
                                                                                                  >
                                                                                                    <span
                                                                                                      className="label-help-target"
                                                                                                      onMouseOut={[Function]}
                                                                                                      onMouseOver={[Function]}
                                                                                                    >
                                                                                                      <span
                                                                                                        className="label-help-icon fa fa-question-circle"
                                                                                                      />
                                                                                                      <Overlay
                                                                                                        animation={[Function]}
                                                                                                        placement="right"
                                                                                                        rootClose={false}
                                                                                                        show={false}
                                                                                                      >
                                                                                                        <Overlay
                                                                                                          placement="right"
                                                                                                          rootClose={false}
                                                                                                          show={false}
                                                                                                          transition={[Function]}
                                                                                                        />
                                                                                                      </Overlay>
                                                                                                    </span>
                                                                                                  </Component>
                                                                                                </span>
                                                                                              </DomainFieldLabel>
                                                                                            </div>
                                                                                            <div>
                                                                                              <Button
                                                                                                active={false}
                                                                                                block={false}
                                                                                                bsClass="btn"
                                                                                                bsStyle="default"
                                                                                                className="domain-validation-button"
                                                                                                disabled={false}
                                                                                                id="domainpropertiesrow-regexValidator-0-0"
                                                                                                name="domainpropertiesrow-regexValidator"
                                                                                                onClick={[Function]}
                                                                                              >
                                                                                                <button
                                                                                                  className="domain-validation-button btn btn-default"
                                                                                                  disabled={false}
                                                                                                  id="domainpropertiesrow-regexValidator-0-0"
                                                                                                  name="domainpropertiesrow-regexValidator"
                                                                                                  onClick={[Function]}
                                                                                                  type="button"
                                                                                                >
                                                                                                  Add Regex
                                                                                                </button>
                                                                                              </Button>
                                                                                              <span
                                                                                                className="domain-text-label"
                                                                                              >
                                                                                                None Set
                                                                                              </span>
                                                                                            </div>
                                                                                          </div>
                                                                                        </div>
                                                                                      </Col>
                                                                                    </div>
                                                                                  </Row>
                                                                                </div>
                                                                              </ConditionalFormattingAndValidation>
                                                                            </div>
                                                                          </Col>
                                                                        </div>
                                                                      </div>
                                                                    </DomainRowExpandedOptions>
                                                                  </div>
                                                                </Transition>
                                                              </Collapse>
                                                            </div>
                                                          </Draggable>
                                                        </Connect(Draggable)>
                                                      </PrivateDraggable>
                                                    </PublicDraggable>
                                                  </DomainRow>
                                                  <AnimateInOut
                                                    on={null}
                                                    shouldAnimate={false}
                                                  />
                                                </form>
                                              </Form>
                                            </div>
                                          </Droppable>
                                        </Connect(Droppable)>
                                      </Provider>
                                    </App>
                                  </ErrorBoundary>
                                </DragDropContext>
                                <Row
                                  bsClass="row"
                                  className="domain-add-field-row"
                                  componentClass="div"
                                >
                                  <div
                                    className="domain-add-field-row row"
                                  >
                                    <Col
                                      bsClass="col"
                                      componentClass="div"
                                      xs={12}
                                    >
                                      <div
                                        className="col-xs-12"
                                      >
                                        <AddEntityButton
                                          buttonClass="domain-form-add-btn"
                                          containerClass="pull-right"
                                          entity="Field"
                                          onClick={[Function]}
                                        >
                                          <ActionButton
                                            buttonClass="domain-form-add-btn"
                                            containerClass="pull-right"
                                            helperTitle="More Info"
                                            onClick={[Function]}
                                          >
                                            <div
                                              className="pull-right"
                                            >
                                              <div
                                                className="domain-form-add-btn"
                                              >
                                                <span
                                                  className="container--action-button btn btn-default"
                                                  onClick={[Function]}
                                                >
                                                  <i
                                                    className="fa fa-plus-circle container--addition-icon"
                                                  />
                                                   Add 
                                                  Field
                                                </span>
                                              </div>
                                            </div>
                                          </ActionButton>
                                        </AddEntityButton>
                                      </div>
                                    </Col>
                                  </div>
                                </Row>
                              </div>
                            </div>
                          </Transition>
                        </Collapse>
                      </PanelCollapse>
                    </PanelBody>
                  </div>
                </Panel>
              </Uncontrolled(Panel)>
            </ForwardRef>
          </DomainFormImpl>
        </LookupProvider>
      </DomainForm>
      <NameExpressionValidationModal
        onConfirm={[Function]}
        onHide={[Function]}
        show={false}
      />
      <div
        className="domain-form-panel domain-designer-buttons"
      >
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="default"
          disabled={false}
          onClick={[MockFunction]}
        >
          <button
            className="btn btn-default"
            disabled={false}
            onClick={[MockFunction]}
            type="button"
          >
            Cancel
          </button>
        </Button>
        <Button
          active={false}
          block={false}
          bsClass="btn"
          bsStyle="success"
          className="pull-right"
          disabled={false}
          onClick={[Function]}
        >
          <button
            className="pull-right btn btn-success"
            disabled={false}
            onClick={[Function]}
            type="button"
          >
            Save
          </button>
        </Button>
      </div>
    </BaseDomainDesigner>
  </SampleTypeDesignerImpl>
</ComponentWithBaseDomainDesigner>
`;
