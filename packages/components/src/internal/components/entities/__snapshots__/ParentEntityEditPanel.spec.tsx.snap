// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ParentEntityEditPanel> editing, no data 1`] = `
<ParentEntityEditPanel
  canUpdate={false}
  cancelText="Cancel"
  childData={Object {}}
  childName="Test"
  childNounSingular="Testing"
  childQueryInfo={
    Immutable.Record {
      "columns": Immutable.OrderedMap {},
      "description": undefined,
      "importTemplates": Immutable.List [],
      "iconURL": "default",
      "lastAction": undefined,
      "name": undefined,
      "pkCols": Immutable.List [],
      "schemaName": "samples",
      "status": 2,
      "title": undefined,
      "titleColumn": undefined,
      "views": Immutable.Map {},
      "importUrlDisabled": undefined,
      "importUrl": undefined,
      "insertUrlDisabled": undefined,
      "insertUrl": undefined,
      "appEditableTable": false,
      "isLoading": false,
      "isMedia": false,
      "queryLabel": undefined,
      "schemaLabel": undefined,
      "schemaQuery": undefined,
      "showInsertNewButton": true,
      "singular": undefined,
      "plural": undefined,
    }
  }
  parentDataTypes={
    Array [
      Object {
        "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
        "deleteHelpLinkTopic": "dataClass",
        "dependencyText": "derived sample dependencies",
        "descriptionPlural": "parent types",
        "descriptionSingular": "parent type",
        "importFileAction": "importData",
        "inputColumnName": "Inputs/Data/First",
        "inputTypeValueField": "rowId",
        "insertColumnNamePrefix": "DataInputs/",
        "instanceSchemaName": "exp.data",
        "listingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "Data",
          "viewName": undefined,
        },
        "nounAsParentSingular": "Parent",
        "nounPlural": "data",
        "nounSingular": "data",
        "typeListingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "DataClasses",
          "viewName": undefined,
        },
        "typeNounSingular": "Data Type",
        "uniqueFieldKey": "Name",
      },
    ]
  }
  submitText="Save"
  title="Test 123"
>
  <ForwardRef
    bsStyle="info"
  >
    <Uncontrolled(Panel)
      bsStyle="info"
      innerRef={null}
    >
      <Panel
        bsClass="panel"
        bsStyle="info"
        onToggle={[Function]}
      >
        <div
          className="panel panel-info"
        >
          <PanelHeading
            bsClass="panel"
            componentClass="div"
          >
            <div
              className="panel-heading"
            >
              <DetailPanelHeader
                canUpdate={false}
                editing={true}
                isEditable={false}
                onClickFn={[Function]}
                title="Test 123"
                useEditIcon={true}
              >
                <div
                  className="detail__edit--heading"
                >
                  Editing 
                  Test 123
                </div>
              </DetailPanelHeader>
            </div>
          </PanelHeading>
          <PanelBody
            bsClass="panel"
            collapsible={false}
          >
            <div
              className="panel-body"
            >
              <Alert
                bsStyle="danger"
              />
              <div
                className="bottom-spacing"
              >
                <b>
                  Data
                   for 
                  Test
                </b>
              </div>
              <div>
                <hr />
                <Memo()
                  childNounSingular="Testing"
                  editing={true}
                  index={0}
                  onChangeParentType={[Function]}
                  onChangeParentValue={[Function]}
                  onInitialParentValue={[Function]}
                  parentDataType={
                    Object {
                      "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                      "deleteHelpLinkTopic": "dataClass",
                      "dependencyText": "derived sample dependencies",
                      "descriptionPlural": "parent types",
                      "descriptionSingular": "parent type",
                      "importFileAction": "importData",
                      "inputColumnName": "Inputs/Data/First",
                      "inputTypeValueField": "rowId",
                      "insertColumnNamePrefix": "DataInputs/",
                      "instanceSchemaName": "exp.data",
                      "listingSchemaQuery": Immutable.Record {
                        "schemaName": "exp",
                        "queryName": "Data",
                        "viewName": undefined,
                      },
                      "nounAsParentSingular": "Parent",
                      "nounPlural": "data",
                      "nounSingular": "data",
                      "typeListingSchemaQuery": Immutable.Record {
                        "schemaName": "exp",
                        "queryName": "DataClasses",
                        "viewName": undefined,
                      },
                      "typeNounSingular": "Data Type",
                      "uniqueFieldKey": "Name",
                    }
                  }
                >
                  <withRouter(ComponentWithQueryModels)
                    childNounSingular="Testing"
                    editing={true}
                    index={0}
                    onChangeParentType={[Function]}
                    onChangeParentValue={[Function]}
                    onInitialParentValue={[Function]}
                    onTypeChange={[Function]}
                    onValueChange={[Function]}
                    parentDataType={
                      Object {
                        "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                        "deleteHelpLinkTopic": "dataClass",
                        "dependencyText": "derived sample dependencies",
                        "descriptionPlural": "parent types",
                        "descriptionSingular": "parent type",
                        "importFileAction": "importData",
                        "inputColumnName": "Inputs/Data/First",
                        "inputTypeValueField": "rowId",
                        "insertColumnNamePrefix": "DataInputs/",
                        "instanceSchemaName": "exp.data",
                        "listingSchemaQuery": Immutable.Record {
                          "schemaName": "exp",
                          "queryName": "Data",
                          "viewName": undefined,
                        },
                        "nounAsParentSingular": "Parent",
                        "nounPlural": "data",
                        "nounSingular": "data",
                        "typeListingSchemaQuery": Immutable.Record {
                          "schemaName": "exp",
                          "queryName": "DataClasses",
                          "viewName": undefined,
                        },
                        "typeNounSingular": "Data Type",
                        "uniqueFieldKey": "Name",
                      }
                    }
                    queryConfigs={Object {}}
                  >
                    <ComponentWithQueryModels
                      autoLoad={false}
                      childNounSingular="Testing"
                      editing={true}
                      index={0}
                      modelLoader={
                        Object {
                          "clearSelections": [Function],
                          "loadCharts": [Function],
                          "loadQueryInfo": [Function],
                          "loadRows": [Function],
                          "loadSelections": [Function],
                          "replaceSelections": [Function],
                          "selectAllRows": [Function],
                          "setSelections": [Function],
                        }
                      }
                      onChangeParentType={[Function]}
                      onChangeParentValue={[Function]}
                      onInitialParentValue={[Function]}
                      onTypeChange={[Function]}
                      onValueChange={[Function]}
                      parentDataType={
                        Object {
                          "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                          "deleteHelpLinkTopic": "dataClass",
                          "dependencyText": "derived sample dependencies",
                          "descriptionPlural": "parent types",
                          "descriptionSingular": "parent type",
                          "importFileAction": "importData",
                          "inputColumnName": "Inputs/Data/First",
                          "inputTypeValueField": "rowId",
                          "insertColumnNamePrefix": "DataInputs/",
                          "instanceSchemaName": "exp.data",
                          "listingSchemaQuery": Immutable.Record {
                            "schemaName": "exp",
                            "queryName": "Data",
                            "viewName": undefined,
                          },
                          "nounAsParentSingular": "Parent",
                          "nounPlural": "data",
                          "nounSingular": "data",
                          "typeListingSchemaQuery": Immutable.Record {
                            "schemaName": "exp",
                            "queryName": "DataClasses",
                            "viewName": undefined,
                          },
                          "typeNounSingular": "Data Type",
                          "uniqueFieldKey": "Name",
                        }
                      }
                      queryConfigs={Object {}}
                    >
                      <SingleParentEntity
                        actions={
                          Object {
                            "addModel": [Function],
                            "clearSelections": [Function],
                            "loadAllModels": [Function],
                            "loadCharts": [Function],
                            "loadFirstPage": [Function],
                            "loadLastPage": [Function],
                            "loadModel": [Function],
                            "loadNextPage": [Function],
                            "loadPreviousPage": [Function],
                            "loadRows": [Function],
                            "replaceSelections": [Function],
                            "selectAllRows": [Function],
                            "selectPage": [Function],
                            "selectReport": [Function],
                            "selectRow": [Function],
                            "setFilters": [Function],
                            "setMaxRows": [Function],
                            "setOffset": [Function],
                            "setSchemaQuery": [Function],
                            "setSelections": [Function],
                            "setSorts": [Function],
                            "setView": [Function],
                          }
                        }
                        autoLoad={false}
                        childNounSingular="Testing"
                        editing={true}
                        index={0}
                        onChangeParentType={[Function]}
                        onChangeParentValue={[Function]}
                        onInitialParentValue={[Function]}
                        onTypeChange={[Function]}
                        onValueChange={[Function]}
                        parentDataType={
                          Object {
                            "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                            "deleteHelpLinkTopic": "dataClass",
                            "dependencyText": "derived sample dependencies",
                            "descriptionPlural": "parent types",
                            "descriptionSingular": "parent type",
                            "importFileAction": "importData",
                            "inputColumnName": "Inputs/Data/First",
                            "inputTypeValueField": "rowId",
                            "insertColumnNamePrefix": "DataInputs/",
                            "instanceSchemaName": "exp.data",
                            "listingSchemaQuery": Immutable.Record {
                              "schemaName": "exp",
                              "queryName": "Data",
                              "viewName": undefined,
                            },
                            "nounAsParentSingular": "Parent",
                            "nounPlural": "data",
                            "nounSingular": "data",
                            "typeListingSchemaQuery": Immutable.Record {
                              "schemaName": "exp",
                              "queryName": "DataClasses",
                              "viewName": undefined,
                            },
                            "typeNounSingular": "Data Type",
                            "uniqueFieldKey": "Name",
                          }
                        }
                        queryModels={Object {}}
                      >
                        <div
                          className="bottom-spacing"
                          key="parent-selections-0"
                        >
                          <div
                            className="form-group row"
                          >
                            <SelectInput
                              containerClass=""
                              formsy={false}
                              inputClass="col-sm-6"
                              label="Data Type 1"
                              labelClass="col-sm-3 col-xs-12 entity-insert--parent-label entity-insert--type-select"
                              name="entityType0"
                              onChange={[Function]}
                              placeholder="Select a Data Type ..."
                              required={true}
                            >
                              <SelectInputImpl
                                allowCreate={false}
                                allowDisable={false}
                                autoValue={true}
                                clearCacheOnChange={true}
                                clearable={true}
                                containerClass=""
                                defaultOptions={true}
                                delimiter=","
                                formsy={false}
                                initiallyDisabled={false}
                                inputClass="col-sm-6"
                                label="Data Type 1"
                                labelClass="col-sm-3 col-xs-12 entity-insert--parent-label entity-insert--type-select"
                                name="entityType0"
                                onChange={[Function]}
                                placeholder="Select a Data Type ..."
                                required={true}
                                saveOnBlur={false}
                                valueKey="value"
                              >
                                <div
                                  className="select-input-container "
                                >
                                  <FieldLabel
                                    fieldName="entityType0"
                                    id="selectinput-0"
                                    isDisabled={false}
                                    labelOverlayProps={
                                      Object {
                                        "addLabelAsterisk": undefined,
                                        "description": "Select a Data Type 1",
                                        "inputId": "entityType0",
                                        "isFormsy": false,
                                        "label": "Data Type 1",
                                        "labelClass": "col-sm-3 col-xs-12 entity-insert--parent-label entity-insert--type-select",
                                        "required": true,
                                      }
                                    }
                                    showLabel={true}
                                    showToggle={false}
                                    toggleProps={
                                      Object {
                                        "onClick": [Function],
                                      }
                                    }
                                    withLabelOverlay={true}
                                  >
                                    <LabelOverlay
                                      addLabelAsterisk={false}
                                      canMouseOverTooltip={false}
                                      description="Select a Data Type 1"
                                      inputId="entityType0"
                                      isFormsy={false}
                                      label="Data Type 1"
                                      labelClass="col-sm-3 col-xs-12 entity-insert--parent-label entity-insert--type-select"
                                      required={true}
                                    >
                                      <label
                                        className="col-sm-3 col-xs-12 entity-insert--parent-label entity-insert--type-select text__truncate-and-wrap"
                                        htmlFor="entityType0"
                                      >
                                        <span>
                                          Data Type 1
                                        </span>
                                         
                                        <OverlayTrigger
                                          defaultOverlayShown={false}
                                          overlay={
                                            <Popover
                                              bsClass="popover"
                                              id="labkey-app-1"
                                              placement="right"
                                              title="Data Type 1"
                                            >
                                              <React.Fragment>
                                                <p>
                                                  <strong>
                                                    Description: 
                                                  </strong>
                                                  Select a Data Type 1
                                                </p>
                                                <p>
                                                  <small>
                                                    <i>
                                                      This field is required.
                                                    </i>
                                                  </small>
                                                </p>
                                              </React.Fragment>
                                            </Popover>
                                          }
                                          trigger={
                                            Array [
                                              "hover",
                                              "focus",
                                            ]
                                          }
                                        >
                                          <i
                                            className="fa fa-question-circle"
                                            onBlur={[Function]}
                                            onClick={null}
                                            onFocus={[Function]}
                                            onMouseOut={[Function]}
                                            onMouseOver={[Function]}
                                          />
                                        </OverlayTrigger>
                                        <span
                                          className="required-symbol"
                                        >
                                           *
                                        </span>
                                      </label>
                                    </LabelOverlay>
                                  </FieldLabel>
                                  <div
                                    className="col-sm-6"
                                  >
                                    <StateManager
                                      blurInputOnSelect={false}
                                      className="select-input"
                                      classNamePrefix="select-input"
                                      components={
                                        Object {
                                          "Input": [Function],
                                        }
                                      }
                                      defaultInputValue=""
                                      defaultMenuIsOpen={false}
                                      defaultValue={null}
                                      delimiter=","
                                      id="selectinput-0"
                                      isClearable={true}
                                      isDisabled={false}
                                      name="entityType0"
                                      noOptionsMessage={[Function]}
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      placeholder="Select a Data Type ..."
                                      styles={
                                        Object {
                                          "menu": [Function],
                                          "multiValue": [Function],
                                          "multiValueLabel": [Function],
                                          "multiValueRemove": [Function],
                                        }
                                      }
                                      theme={[Function]}
                                      value={null}
                                    >
                                      <Select
                                        aria-live="polite"
                                        backspaceRemovesValue={true}
                                        blurInputOnSelect={false}
                                        captureMenuScroll={false}
                                        className="select-input"
                                        classNamePrefix="select-input"
                                        closeMenuOnScroll={false}
                                        closeMenuOnSelect={true}
                                        components={
                                          Object {
                                            "Input": [Function],
                                          }
                                        }
                                        controlShouldRenderValue={true}
                                        delimiter=","
                                        escapeClearsValue={false}
                                        filterOption={[Function]}
                                        formatGroupLabel={[Function]}
                                        getOptionLabel={[Function]}
                                        getOptionValue={[Function]}
                                        id="selectinput-0"
                                        inputValue=""
                                        isClearable={true}
                                        isDisabled={false}
                                        isLoading={false}
                                        isMulti={false}
                                        isOptionDisabled={[Function]}
                                        isRtl={false}
                                        isSearchable={true}
                                        loadingMessage={[Function]}
                                        maxMenuHeight={300}
                                        menuIsOpen={false}
                                        menuPlacement="bottom"
                                        menuPosition="absolute"
                                        menuShouldBlockScroll={false}
                                        menuShouldScrollIntoView={true}
                                        minMenuHeight={140}
                                        name="entityType0"
                                        noOptionsMessage={[Function]}
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        onInputChange={[Function]}
                                        onMenuClose={[Function]}
                                        onMenuOpen={[Function]}
                                        openMenuOnClick={true}
                                        openMenuOnFocus={false}
                                        options={Array []}
                                        pageSize={5}
                                        placeholder="Select a Data Type ..."
                                        screenReaderStatus={[Function]}
                                        styles={
                                          Object {
                                            "menu": [Function],
                                            "multiValue": [Function],
                                            "multiValueLabel": [Function],
                                            "multiValueRemove": [Function],
                                          }
                                        }
                                        tabIndex="0"
                                        tabSelectsValue={true}
                                        theme={[Function]}
                                        value={null}
                                      >
                                        <SelectContainer
                                          className="select-input"
                                          clearValue={[Function]}
                                          cx={[Function]}
                                          getStyles={[Function]}
                                          getValue={[Function]}
                                          hasValue={false}
                                          innerProps={
                                            Object {
                                              "id": "selectinput-0",
                                              "onKeyDown": [Function],
                                            }
                                          }
                                          isDisabled={false}
                                          isFocused={false}
                                          isMulti={false}
                                          isRtl={false}
                                          options={Array []}
                                          selectOption={[Function]}
                                          selectProps={
                                            Object {
                                              "aria-live": "polite",
                                              "autoFocus": undefined,
                                              "backspaceRemovesValue": true,
                                              "blurInputOnSelect": false,
                                              "captureMenuScroll": false,
                                              "className": "select-input",
                                              "classNamePrefix": "select-input",
                                              "closeMenuOnScroll": false,
                                              "closeMenuOnSelect": true,
                                              "components": Object {
                                                "Input": [Function],
                                              },
                                              "controlShouldRenderValue": true,
                                              "delimiter": ",",
                                              "escapeClearsValue": false,
                                              "filterOption": [Function],
                                              "formatGroupLabel": [Function],
                                              "getOptionLabel": [Function],
                                              "getOptionValue": [Function],
                                              "id": "selectinput-0",
                                              "inputValue": "",
                                              "isClearable": true,
                                              "isDisabled": false,
                                              "isLoading": false,
                                              "isMulti": false,
                                              "isOptionDisabled": [Function],
                                              "isRtl": false,
                                              "isSearchable": true,
                                              "loadingMessage": [Function],
                                              "maxMenuHeight": 300,
                                              "menuIsOpen": false,
                                              "menuPlacement": "bottom",
                                              "menuPosition": "absolute",
                                              "menuShouldBlockScroll": false,
                                              "menuShouldScrollIntoView": true,
                                              "minMenuHeight": 140,
                                              "name": "entityType0",
                                              "noOptionsMessage": [Function],
                                              "onBlur": [Function],
                                              "onChange": [Function],
                                              "onFocus": [Function],
                                              "onInputChange": [Function],
                                              "onMenuClose": [Function],
                                              "onMenuOpen": [Function],
                                              "openMenuOnClick": true,
                                              "openMenuOnFocus": false,
                                              "options": Array [],
                                              "pageSize": 5,
                                              "placeholder": "Select a Data Type ...",
                                              "promptTextCreator": undefined,
                                              "screenReaderStatus": [Function],
                                              "styles": Object {
                                                "menu": [Function],
                                                "multiValue": [Function],
                                                "multiValueLabel": [Function],
                                                "multiValueRemove": [Function],
                                              },
                                              "tabIndex": "0",
                                              "tabSelectsValue": true,
                                              "theme": [Function],
                                              "value": null,
                                            }
                                          }
                                          setValue={[Function]}
                                          theme={
                                            Object {
                                              "borderRadius": 4,
                                              "colors": Object {
                                                "danger": "#D9534F",
                                                "dangerLight": "#FFBDAD",
                                                "neutral0": "hsl(0, 0%, 100%)",
                                                "neutral10": "hsl(0, 0%, 90%)",
                                                "neutral20": "hsl(0, 0%, 80%)",
                                                "neutral30": "hsl(0, 0%, 70%)",
                                                "neutral40": "hsl(0, 0%, 60%)",
                                                "neutral5": "hsl(0, 0%, 95%)",
                                                "neutral50": "hsl(0, 0%, 50%)",
                                                "neutral60": "hsl(0, 0%, 40%)",
                                                "neutral70": "hsl(0, 0%, 30%)",
                                                "neutral80": "hsl(0, 0%, 20%)",
                                                "neutral90": "hsl(0, 0%, 10%)",
                                                "primary": "#2980B9",
                                                "primary25": "rgba(41, 128, 185, 0.1)",
                                                "primary50": "#F2F9FC",
                                                "primary75": "#009BF9",
                                              },
                                              "spacing": Object {
                                                "baseUnit": 4,
                                                "controlHeight": 38,
                                                "menuGutter": 8,
                                              },
                                            }
                                          }
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="SelectContainer"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                            className="select-input"
                                            css={
                                              Object {
                                                "boxSizing": "border-box",
                                                "direction": null,
                                                "label": "container",
                                                "pointerEvents": null,
                                                "position": "relative",
                                              }
                                            }
                                            id="selectinput-0"
                                            onKeyDown={[Function]}
                                          >
                                            <div
                                              className="select-input css-2b097c-container"
                                              id="selectinput-0"
                                              onKeyDown={[Function]}
                                            >
                                              <LiveRegion
                                                ariaSelection={null}
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                focusableOptions={Array []}
                                                focusedOption={null}
                                                focusedValue={null}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={false}
                                                isFocused={false}
                                                isMulti={false}
                                                isRtl={false}
                                                options={Array []}
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "aria-live": "polite",
                                                    "autoFocus": undefined,
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": false,
                                                    "captureMenuScroll": false,
                                                    "className": "select-input",
                                                    "classNamePrefix": "select-input",
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {
                                                      "Input": [Function],
                                                    },
                                                    "controlShouldRenderValue": true,
                                                    "delimiter": ",",
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "id": "selectinput-0",
                                                    "inputValue": "",
                                                    "isClearable": true,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": false,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 300,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "name": "entityType0",
                                                    "noOptionsMessage": [Function],
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [],
                                                    "pageSize": 5,
                                                    "placeholder": "Select a Data Type ...",
                                                    "promptTextCreator": undefined,
                                                    "screenReaderStatus": [Function],
                                                    "styles": Object {
                                                      "menu": [Function],
                                                      "multiValue": [Function],
                                                      "multiValueLabel": [Function],
                                                      "multiValueRemove": [Function],
                                                    },
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "theme": [Function],
                                                    "value": null,
                                                  }
                                                }
                                                selectValue={Array []}
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#D9534F",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2980B9",
                                                      "primary25": "rgba(41, 128, 185, 0.1)",
                                                      "primary50": "#F2F9FC",
                                                      "primary75": "#009BF9",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <A11yText
                                                  aria-atomic="false"
                                                  aria-live="polite"
                                                  aria-relevant="additions text"
                                                >
                                                  <EmotionCssPropInternal
                                                    __EMOTION_LABEL_PLEASE_DO_NOT_USE__="A11yText"
                                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                                    aria-atomic="false"
                                                    aria-live="polite"
                                                    aria-relevant="additions text"
                                                    css={
                                                      Object {
                                                        "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkExMXlUZXh0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFJIiwiZmlsZSI6IkExMXlUZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcbi8qKiBAanN4IGpzeCAqL1xuaW1wb3J0IHsgdHlwZSBFbGVtZW50Q29uZmlnIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsganN4IH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vLyBBc3Npc3RpdmUgdGV4dCB0byBkZXNjcmliZSB2aXN1YWwgZWxlbWVudHMuIEhpZGRlbiBmb3Igc2lnaHRlZCB1c2Vycy5cbmNvbnN0IEExMXlUZXh0ID0gKHByb3BzOiBFbGVtZW50Q29uZmlnPCdzcGFuJz4pID0+IChcbiAgPHNwYW5cbiAgICBjc3M9e3tcbiAgICAgIGxhYmVsOiAnYTExeVRleHQnLFxuICAgICAgekluZGV4OiA5OTk5LFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY2xpcDogJ3JlY3QoMXB4LCAxcHgsIDFweCwgMXB4KScsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgICB3aWR0aDogMSxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIHdoaXRlU3BhY2U6ICdub3dyYXAnLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQTExeVRleHQ7XG4iXX0= */",
                                                        "name": "1f43avz-a11yText-A11yText",
                                                        "styles": "label:a11yText;z-index:9999;border:0;clip:rect(1px, 1px, 1px, 1px);height:1px;width:1px;position:absolute;overflow:hidden;padding:0;white-space:nowrap;label:A11yText;",
                                                        "toString": [Function],
                                                      }
                                                    }
                                                  >
                                                    <span
                                                      aria-atomic="false"
                                                      aria-live="polite"
                                                      aria-relevant="additions text"
                                                      className="css-1f43avz-a11yText-A11yText"
                                                    />
                                                  </EmotionCssPropInternal>
                                                </A11yText>
                                              </LiveRegion>
                                              <Control
                                                clearValue={[Function]}
                                                cx={[Function]}
                                                getStyles={[Function]}
                                                getValue={[Function]}
                                                hasValue={false}
                                                innerProps={
                                                  Object {
                                                    "onMouseDown": [Function],
                                                    "onTouchEnd": [Function],
                                                  }
                                                }
                                                innerRef={[Function]}
                                                isDisabled={false}
                                                isFocused={false}
                                                isMulti={false}
                                                isRtl={false}
                                                menuIsOpen={false}
                                                options={Array []}
                                                selectOption={[Function]}
                                                selectProps={
                                                  Object {
                                                    "aria-live": "polite",
                                                    "autoFocus": undefined,
                                                    "backspaceRemovesValue": true,
                                                    "blurInputOnSelect": false,
                                                    "captureMenuScroll": false,
                                                    "className": "select-input",
                                                    "classNamePrefix": "select-input",
                                                    "closeMenuOnScroll": false,
                                                    "closeMenuOnSelect": true,
                                                    "components": Object {
                                                      "Input": [Function],
                                                    },
                                                    "controlShouldRenderValue": true,
                                                    "delimiter": ",",
                                                    "escapeClearsValue": false,
                                                    "filterOption": [Function],
                                                    "formatGroupLabel": [Function],
                                                    "getOptionLabel": [Function],
                                                    "getOptionValue": [Function],
                                                    "id": "selectinput-0",
                                                    "inputValue": "",
                                                    "isClearable": true,
                                                    "isDisabled": false,
                                                    "isLoading": false,
                                                    "isMulti": false,
                                                    "isOptionDisabled": [Function],
                                                    "isRtl": false,
                                                    "isSearchable": true,
                                                    "loadingMessage": [Function],
                                                    "maxMenuHeight": 300,
                                                    "menuIsOpen": false,
                                                    "menuPlacement": "bottom",
                                                    "menuPosition": "absolute",
                                                    "menuShouldBlockScroll": false,
                                                    "menuShouldScrollIntoView": true,
                                                    "minMenuHeight": 140,
                                                    "name": "entityType0",
                                                    "noOptionsMessage": [Function],
                                                    "onBlur": [Function],
                                                    "onChange": [Function],
                                                    "onFocus": [Function],
                                                    "onInputChange": [Function],
                                                    "onMenuClose": [Function],
                                                    "onMenuOpen": [Function],
                                                    "openMenuOnClick": true,
                                                    "openMenuOnFocus": false,
                                                    "options": Array [],
                                                    "pageSize": 5,
                                                    "placeholder": "Select a Data Type ...",
                                                    "promptTextCreator": undefined,
                                                    "screenReaderStatus": [Function],
                                                    "styles": Object {
                                                      "menu": [Function],
                                                      "multiValue": [Function],
                                                      "multiValueLabel": [Function],
                                                      "multiValueRemove": [Function],
                                                    },
                                                    "tabIndex": "0",
                                                    "tabSelectsValue": true,
                                                    "theme": [Function],
                                                    "value": null,
                                                  }
                                                }
                                                setValue={[Function]}
                                                theme={
                                                  Object {
                                                    "borderRadius": 4,
                                                    "colors": Object {
                                                      "danger": "#D9534F",
                                                      "dangerLight": "#FFBDAD",
                                                      "neutral0": "hsl(0, 0%, 100%)",
                                                      "neutral10": "hsl(0, 0%, 90%)",
                                                      "neutral20": "hsl(0, 0%, 80%)",
                                                      "neutral30": "hsl(0, 0%, 70%)",
                                                      "neutral40": "hsl(0, 0%, 60%)",
                                                      "neutral5": "hsl(0, 0%, 95%)",
                                                      "neutral50": "hsl(0, 0%, 50%)",
                                                      "neutral60": "hsl(0, 0%, 40%)",
                                                      "neutral70": "hsl(0, 0%, 30%)",
                                                      "neutral80": "hsl(0, 0%, 20%)",
                                                      "neutral90": "hsl(0, 0%, 10%)",
                                                      "primary": "#2980B9",
                                                      "primary25": "rgba(41, 128, 185, 0.1)",
                                                      "primary50": "#F2F9FC",
                                                      "primary75": "#009BF9",
                                                    },
                                                    "spacing": Object {
                                                      "baseUnit": 4,
                                                      "controlHeight": 38,
                                                      "menuGutter": 8,
                                                    },
                                                  }
                                                }
                                              >
                                                <EmotionCssPropInternal
                                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Control"
                                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                  className="select-input__control"
                                                  css={
                                                    Object {
                                                      "&:hover": Object {
                                                        "borderColor": "hsl(0, 0%, 70%)",
                                                      },
                                                      "alignItems": "center",
                                                      "backgroundColor": "hsl(0, 0%, 100%)",
                                                      "borderColor": "hsl(0, 0%, 80%)",
                                                      "borderRadius": 4,
                                                      "borderStyle": "solid",
                                                      "borderWidth": 1,
                                                      "boxShadow": null,
                                                      "boxSizing": "border-box",
                                                      "cursor": "default",
                                                      "display": "flex",
                                                      "flexWrap": "wrap",
                                                      "justifyContent": "space-between",
                                                      "label": "control",
                                                      "minHeight": 38,
                                                      "outline": "0 !important",
                                                      "position": "relative",
                                                      "transition": "all 100ms",
                                                    }
                                                  }
                                                  onMouseDown={[Function]}
                                                  onTouchEnd={[Function]}
                                                >
                                                  <div
                                                    className="select-input__control css-yk16xz-control"
                                                    onMouseDown={[Function]}
                                                    onTouchEnd={[Function]}
                                                  >
                                                    <ValueContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={Array []}
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "aria-live": "polite",
                                                          "autoFocus": undefined,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": false,
                                                          "captureMenuScroll": false,
                                                          "className": "select-input",
                                                          "classNamePrefix": "select-input",
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "Input": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "delimiter": ",",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "id": "selectinput-0",
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "entityType0",
                                                          "noOptionsMessage": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [],
                                                          "pageSize": 5,
                                                          "placeholder": "Select a Data Type ...",
                                                          "promptTextCreator": undefined,
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {
                                                            "menu": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "theme": [Function],
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#D9534F",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2980B9",
                                                            "primary25": "rgba(41, 128, 185, 0.1)",
                                                            "primary50": "#F2F9FC",
                                                            "primary75": "#009BF9",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="ValueContainer"
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className="select-input__value-container"
                                                        css={
                                                          Object {
                                                            "WebkitOverflowScrolling": "touch",
                                                            "alignItems": "center",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flex": 1,
                                                            "flexWrap": "wrap",
                                                            "overflow": "hidden",
                                                            "padding": "2px 8px",
                                                            "position": "relative",
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className="select-input__value-container css-g1d714-ValueContainer"
                                                        >
                                                          <Placeholder
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            key="placeholder"
                                                            options={Array []}
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "aria-live": "polite",
                                                                "autoFocus": undefined,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": false,
                                                                "captureMenuScroll": false,
                                                                "className": "select-input",
                                                                "classNamePrefix": "select-input",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "Input": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "delimiter": ",",
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "id": "selectinput-0",
                                                                "inputValue": "",
                                                                "isClearable": true,
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "entityType0",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [],
                                                                "pageSize": 5,
                                                                "placeholder": "Select a Data Type ...",
                                                                "promptTextCreator": undefined,
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {
                                                                  "menu": [Function],
                                                                  "multiValue": [Function],
                                                                  "multiValueLabel": [Function],
                                                                  "multiValueRemove": [Function],
                                                                },
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "theme": [Function],
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#D9534F",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2980B9",
                                                                  "primary25": "rgba(41, 128, 185, 0.1)",
                                                                  "primary50": "#F2F9FC",
                                                                  "primary75": "#009BF9",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Placeholder"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              className="select-input__placeholder"
                                                              css={
                                                                Object {
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 50%)",
                                                                  "label": "placeholder",
                                                                  "marginLeft": 2,
                                                                  "marginRight": 2,
                                                                  "position": "absolute",
                                                                  "top": "50%",
                                                                  "transform": "translateY(-50%)",
                                                                }
                                                              }
                                                            >
                                                              <div
                                                                className="select-input__placeholder css-1wa3eu0-placeholder"
                                                              >
                                                                Select a Data Type ...
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </Placeholder>
                                                          <Component
                                                            aria-autocomplete="list"
                                                            autoCapitalize="none"
                                                            autoComplete="off"
                                                            autoCorrect="off"
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            id="react-select-2-input"
                                                            innerRef={[Function]}
                                                            isDisabled={false}
                                                            isHidden={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            options={Array []}
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "aria-live": "polite",
                                                                "autoFocus": undefined,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": false,
                                                                "captureMenuScroll": false,
                                                                "className": "select-input",
                                                                "classNamePrefix": "select-input",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "Input": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "delimiter": ",",
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "id": "selectinput-0",
                                                                "inputValue": "",
                                                                "isClearable": true,
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "entityType0",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [],
                                                                "pageSize": 5,
                                                                "placeholder": "Select a Data Type ...",
                                                                "promptTextCreator": undefined,
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {
                                                                  "menu": [Function],
                                                                  "multiValue": [Function],
                                                                  "multiValueLabel": [Function],
                                                                  "multiValueRemove": [Function],
                                                                },
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "theme": [Function],
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            spellCheck="false"
                                                            tabIndex="0"
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#D9534F",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2980B9",
                                                                  "primary25": "rgba(41, 128, 185, 0.1)",
                                                                  "primary50": "#F2F9FC",
                                                                  "primary75": "#009BF9",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                            type="text"
                                                            value=""
                                                          >
                                                            <Input
                                                              aria-autocomplete="list"
                                                              autoCapitalize="none"
                                                              autoComplete="off"
                                                              autoCorrect="off"
                                                              clearValue={[Function]}
                                                              cx={[Function]}
                                                              getStyles={[Function]}
                                                              getValue={[Function]}
                                                              hasValue={false}
                                                              id="react-select-2-input"
                                                              innerRef={[Function]}
                                                              isDisabled={false}
                                                              isHidden={false}
                                                              isMulti={false}
                                                              isRtl={false}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              options={Array []}
                                                              required={true}
                                                              selectOption={[Function]}
                                                              selectProps={
                                                                Object {
                                                                  "aria-live": "polite",
                                                                  "autoFocus": undefined,
                                                                  "backspaceRemovesValue": true,
                                                                  "blurInputOnSelect": false,
                                                                  "captureMenuScroll": false,
                                                                  "className": "select-input",
                                                                  "classNamePrefix": "select-input",
                                                                  "closeMenuOnScroll": false,
                                                                  "closeMenuOnSelect": true,
                                                                  "components": Object {
                                                                    "Input": [Function],
                                                                  },
                                                                  "controlShouldRenderValue": true,
                                                                  "delimiter": ",",
                                                                  "escapeClearsValue": false,
                                                                  "filterOption": [Function],
                                                                  "formatGroupLabel": [Function],
                                                                  "getOptionLabel": [Function],
                                                                  "getOptionValue": [Function],
                                                                  "id": "selectinput-0",
                                                                  "inputValue": "",
                                                                  "isClearable": true,
                                                                  "isDisabled": false,
                                                                  "isLoading": false,
                                                                  "isMulti": false,
                                                                  "isOptionDisabled": [Function],
                                                                  "isRtl": false,
                                                                  "isSearchable": true,
                                                                  "loadingMessage": [Function],
                                                                  "maxMenuHeight": 300,
                                                                  "menuIsOpen": false,
                                                                  "menuPlacement": "bottom",
                                                                  "menuPosition": "absolute",
                                                                  "menuShouldBlockScroll": false,
                                                                  "menuShouldScrollIntoView": true,
                                                                  "minMenuHeight": 140,
                                                                  "name": "entityType0",
                                                                  "noOptionsMessage": [Function],
                                                                  "onBlur": [Function],
                                                                  "onChange": [Function],
                                                                  "onFocus": [Function],
                                                                  "onInputChange": [Function],
                                                                  "onMenuClose": [Function],
                                                                  "onMenuOpen": [Function],
                                                                  "openMenuOnClick": true,
                                                                  "openMenuOnFocus": false,
                                                                  "options": Array [],
                                                                  "pageSize": 5,
                                                                  "placeholder": "Select a Data Type ...",
                                                                  "promptTextCreator": undefined,
                                                                  "screenReaderStatus": [Function],
                                                                  "styles": Object {
                                                                    "menu": [Function],
                                                                    "multiValue": [Function],
                                                                    "multiValueLabel": [Function],
                                                                    "multiValueRemove": [Function],
                                                                  },
                                                                  "tabIndex": "0",
                                                                  "tabSelectsValue": true,
                                                                  "theme": [Function],
                                                                  "value": null,
                                                                }
                                                              }
                                                              setValue={[Function]}
                                                              spellCheck="false"
                                                              tabIndex="0"
                                                              theme={
                                                                Object {
                                                                  "borderRadius": 4,
                                                                  "colors": Object {
                                                                    "danger": "#D9534F",
                                                                    "dangerLight": "#FFBDAD",
                                                                    "neutral0": "hsl(0, 0%, 100%)",
                                                                    "neutral10": "hsl(0, 0%, 90%)",
                                                                    "neutral20": "hsl(0, 0%, 80%)",
                                                                    "neutral30": "hsl(0, 0%, 70%)",
                                                                    "neutral40": "hsl(0, 0%, 60%)",
                                                                    "neutral5": "hsl(0, 0%, 95%)",
                                                                    "neutral50": "hsl(0, 0%, 50%)",
                                                                    "neutral60": "hsl(0, 0%, 40%)",
                                                                    "neutral70": "hsl(0, 0%, 30%)",
                                                                    "neutral80": "hsl(0, 0%, 20%)",
                                                                    "neutral90": "hsl(0, 0%, 10%)",
                                                                    "primary": "#2980B9",
                                                                    "primary25": "rgba(41, 128, 185, 0.1)",
                                                                    "primary50": "#F2F9FC",
                                                                    "primary75": "#009BF9",
                                                                  },
                                                                  "spacing": Object {
                                                                    "baseUnit": 4,
                                                                    "controlHeight": 38,
                                                                    "menuGutter": 8,
                                                                  },
                                                                }
                                                              }
                                                              type="text"
                                                              value=""
                                                            >
                                                              <EmotionCssPropInternal
                                                                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Input"
                                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                                css={
                                                                  Object {
                                                                    "boxSizing": "border-box",
                                                                    "color": "hsl(0, 0%, 20%)",
                                                                    "margin": 2,
                                                                    "paddingBottom": 2,
                                                                    "paddingTop": 2,
                                                                    "visibility": "visible",
                                                                  }
                                                                }
                                                              >
                                                                <div
                                                                  className="css-b8ldur-Input"
                                                                >
                                                                  <AutosizeInput
                                                                    aria-autocomplete="list"
                                                                    autoCapitalize="none"
                                                                    autoComplete="off"
                                                                    autoCorrect="off"
                                                                    className="select-input__input"
                                                                    disabled={false}
                                                                    id="react-select-2-input"
                                                                    injectStyles={true}
                                                                    inputRef={[Function]}
                                                                    inputStyle={
                                                                      Object {
                                                                        "background": 0,
                                                                        "border": 0,
                                                                        "color": "inherit",
                                                                        "fontSize": "inherit",
                                                                        "label": "input",
                                                                        "opacity": 1,
                                                                        "outline": 0,
                                                                        "padding": 0,
                                                                      }
                                                                    }
                                                                    minWidth={1}
                                                                    onBlur={[Function]}
                                                                    onChange={[Function]}
                                                                    onFocus={[Function]}
                                                                    required={true}
                                                                    spellCheck="false"
                                                                    tabIndex="0"
                                                                    type="text"
                                                                    value=""
                                                                  >
                                                                    <div
                                                                      className="select-input__input"
                                                                      style={
                                                                        Object {
                                                                          "display": "inline-block",
                                                                        }
                                                                      }
                                                                    >
                                                                      <input
                                                                        aria-autocomplete="list"
                                                                        autoCapitalize="none"
                                                                        autoComplete="off"
                                                                        autoCorrect="off"
                                                                        disabled={false}
                                                                        id="react-select-2-input"
                                                                        onBlur={[Function]}
                                                                        onChange={[Function]}
                                                                        onFocus={[Function]}
                                                                        required={true}
                                                                        spellCheck="false"
                                                                        style={
                                                                          Object {
                                                                            "background": 0,
                                                                            "border": 0,
                                                                            "boxSizing": "content-box",
                                                                            "color": "inherit",
                                                                            "fontSize": "inherit",
                                                                            "label": "input",
                                                                            "opacity": 1,
                                                                            "outline": 0,
                                                                            "padding": 0,
                                                                            "width": "1px",
                                                                          }
                                                                        }
                                                                        tabIndex="0"
                                                                        type="text"
                                                                        value=""
                                                                      />
                                                                      <div
                                                                        style={
                                                                          Object {
                                                                            "height": 0,
                                                                            "left": 0,
                                                                            "overflow": "scroll",
                                                                            "position": "absolute",
                                                                            "top": 0,
                                                                            "visibility": "hidden",
                                                                            "whiteSpace": "pre",
                                                                          }
                                                                        }
                                                                      />
                                                                    </div>
                                                                  </AutosizeInput>
                                                                </div>
                                                              </EmotionCssPropInternal>
                                                            </Input>
                                                          </Component>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </ValueContainer>
                                                    <IndicatorsContainer
                                                      clearValue={[Function]}
                                                      cx={[Function]}
                                                      getStyles={[Function]}
                                                      getValue={[Function]}
                                                      hasValue={false}
                                                      isDisabled={false}
                                                      isMulti={false}
                                                      isRtl={false}
                                                      options={Array []}
                                                      selectOption={[Function]}
                                                      selectProps={
                                                        Object {
                                                          "aria-live": "polite",
                                                          "autoFocus": undefined,
                                                          "backspaceRemovesValue": true,
                                                          "blurInputOnSelect": false,
                                                          "captureMenuScroll": false,
                                                          "className": "select-input",
                                                          "classNamePrefix": "select-input",
                                                          "closeMenuOnScroll": false,
                                                          "closeMenuOnSelect": true,
                                                          "components": Object {
                                                            "Input": [Function],
                                                          },
                                                          "controlShouldRenderValue": true,
                                                          "delimiter": ",",
                                                          "escapeClearsValue": false,
                                                          "filterOption": [Function],
                                                          "formatGroupLabel": [Function],
                                                          "getOptionLabel": [Function],
                                                          "getOptionValue": [Function],
                                                          "id": "selectinput-0",
                                                          "inputValue": "",
                                                          "isClearable": true,
                                                          "isDisabled": false,
                                                          "isLoading": false,
                                                          "isMulti": false,
                                                          "isOptionDisabled": [Function],
                                                          "isRtl": false,
                                                          "isSearchable": true,
                                                          "loadingMessage": [Function],
                                                          "maxMenuHeight": 300,
                                                          "menuIsOpen": false,
                                                          "menuPlacement": "bottom",
                                                          "menuPosition": "absolute",
                                                          "menuShouldBlockScroll": false,
                                                          "menuShouldScrollIntoView": true,
                                                          "minMenuHeight": 140,
                                                          "name": "entityType0",
                                                          "noOptionsMessage": [Function],
                                                          "onBlur": [Function],
                                                          "onChange": [Function],
                                                          "onFocus": [Function],
                                                          "onInputChange": [Function],
                                                          "onMenuClose": [Function],
                                                          "onMenuOpen": [Function],
                                                          "openMenuOnClick": true,
                                                          "openMenuOnFocus": false,
                                                          "options": Array [],
                                                          "pageSize": 5,
                                                          "placeholder": "Select a Data Type ...",
                                                          "promptTextCreator": undefined,
                                                          "screenReaderStatus": [Function],
                                                          "styles": Object {
                                                            "menu": [Function],
                                                            "multiValue": [Function],
                                                            "multiValueLabel": [Function],
                                                            "multiValueRemove": [Function],
                                                          },
                                                          "tabIndex": "0",
                                                          "tabSelectsValue": true,
                                                          "theme": [Function],
                                                          "value": null,
                                                        }
                                                      }
                                                      setValue={[Function]}
                                                      theme={
                                                        Object {
                                                          "borderRadius": 4,
                                                          "colors": Object {
                                                            "danger": "#D9534F",
                                                            "dangerLight": "#FFBDAD",
                                                            "neutral0": "hsl(0, 0%, 100%)",
                                                            "neutral10": "hsl(0, 0%, 90%)",
                                                            "neutral20": "hsl(0, 0%, 80%)",
                                                            "neutral30": "hsl(0, 0%, 70%)",
                                                            "neutral40": "hsl(0, 0%, 60%)",
                                                            "neutral5": "hsl(0, 0%, 95%)",
                                                            "neutral50": "hsl(0, 0%, 50%)",
                                                            "neutral60": "hsl(0, 0%, 40%)",
                                                            "neutral70": "hsl(0, 0%, 30%)",
                                                            "neutral80": "hsl(0, 0%, 20%)",
                                                            "neutral90": "hsl(0, 0%, 10%)",
                                                            "primary": "#2980B9",
                                                            "primary25": "rgba(41, 128, 185, 0.1)",
                                                            "primary50": "#F2F9FC",
                                                            "primary75": "#009BF9",
                                                          },
                                                          "spacing": Object {
                                                            "baseUnit": 4,
                                                            "controlHeight": 38,
                                                            "menuGutter": 8,
                                                          },
                                                        }
                                                      }
                                                    >
                                                      <EmotionCssPropInternal
                                                        __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorsContainer"
                                                        __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                        className="select-input__indicators"
                                                        css={
                                                          Object {
                                                            "alignItems": "center",
                                                            "alignSelf": "stretch",
                                                            "boxSizing": "border-box",
                                                            "display": "flex",
                                                            "flexShrink": 0,
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className="select-input__indicators css-1hb7zxy-IndicatorsContainer"
                                                        >
                                                          <IndicatorSeparator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            options={Array []}
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "aria-live": "polite",
                                                                "autoFocus": undefined,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": false,
                                                                "captureMenuScroll": false,
                                                                "className": "select-input",
                                                                "classNamePrefix": "select-input",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "Input": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "delimiter": ",",
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "id": "selectinput-0",
                                                                "inputValue": "",
                                                                "isClearable": true,
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "entityType0",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [],
                                                                "pageSize": 5,
                                                                "placeholder": "Select a Data Type ...",
                                                                "promptTextCreator": undefined,
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {
                                                                  "menu": [Function],
                                                                  "multiValue": [Function],
                                                                  "multiValueLabel": [Function],
                                                                  "multiValueRemove": [Function],
                                                                },
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "theme": [Function],
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#D9534F",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2980B9",
                                                                  "primary25": "rgba(41, 128, 185, 0.1)",
                                                                  "primary50": "#F2F9FC",
                                                                  "primary75": "#009BF9",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IndicatorSeparator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="span"
                                                              className="select-input__indicator-separator"
                                                              css={
                                                                Object {
                                                                  "alignSelf": "stretch",
                                                                  "backgroundColor": "hsl(0, 0%, 80%)",
                                                                  "boxSizing": "border-box",
                                                                  "label": "indicatorSeparator",
                                                                  "marginBottom": 8,
                                                                  "marginTop": 8,
                                                                  "width": 1,
                                                                }
                                                              }
                                                            >
                                                              <span
                                                                className="select-input__indicator-separator css-1okebmr-indicatorSeparator"
                                                              />
                                                            </EmotionCssPropInternal>
                                                          </IndicatorSeparator>
                                                          <DropdownIndicator
                                                            clearValue={[Function]}
                                                            cx={[Function]}
                                                            getStyles={[Function]}
                                                            getValue={[Function]}
                                                            hasValue={false}
                                                            innerProps={
                                                              Object {
                                                                "aria-hidden": "true",
                                                                "onMouseDown": [Function],
                                                                "onTouchEnd": [Function],
                                                              }
                                                            }
                                                            isDisabled={false}
                                                            isFocused={false}
                                                            isMulti={false}
                                                            isRtl={false}
                                                            options={Array []}
                                                            selectOption={[Function]}
                                                            selectProps={
                                                              Object {
                                                                "aria-live": "polite",
                                                                "autoFocus": undefined,
                                                                "backspaceRemovesValue": true,
                                                                "blurInputOnSelect": false,
                                                                "captureMenuScroll": false,
                                                                "className": "select-input",
                                                                "classNamePrefix": "select-input",
                                                                "closeMenuOnScroll": false,
                                                                "closeMenuOnSelect": true,
                                                                "components": Object {
                                                                  "Input": [Function],
                                                                },
                                                                "controlShouldRenderValue": true,
                                                                "delimiter": ",",
                                                                "escapeClearsValue": false,
                                                                "filterOption": [Function],
                                                                "formatGroupLabel": [Function],
                                                                "getOptionLabel": [Function],
                                                                "getOptionValue": [Function],
                                                                "id": "selectinput-0",
                                                                "inputValue": "",
                                                                "isClearable": true,
                                                                "isDisabled": false,
                                                                "isLoading": false,
                                                                "isMulti": false,
                                                                "isOptionDisabled": [Function],
                                                                "isRtl": false,
                                                                "isSearchable": true,
                                                                "loadingMessage": [Function],
                                                                "maxMenuHeight": 300,
                                                                "menuIsOpen": false,
                                                                "menuPlacement": "bottom",
                                                                "menuPosition": "absolute",
                                                                "menuShouldBlockScroll": false,
                                                                "menuShouldScrollIntoView": true,
                                                                "minMenuHeight": 140,
                                                                "name": "entityType0",
                                                                "noOptionsMessage": [Function],
                                                                "onBlur": [Function],
                                                                "onChange": [Function],
                                                                "onFocus": [Function],
                                                                "onInputChange": [Function],
                                                                "onMenuClose": [Function],
                                                                "onMenuOpen": [Function],
                                                                "openMenuOnClick": true,
                                                                "openMenuOnFocus": false,
                                                                "options": Array [],
                                                                "pageSize": 5,
                                                                "placeholder": "Select a Data Type ...",
                                                                "promptTextCreator": undefined,
                                                                "screenReaderStatus": [Function],
                                                                "styles": Object {
                                                                  "menu": [Function],
                                                                  "multiValue": [Function],
                                                                  "multiValueLabel": [Function],
                                                                  "multiValueRemove": [Function],
                                                                },
                                                                "tabIndex": "0",
                                                                "tabSelectsValue": true,
                                                                "theme": [Function],
                                                                "value": null,
                                                              }
                                                            }
                                                            setValue={[Function]}
                                                            theme={
                                                              Object {
                                                                "borderRadius": 4,
                                                                "colors": Object {
                                                                  "danger": "#D9534F",
                                                                  "dangerLight": "#FFBDAD",
                                                                  "neutral0": "hsl(0, 0%, 100%)",
                                                                  "neutral10": "hsl(0, 0%, 90%)",
                                                                  "neutral20": "hsl(0, 0%, 80%)",
                                                                  "neutral30": "hsl(0, 0%, 70%)",
                                                                  "neutral40": "hsl(0, 0%, 60%)",
                                                                  "neutral5": "hsl(0, 0%, 95%)",
                                                                  "neutral50": "hsl(0, 0%, 50%)",
                                                                  "neutral60": "hsl(0, 0%, 40%)",
                                                                  "neutral70": "hsl(0, 0%, 30%)",
                                                                  "neutral80": "hsl(0, 0%, 20%)",
                                                                  "neutral90": "hsl(0, 0%, 10%)",
                                                                  "primary": "#2980B9",
                                                                  "primary25": "rgba(41, 128, 185, 0.1)",
                                                                  "primary50": "#F2F9FC",
                                                                  "primary75": "#009BF9",
                                                                },
                                                                "spacing": Object {
                                                                  "baseUnit": 4,
                                                                  "controlHeight": 38,
                                                                  "menuGutter": 8,
                                                                },
                                                              }
                                                            }
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="DropdownIndicator"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__="div"
                                                              aria-hidden="true"
                                                              className="select-input__indicator select-input__dropdown-indicator"
                                                              css={
                                                                Object {
                                                                  ":hover": Object {
                                                                    "color": "hsl(0, 0%, 60%)",
                                                                  },
                                                                  "boxSizing": "border-box",
                                                                  "color": "hsl(0, 0%, 80%)",
                                                                  "display": "flex",
                                                                  "label": "indicatorContainer",
                                                                  "padding": 8,
                                                                  "transition": "color 150ms",
                                                                }
                                                              }
                                                              onMouseDown={[Function]}
                                                              onTouchEnd={[Function]}
                                                            >
                                                              <div
                                                                aria-hidden="true"
                                                                className="select-input__indicator select-input__dropdown-indicator css-tlfecz-indicatorContainer"
                                                                onMouseDown={[Function]}
                                                                onTouchEnd={[Function]}
                                                              >
                                                                <DownChevron>
                                                                  <Svg
                                                                    size={20}
                                                                  >
                                                                    <EmotionCssPropInternal
                                                                      __EMOTION_LABEL_PLEASE_DO_NOT_USE__="Svg"
                                                                      __EMOTION_TYPE_PLEASE_DO_NOT_USE__="svg"
                                                                      aria-hidden="true"
                                                                      css={
                                                                        Object {
                                                                          "map": "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGljYXRvcnMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JJIiwiZmlsZSI6ImluZGljYXRvcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuLyoqIEBqc3gganN4ICovXG5pbXBvcnQgeyB0eXBlIE5vZGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBqc3gsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuaW1wb3J0IHR5cGUgeyBDb21tb25Qcm9wcywgVGhlbWUgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gRHJvcGRvd24gJiBDbGVhciBJY29uc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IFN2ZyA9ICh7IHNpemUsIC4uLnByb3BzIH06IHsgc2l6ZTogbnVtYmVyIH0pID0+IChcbiAgPHN2Z1xuICAgIGhlaWdodD17c2l6ZX1cbiAgICB3aWR0aD17c2l6ZX1cbiAgICB2aWV3Qm94PVwiMCAwIDIwIDIwXCJcbiAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICBjc3M9e3tcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgZmlsbDogJ2N1cnJlbnRDb2xvcicsXG4gICAgICBsaW5lSGVpZ2h0OiAxLFxuICAgICAgc3Ryb2tlOiAnY3VycmVudENvbG9yJyxcbiAgICAgIHN0cm9rZVdpZHRoOiAwLFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICAvPlxuKTtcblxuZXhwb3J0IGNvbnN0IENyb3NzSWNvbiA9IChwcm9wczogYW55KSA9PiAoXG4gIDxTdmcgc2l6ZT17MjB9IHsuLi5wcm9wc30+XG4gICAgPHBhdGggZD1cIk0xNC4zNDggMTQuODQ5Yy0wLjQ2OSAwLjQ2OS0xLjIyOSAwLjQ2OS0xLjY5NyAwbC0yLjY1MS0zLjAzMC0yLjY1MSAzLjAyOWMtMC40NjkgMC40NjktMS4yMjkgMC40NjktMS42OTcgMC0wLjQ2OS0wLjQ2OS0wLjQ2OS0xLjIyOSAwLTEuNjk3bDIuNzU4LTMuMTUtMi43NTktMy4xNTJjLTAuNDY5LTAuNDY5LTAuNDY5LTEuMjI4IDAtMS42OTdzMS4yMjgtMC40NjkgMS42OTcgMGwyLjY1MiAzLjAzMSAyLjY1MS0zLjAzMWMwLjQ2OS0wLjQ2OSAxLjIyOC0wLjQ2OSAxLjY5NyAwczAuNDY5IDEuMjI5IDAgMS42OTdsLTIuNzU4IDMuMTUyIDIuNzU4IDMuMTVjMC40NjkgMC40NjkgMC40NjkgMS4yMjkgMCAxLjY5OHpcIiAvPlxuICA8L1N2Zz5cbik7XG5leHBvcnQgY29uc3QgRG93bkNoZXZyb24gPSAocHJvcHM6IGFueSkgPT4gKFxuICA8U3ZnIHNpemU9ezIwfSB7Li4ucHJvcHN9PlxuICAgIDxwYXRoIGQ9XCJNNC41MTYgNy41NDhjMC40MzYtMC40NDYgMS4wNDMtMC40ODEgMS41NzYgMGwzLjkwOCAzLjc0NyAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDAgMS42MTUtMC40MDYgMC40MTgtNC42OTUgNC41MDItNC42OTUgNC41MDItMC4yMTcgMC4yMjMtMC41MDIgMC4zMzUtMC43ODcgMC4zMzVzLTAuNTctMC4xMTItMC43ODktMC4zMzVjMCAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCIgLz5cbiAgPC9Tdmc+XG4pO1xuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIERyb3Bkb3duICYgQ2xlYXIgQnV0dG9uc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCB0eXBlIEluZGljYXRvclByb3BzID0gQ29tbW9uUHJvcHMgJiB7XG4gIC8qKiBUaGUgY2hpbGRyZW4gdG8gYmUgcmVuZGVyZWQgaW5zaWRlIHRoZSBpbmRpY2F0b3IuICovXG4gIGNoaWxkcmVuOiBOb2RlLFxuICAvKiogUHJvcHMgdGhhdCB3aWxsIGJlIHBhc3NlZCBvbiB0byB0aGUgY2hpbGRyZW4uICovXG4gIGlubmVyUHJvcHM6IGFueSxcbiAgLyoqIFRoZSBmb2N1c2VkIHN0YXRlIG9mIHRoZSBzZWxlY3QuICovXG4gIGlzRm9jdXNlZDogYm9vbGVhbixcbiAgLyoqIFdoZXRoZXIgdGhlIHRleHQgaXMgcmlnaHQgdG8gbGVmdCAqL1xuICBpc1J0bDogYm9vbGVhbixcbn07XG5cbmNvbnN0IGJhc2VDU1MgPSAoe1xuICBpc0ZvY3VzZWQsXG4gIHRoZW1lOiB7XG4gICAgc3BhY2luZzogeyBiYXNlVW5pdCB9LFxuICAgIGNvbG9ycyxcbiAgfSxcbn06IEluZGljYXRvclByb3BzKSA9PiAoe1xuICBsYWJlbDogJ2luZGljYXRvckNvbnRhaW5lcicsXG4gIGNvbG9yOiBpc0ZvY3VzZWQgPyBjb2xvcnMubmV1dHJhbDYwIDogY29sb3JzLm5ldXRyYWwyMCxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBwYWRkaW5nOiBiYXNlVW5pdCAqIDIsXG4gIHRyYW5zaXRpb246ICdjb2xvciAxNTBtcycsXG5cbiAgJzpob3Zlcic6IHtcbiAgICBjb2xvcjogaXNGb2N1c2VkID8gY29sb3JzLm5ldXRyYWw4MCA6IGNvbG9ycy5uZXV0cmFsNDAsXG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IGRyb3Bkb3duSW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbmV4cG9ydCBjb25zdCBEcm9wZG93bkluZGljYXRvciA9IChwcm9wczogSW5kaWNhdG9yUHJvcHMpID0+IHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBjeCwgZ2V0U3R5bGVzLCBpbm5lclByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2dldFN0eWxlcygnZHJvcGRvd25JbmRpY2F0b3InLCBwcm9wcyl9XG4gICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICB7XG4gICAgICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgICdkcm9wZG93bi1pbmRpY2F0b3InOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW4gfHwgPERvd25DaGV2cm9uIC8+fVxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IGNsZWFySW5kaWNhdG9yQ1NTID0gYmFzZUNTUztcbmV4cG9ydCBjb25zdCBDbGVhckluZGljYXRvciA9IChwcm9wczogSW5kaWNhdG9yUHJvcHMpID0+IHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgY2xhc3NOYW1lLCBjeCwgZ2V0U3R5bGVzLCBpbm5lclByb3BzIH0gPSBwcm9wcztcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e2dldFN0eWxlcygnY2xlYXJJbmRpY2F0b3InLCBwcm9wcyl9XG4gICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICB7XG4gICAgICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgICdjbGVhci1pbmRpY2F0b3InOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBjbGFzc05hbWVcbiAgICAgICl9XG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICA+XG4gICAgICB7Y2hpbGRyZW4gfHwgPENyb3NzSWNvbiAvPn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gU2VwYXJhdG9yXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxudHlwZSBTZXBhcmF0b3JTdGF0ZSA9IHsgaXNEaXNhYmxlZDogYm9vbGVhbiB9O1xuXG5leHBvcnQgY29uc3QgaW5kaWNhdG9yU2VwYXJhdG9yQ1NTID0gKHtcbiAgaXNEaXNhYmxlZCxcbiAgdGhlbWU6IHtcbiAgICBzcGFjaW5nOiB7IGJhc2VVbml0IH0sXG4gICAgY29sb3JzLFxuICB9LFxufTogQ29tbW9uUHJvcHMgJiBTZXBhcmF0b3JTdGF0ZSkgPT4gKHtcbiAgbGFiZWw6ICdpbmRpY2F0b3JTZXBhcmF0b3InLFxuICBhbGlnblNlbGY6ICdzdHJldGNoJyxcbiAgYmFja2dyb3VuZENvbG9yOiBpc0Rpc2FibGVkID8gY29sb3JzLm5ldXRyYWwxMCA6IGNvbG9ycy5uZXV0cmFsMjAsXG4gIG1hcmdpbkJvdHRvbTogYmFzZVVuaXQgKiAyLFxuICBtYXJnaW5Ub3A6IGJhc2VVbml0ICogMixcbiAgd2lkdGg6IDEsXG59KTtcblxuZXhwb3J0IGNvbnN0IEluZGljYXRvclNlcGFyYXRvciA9IChwcm9wczogSW5kaWNhdG9yUHJvcHMpID0+IHtcbiAgY29uc3QgeyBjbGFzc05hbWUsIGN4LCBnZXRTdHlsZXMsIGlubmVyUHJvcHMgfSA9IHByb3BzO1xuICByZXR1cm4gKFxuICAgIDxzcGFuXG4gICAgICB7Li4uaW5uZXJQcm9wc31cbiAgICAgIGNzcz17Z2V0U3R5bGVzKCdpbmRpY2F0b3JTZXBhcmF0b3InLCBwcm9wcyl9XG4gICAgICBjbGFzc05hbWU9e2N4KHsgJ2luZGljYXRvci1zZXBhcmF0b3InOiB0cnVlIH0sIGNsYXNzTmFtZSl9XG4gICAgLz5cbiAgKTtcbn07XG5cbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gTG9hZGluZ1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IGxvYWRpbmdEb3RBbmltYXRpb25zID0ga2V5ZnJhbWVzYFxuICAwJSwgODAlLCAxMDAlIHsgb3BhY2l0eTogMDsgfVxuICA0MCUgeyBvcGFjaXR5OiAxOyB9XG5gO1xuXG5leHBvcnQgY29uc3QgbG9hZGluZ0luZGljYXRvckNTUyA9ICh7XG4gIGlzRm9jdXNlZCxcbiAgc2l6ZSxcbiAgdGhlbWU6IHtcbiAgICBjb2xvcnMsXG4gICAgc3BhY2luZzogeyBiYXNlVW5pdCB9LFxuICB9LFxufToge1xuICBpc0ZvY3VzZWQ6IGJvb2xlYW4sXG4gIHNpemU6IG51bWJlcixcbiAgdGhlbWU6IFRoZW1lLFxufSkgPT4gKHtcbiAgbGFiZWw6ICdsb2FkaW5nSW5kaWNhdG9yJyxcbiAgY29sb3I6IGlzRm9jdXNlZCA/IGNvbG9ycy5uZXV0cmFsNjAgOiBjb2xvcnMubmV1dHJhbDIwLFxuICBkaXNwbGF5OiAnZmxleCcsXG4gIHBhZGRpbmc6IGJhc2VVbml0ICogMixcbiAgdHJhbnNpdGlvbjogJ2NvbG9yIDE1MG1zJyxcbiAgYWxpZ25TZWxmOiAnY2VudGVyJyxcbiAgZm9udFNpemU6IHNpemUsXG4gIGxpbmVIZWlnaHQ6IDEsXG4gIG1hcmdpblJpZ2h0OiBzaXplLFxuICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbn0pO1xuXG50eXBlIERvdFByb3BzID0geyBkZWxheTogbnVtYmVyLCBvZmZzZXQ6IGJvb2xlYW4gfTtcbmNvbnN0IExvYWRpbmdEb3QgPSAoeyBkZWxheSwgb2Zmc2V0IH06IERvdFByb3BzKSA9PiAoXG4gIDxzcGFuXG4gICAgY3NzPXt7XG4gICAgICBhbmltYXRpb246IGAke2xvYWRpbmdEb3RBbmltYXRpb25zfSAxcyBlYXNlLWluLW91dCAke2RlbGF5fW1zIGluZmluaXRlO2AsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdjdXJyZW50Q29sb3InLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnMWVtJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgbWFyZ2luTGVmdDogb2Zmc2V0ID8gJzFlbScgOiBudWxsLFxuICAgICAgaGVpZ2h0OiAnMWVtJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgd2lkdGg6ICcxZW0nLFxuICAgIH19XG4gIC8+XG4pO1xuXG5leHBvcnQgdHlwZSBMb2FkaW5nSWNvblByb3BzID0ge1xuICAvKiogUHJvcHMgdGhhdCB3aWxsIGJlIHBhc3NlZCBvbiB0byB0aGUgY2hpbGRyZW4uICovXG4gIGlubmVyUHJvcHM6IGFueSxcbiAgLyoqIFRoZSBmb2N1c2VkIHN0YXRlIG9mIHRoZSBzZWxlY3QuICovXG4gIGlzRm9jdXNlZDogYm9vbGVhbixcbiAgLyoqIFdoZXRoZXIgdGhlIHRleHQgaXMgcmlnaHQgdG8gbGVmdCAqL1xuICBpc1J0bDogYm9vbGVhbixcbn0gJiBDb21tb25Qcm9wcyAmIHtcbiAgICAvKiogU2V0IHNpemUgb2YgdGhlIGNvbnRhaW5lci4gKi9cbiAgICBzaXplOiBudW1iZXIsXG4gIH07XG5leHBvcnQgY29uc3QgTG9hZGluZ0luZGljYXRvciA9IChwcm9wczogTG9hZGluZ0ljb25Qcm9wcykgPT4ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgY3gsIGdldFN0eWxlcywgaW5uZXJQcm9wcywgaXNSdGwgfSA9IHByb3BzO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY3NzPXtnZXRTdHlsZXMoJ2xvYWRpbmdJbmRpY2F0b3InLCBwcm9wcyl9XG4gICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICB7XG4gICAgICAgICAgaW5kaWNhdG9yOiB0cnVlLFxuICAgICAgICAgICdsb2FkaW5nLWluZGljYXRvcic6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzTmFtZVxuICAgICAgKX1cbiAgICAgIHsuLi5pbm5lclByb3BzfVxuICAgID5cbiAgICAgIDxMb2FkaW5nRG90IGRlbGF5PXswfSBvZmZzZXQ9e2lzUnRsfSAvPlxuICAgICAgPExvYWRpbmdEb3QgZGVsYXk9ezE2MH0gb2Zmc2V0IC8+XG4gICAgICA8TG9hZGluZ0RvdCBkZWxheT17MzIwfSBvZmZzZXQ9eyFpc1J0bH0gLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5Mb2FkaW5nSW5kaWNhdG9yLmRlZmF1bHRQcm9wcyA9IHsgc2l6ZTogNCB9O1xuIl19 */",
                                                                          "name": "tj5bde-Svg",
                                                                          "styles": "display:inline-block;fill:currentColor;line-height:1;stroke:currentColor;stroke-width:0;label:Svg;",
                                                                          "toString": [Function],
                                                                        }
                                                                      }
                                                                      focusable="false"
                                                                      height={20}
                                                                      viewBox="0 0 20 20"
                                                                      width={20}
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className="css-tj5bde-Svg"
                                                                        focusable="false"
                                                                        height={20}
                                                                        viewBox="0 0 20 20"
                                                                        width={20}
                                                                      >
                                                                        <path
                                                                          d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                                                                        />
                                                                      </svg>
                                                                    </EmotionCssPropInternal>
                                                                  </Svg>
                                                                </DownChevron>
                                                              </div>
                                                            </EmotionCssPropInternal>
                                                          </DropdownIndicator>
                                                        </div>
                                                      </EmotionCssPropInternal>
                                                    </IndicatorsContainer>
                                                  </div>
                                                </EmotionCssPropInternal>
                                              </Control>
                                              <input
                                                name="entityType0"
                                                type="hidden"
                                                value=""
                                              />
                                            </div>
                                          </EmotionCssPropInternal>
                                        </SelectContainer>
                                      </Select>
                                    </StateManager>
                                  </div>
                                </div>
                              </SelectInputImpl>
                            </SelectInput>
                          </div>
                        </div>
                      </SingleParentEntity>
                    </ComponentWithQueryModels>
                  </withRouter(ComponentWithQueryModels)>
                </Memo()>
              </div>
            </div>
          </PanelBody>
        </div>
      </Panel>
    </Uncontrolled(Panel)>
  </ForwardRef>
  <div
    className="full-width bottom-spacing"
  >
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="default"
      className="pull-left"
      disabled={false}
      onClick={[Function]}
    >
      <button
        className="pull-left btn btn-default"
        disabled={false}
        onClick={[Function]}
        type="button"
      >
        Cancel
      </button>
    </Button>
    <Button
      active={false}
      block={false}
      bsClass="btn"
      bsStyle="success"
      className="pull-right"
      disabled={true}
      onClick={[Function]}
      type="submit"
    >
      <button
        className="pull-right btn btn-success"
        disabled={true}
        onClick={[Function]}
        type="submit"
      >
        Save
      </button>
    </Button>
  </div>
  <Progress
    delay={350}
    estimate={0}
    modal={true}
    title="Updating data"
    toggle={false}
    updateIncrement={50}
  >
    <Modal
      animation={true}
      autoFocus={true}
      backdrop={true}
      bsClass="modal"
      bsSize="large"
      dialogComponentClass={[Function]}
      enforceFocus={true}
      keyboard={true}
      manager={
        ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        }
      }
      onHide={[Function]}
      renderBackdrop={[Function]}
      restoreFocus={true}
      show={false}
    >
      <Modal
        autoFocus={true}
        backdrop={true}
        backdropClassName="modal-backdrop"
        backdropTransition={[Function]}
        containerClassName="modal-open"
        enforceFocus={true}
        keyboard={true}
        manager={
          ModalManager {
            "add": [Function],
            "containers": Array [],
            "data": Array [],
            "handleContainerOverflow": true,
            "hideSiblingNodes": true,
            "isTopModal": [Function],
            "modals": Array [],
            "remove": [Function],
          }
        }
        onEntering={[Function]}
        onExited={[Function]}
        onHide={[Function]}
        onMouseUp={[Function]}
        renderBackdrop={[Function]}
        restoreFocus={true}
        show={false}
        transition={[Function]}
      />
    </Modal>
  </Progress>
</ParentEntityEditPanel>
`;

exports[`<ParentEntityEditPanel> error state 1`] = `
<ParentEntityEditPanel
  canUpdate={false}
  cancelText="Cancel"
  childData={Object {}}
  childName="Test"
  childNounSingular="Testing"
  childQueryInfo={
    Immutable.Record {
      "columns": Immutable.OrderedMap {},
      "description": undefined,
      "importTemplates": Immutable.List [],
      "iconURL": "default",
      "lastAction": undefined,
      "name": undefined,
      "pkCols": Immutable.List [],
      "schemaName": "samples",
      "status": 2,
      "title": undefined,
      "titleColumn": undefined,
      "views": Immutable.Map {},
      "importUrlDisabled": undefined,
      "importUrl": undefined,
      "insertUrlDisabled": undefined,
      "insertUrl": undefined,
      "appEditableTable": false,
      "isLoading": false,
      "isMedia": false,
      "queryLabel": undefined,
      "schemaLabel": undefined,
      "schemaQuery": undefined,
      "showInsertNewButton": true,
      "singular": undefined,
      "plural": undefined,
    }
  }
  parentDataTypes={
    Array [
      Object {
        "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
        "deleteHelpLinkTopic": "dataClass",
        "dependencyText": "derived sample dependencies",
        "descriptionPlural": "parent types",
        "descriptionSingular": "parent type",
        "importFileAction": "importData",
        "inputColumnName": "Inputs/Data/First",
        "inputTypeValueField": "rowId",
        "insertColumnNamePrefix": "DataInputs/",
        "instanceSchemaName": "exp.data",
        "listingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "Data",
          "viewName": undefined,
        },
        "nounAsParentSingular": "Parent",
        "nounPlural": "data",
        "nounSingular": "data",
        "typeListingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "DataClasses",
          "viewName": undefined,
        },
        "typeNounSingular": "Data Type",
        "uniqueFieldKey": "Name",
      },
    ]
  }
  submitText="Save"
  title="Test 123"
>
  <ForwardRef
    bsStyle="default"
  >
    <Uncontrolled(Panel)
      bsStyle="default"
      innerRef={null}
    >
      <Panel
        bsClass="panel"
        bsStyle="default"
        onToggle={[Function]}
      >
        <div
          className="panel panel-default"
        >
          <PanelHeading
            bsClass="panel"
            componentClass="div"
          >
            <div
              className="panel-heading"
            >
              <DetailPanelHeader
                canUpdate={false}
                editing={false}
                isEditable={false}
                onClickFn={[Function]}
                title="Test 123"
                useEditIcon={true}
              >
                <div
                  className="detail__edit--heading"
                >
                  Test 123
                </div>
              </DetailPanelHeader>
            </div>
          </PanelHeading>
          <PanelBody
            bsClass="panel"
            collapsible={false}
          >
            <div
              className="panel-body"
            >
              <Alert
                bsStyle="danger"
              >
                <Alert
                  bsClass="alert"
                  bsStyle="danger"
                  closeLabel="Close alert"
                >
                  <div
                    className="alert alert-danger"
                    role="alert"
                  >
                    My error message
                  </div>
                </Alert>
              </Alert>
              <div
                className="bottom-spacing"
              >
                <b>
                  Data
                   for 
                  Test
                </b>
              </div>
              <div>
                <hr />
                <Memo()
                  childNounSingular="Testing"
                  editing={false}
                  index={0}
                  onChangeParentType={[Function]}
                  onChangeParentValue={[Function]}
                  onInitialParentValue={[Function]}
                  parentDataType={
                    Object {
                      "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                      "deleteHelpLinkTopic": "dataClass",
                      "dependencyText": "derived sample dependencies",
                      "descriptionPlural": "parent types",
                      "descriptionSingular": "parent type",
                      "importFileAction": "importData",
                      "inputColumnName": "Inputs/Data/First",
                      "inputTypeValueField": "rowId",
                      "insertColumnNamePrefix": "DataInputs/",
                      "instanceSchemaName": "exp.data",
                      "listingSchemaQuery": Immutable.Record {
                        "schemaName": "exp",
                        "queryName": "Data",
                        "viewName": undefined,
                      },
                      "nounAsParentSingular": "Parent",
                      "nounPlural": "data",
                      "nounSingular": "data",
                      "typeListingSchemaQuery": Immutable.Record {
                        "schemaName": "exp",
                        "queryName": "DataClasses",
                        "viewName": undefined,
                      },
                      "typeNounSingular": "Data Type",
                      "uniqueFieldKey": "Name",
                    }
                  }
                >
                  <withRouter(ComponentWithQueryModels)
                    childNounSingular="Testing"
                    editing={false}
                    index={0}
                    onChangeParentType={[Function]}
                    onChangeParentValue={[Function]}
                    onInitialParentValue={[Function]}
                    onTypeChange={[Function]}
                    onValueChange={[Function]}
                    parentDataType={
                      Object {
                        "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                        "deleteHelpLinkTopic": "dataClass",
                        "dependencyText": "derived sample dependencies",
                        "descriptionPlural": "parent types",
                        "descriptionSingular": "parent type",
                        "importFileAction": "importData",
                        "inputColumnName": "Inputs/Data/First",
                        "inputTypeValueField": "rowId",
                        "insertColumnNamePrefix": "DataInputs/",
                        "instanceSchemaName": "exp.data",
                        "listingSchemaQuery": Immutable.Record {
                          "schemaName": "exp",
                          "queryName": "Data",
                          "viewName": undefined,
                        },
                        "nounAsParentSingular": "Parent",
                        "nounPlural": "data",
                        "nounSingular": "data",
                        "typeListingSchemaQuery": Immutable.Record {
                          "schemaName": "exp",
                          "queryName": "DataClasses",
                          "viewName": undefined,
                        },
                        "typeNounSingular": "Data Type",
                        "uniqueFieldKey": "Name",
                      }
                    }
                    queryConfigs={Object {}}
                  >
                    <ComponentWithQueryModels
                      autoLoad={false}
                      childNounSingular="Testing"
                      editing={false}
                      index={0}
                      modelLoader={
                        Object {
                          "clearSelections": [Function],
                          "loadCharts": [Function],
                          "loadQueryInfo": [Function],
                          "loadRows": [Function],
                          "loadSelections": [Function],
                          "replaceSelections": [Function],
                          "selectAllRows": [Function],
                          "setSelections": [Function],
                        }
                      }
                      onChangeParentType={[Function]}
                      onChangeParentValue={[Function]}
                      onInitialParentValue={[Function]}
                      onTypeChange={[Function]}
                      onValueChange={[Function]}
                      parentDataType={
                        Object {
                          "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                          "deleteHelpLinkTopic": "dataClass",
                          "dependencyText": "derived sample dependencies",
                          "descriptionPlural": "parent types",
                          "descriptionSingular": "parent type",
                          "importFileAction": "importData",
                          "inputColumnName": "Inputs/Data/First",
                          "inputTypeValueField": "rowId",
                          "insertColumnNamePrefix": "DataInputs/",
                          "instanceSchemaName": "exp.data",
                          "listingSchemaQuery": Immutable.Record {
                            "schemaName": "exp",
                            "queryName": "Data",
                            "viewName": undefined,
                          },
                          "nounAsParentSingular": "Parent",
                          "nounPlural": "data",
                          "nounSingular": "data",
                          "typeListingSchemaQuery": Immutable.Record {
                            "schemaName": "exp",
                            "queryName": "DataClasses",
                            "viewName": undefined,
                          },
                          "typeNounSingular": "Data Type",
                          "uniqueFieldKey": "Name",
                        }
                      }
                      queryConfigs={Object {}}
                    >
                      <SingleParentEntity
                        actions={
                          Object {
                            "addModel": [Function],
                            "clearSelections": [Function],
                            "loadAllModels": [Function],
                            "loadCharts": [Function],
                            "loadFirstPage": [Function],
                            "loadLastPage": [Function],
                            "loadModel": [Function],
                            "loadNextPage": [Function],
                            "loadPreviousPage": [Function],
                            "loadRows": [Function],
                            "replaceSelections": [Function],
                            "selectAllRows": [Function],
                            "selectPage": [Function],
                            "selectReport": [Function],
                            "selectRow": [Function],
                            "setFilters": [Function],
                            "setMaxRows": [Function],
                            "setOffset": [Function],
                            "setSchemaQuery": [Function],
                            "setSelections": [Function],
                            "setSorts": [Function],
                            "setView": [Function],
                          }
                        }
                        autoLoad={false}
                        childNounSingular="Testing"
                        editing={false}
                        index={0}
                        onChangeParentType={[Function]}
                        onChangeParentValue={[Function]}
                        onInitialParentValue={[Function]}
                        onTypeChange={[Function]}
                        onValueChange={[Function]}
                        parentDataType={
                          Object {
                            "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
                            "deleteHelpLinkTopic": "dataClass",
                            "dependencyText": "derived sample dependencies",
                            "descriptionPlural": "parent types",
                            "descriptionSingular": "parent type",
                            "importFileAction": "importData",
                            "inputColumnName": "Inputs/Data/First",
                            "inputTypeValueField": "rowId",
                            "insertColumnNamePrefix": "DataInputs/",
                            "instanceSchemaName": "exp.data",
                            "listingSchemaQuery": Immutable.Record {
                              "schemaName": "exp",
                              "queryName": "Data",
                              "viewName": undefined,
                            },
                            "nounAsParentSingular": "Parent",
                            "nounPlural": "data",
                            "nounSingular": "data",
                            "typeListingSchemaQuery": Immutable.Record {
                              "schemaName": "exp",
                              "queryName": "DataClasses",
                              "viewName": undefined,
                            },
                            "typeNounSingular": "Data Type",
                            "uniqueFieldKey": "Name",
                          }
                        }
                        queryModels={Object {}}
                      >
                        <div
                          className="top-spacing"
                          key="grid-0"
                        >
                          <table
                            className="table table-responsive table-condensed detail-component--table__fixed"
                          >
                            <tbody>
                              <tr
                                key="type-name"
                              >
                                <td>
                                  Data Type
                                </td>
                                <td>
                                  No 
                                  data type
                                   has been set for this 
                                  testing
                                  .
                                </td>
                              </tr>
                              <tr
                                key="parent-id"
                              >
                                <td>
                                  Data ID
                                </td>
                                <td>
                                  No 
                                  data
                                   ID has been set for this 
                                  testing
                                  .
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div>
                      </SingleParentEntity>
                    </ComponentWithQueryModels>
                  </withRouter(ComponentWithQueryModels)>
                </Memo()>
              </div>
            </div>
          </PanelBody>
        </div>
      </Panel>
    </Uncontrolled(Panel)>
  </ForwardRef>
</ParentEntityEditPanel>
`;

exports[`<ParentEntityEditPanel> loading state 1`] = `
<ParentEntityEditPanel
  canUpdate={false}
  cancelText="Cancel"
  childData={Object {}}
  childName="Test"
  childNounSingular="Testing"
  childQueryInfo={
    Immutable.Record {
      "columns": Immutable.OrderedMap {},
      "description": undefined,
      "importTemplates": Immutable.List [],
      "iconURL": "default",
      "lastAction": undefined,
      "name": undefined,
      "pkCols": Immutable.List [],
      "schemaName": "samples",
      "status": 2,
      "title": undefined,
      "titleColumn": undefined,
      "views": Immutable.Map {},
      "importUrlDisabled": undefined,
      "importUrl": undefined,
      "insertUrlDisabled": undefined,
      "insertUrl": undefined,
      "appEditableTable": false,
      "isLoading": false,
      "isMedia": false,
      "queryLabel": undefined,
      "schemaLabel": undefined,
      "schemaQuery": undefined,
      "showInsertNewButton": true,
      "singular": undefined,
      "plural": undefined,
    }
  }
  parentDataTypes={
    Array [
      Object {
        "deleteConfirmationActionName": "getDataDeleteConfirmationData.api",
        "deleteHelpLinkTopic": "dataClass",
        "dependencyText": "derived sample dependencies",
        "descriptionPlural": "parent types",
        "descriptionSingular": "parent type",
        "importFileAction": "importData",
        "inputColumnName": "Inputs/Data/First",
        "inputTypeValueField": "rowId",
        "insertColumnNamePrefix": "DataInputs/",
        "instanceSchemaName": "exp.data",
        "listingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "Data",
          "viewName": undefined,
        },
        "nounAsParentSingular": "Parent",
        "nounPlural": "data",
        "nounSingular": "data",
        "typeListingSchemaQuery": Immutable.Record {
          "schemaName": "exp",
          "queryName": "DataClasses",
          "viewName": undefined,
        },
        "typeNounSingular": "Data Type",
        "uniqueFieldKey": "Name",
      },
    ]
  }
  submitText="Save"
  title="Test 123"
>
  <ForwardRef
    bsStyle="default"
  >
    <Uncontrolled(Panel)
      bsStyle="default"
      innerRef={null}
    >
      <Panel
        bsClass="panel"
        bsStyle="default"
        onToggle={[Function]}
      >
        <div
          className="panel panel-default"
        >
          <PanelHeading
            bsClass="panel"
            componentClass="div"
          >
            <div
              className="panel-heading"
            >
              <DetailPanelHeader
                canUpdate={false}
                editing={false}
                isEditable={false}
                onClickFn={[Function]}
                title="Test 123"
                useEditIcon={true}
              >
                <div
                  className="detail__edit--heading"
                >
                  Test 123
                </div>
              </DetailPanelHeader>
            </div>
          </PanelHeading>
          <PanelBody
            bsClass="panel"
            collapsible={false}
          >
            <div
              className="panel-body"
            >
              <Alert
                bsStyle="danger"
              />
              <div
                className="bottom-spacing"
              >
                <b>
                  Data
                   for 
                  Test
                </b>
              </div>
              <LoadingSpinner
                msg="Loading..."
                wrapperClassName=""
              >
                <span
                  className=""
                >
                  <i
                    aria-hidden="true"
                    className="fa fa-spinner fa-pulse"
                  />
                   
                  Loading...
                </span>
              </LoadingSpinner>
            </div>
          </PanelBody>
        </div>
      </Panel>
    </Uncontrolled(Panel)>
  </ForwardRef>
</ParentEntityEditPanel>
`;
